query 1 run 1
SET
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=3951265.79..3951265.80 rows=1 width=236)
   ->  Sort  (cost=3951265.79..3951265.81 rows=6 width=236)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=3951265.60..3951265.76 rows=6 width=236)
               Group Key: l_returnflag, l_linestatus
               ->  Seq Scan on lineitem  (cost=0.00..1875025.00 rows=59321160 width=25)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
 JIT:
   Functions: 7
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(10 rows)

query 1 run 2
SET
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=3951265.79..3951265.80 rows=1 width=236)
   ->  Sort  (cost=3951265.79..3951265.81 rows=6 width=236)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=3951265.60..3951265.76 rows=6 width=236)
               Group Key: l_returnflag, l_linestatus
               ->  Seq Scan on lineitem  (cost=0.00..1875025.00 rows=59321160 width=25)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
 JIT:
   Functions: 7
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(10 rows)

query 1 run 3
SET
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=3951265.79..3951265.80 rows=1 width=236)
   ->  Sort  (cost=3951265.79..3951265.81 rows=6 width=236)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=3951265.60..3951265.76 rows=6 width=236)
               Group Key: l_returnflag, l_linestatus
               ->  Seq Scan on lineitem  (cost=0.00..1875025.00 rows=59321160 width=25)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
 JIT:
   Functions: 7
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(10 rows)

query 1 run 4
SET
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=3951265.79..3951265.80 rows=1 width=236)
   ->  Sort  (cost=3951265.79..3951265.81 rows=6 width=236)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=3951265.60..3951265.76 rows=6 width=236)
               Group Key: l_returnflag, l_linestatus
               ->  Seq Scan on lineitem  (cost=0.00..1875025.00 rows=59321160 width=25)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
 JIT:
   Functions: 7
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(10 rows)

query 1 run 5
SET
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=3951265.79..3951265.80 rows=1 width=236)
   ->  Sort  (cost=3951265.79..3951265.81 rows=6 width=236)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=3951265.60..3951265.76 rows=6 width=236)
               Group Key: l_returnflag, l_linestatus
               ->  Seq Scan on lineitem  (cost=0.00..1875025.00 rows=59321160 width=25)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
 JIT:
   Functions: 7
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(10 rows)

query 2 run 1
SET
SET
SET
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=506871.69..506871.69 rows=1 width=192)
   ->  Sort  (cost=506871.69..506871.69 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=52.83..506871.68 rows=1 width=192)
               Join Filter: (supplier.s_nationkey = nation.n_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=52.83..506868.98 rows=1 width=170)
                     ->  Nested Loop  (cost=52.83..506868.98 rows=1 width=170)
                           Join Filter: (supplier.s_suppkey = partsupp.ps_suppkey)
                           ->  Nested Loop  (cost=52.83..502397.98 rows=1 width=34)
                                 ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..54341.51 rows=8221 width=30)
                                       Index Cond: (p_size = 16)
                                       Filter: ((p_type)::text ~~ '%NICKEL'::text)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=52.41..54.49 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=51.96..51.97 rows=1 width=32)
                                               ->  Nested Loop  (cost=2.41..51.95 rows=4 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Hash Join  (cost=2.41..50.65 rows=19 width=10)
                                                           Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                                           ->  Nested Loop  (cost=0.85..49.03 rows=19 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.43..2.77 rows=19 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.42..2.43 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                                                 ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
                           ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=144)
 JIT:
   Functions: 38
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(38 rows)

query 2 run 2
SET
SET
SET
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=506871.69..506871.69 rows=1 width=192)
   ->  Sort  (cost=506871.69..506871.69 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=52.83..506871.68 rows=1 width=192)
               Join Filter: (supplier.s_nationkey = nation.n_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=52.83..506868.98 rows=1 width=170)
                     ->  Nested Loop  (cost=52.83..506868.98 rows=1 width=170)
                           Join Filter: (supplier.s_suppkey = partsupp.ps_suppkey)
                           ->  Nested Loop  (cost=52.83..502397.98 rows=1 width=34)
                                 ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..54341.51 rows=8221 width=30)
                                       Index Cond: (p_size = 16)
                                       Filter: ((p_type)::text ~~ '%NICKEL'::text)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=52.41..54.49 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=51.96..51.97 rows=1 width=32)
                                               ->  Nested Loop  (cost=2.41..51.95 rows=4 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Hash Join  (cost=2.41..50.65 rows=19 width=10)
                                                           Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                                           ->  Nested Loop  (cost=0.85..49.03 rows=19 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.43..2.77 rows=19 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.42..2.43 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                                                 ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
                           ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=144)
 JIT:
   Functions: 38
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(38 rows)

query 2 run 3
SET
SET
SET
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=506871.69..506871.69 rows=1 width=192)
   ->  Sort  (cost=506871.69..506871.69 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=52.83..506871.68 rows=1 width=192)
               Join Filter: (supplier.s_nationkey = nation.n_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=52.83..506868.98 rows=1 width=170)
                     ->  Nested Loop  (cost=52.83..506868.98 rows=1 width=170)
                           Join Filter: (supplier.s_suppkey = partsupp.ps_suppkey)
                           ->  Nested Loop  (cost=52.83..502397.98 rows=1 width=34)
                                 ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..54341.51 rows=8221 width=30)
                                       Index Cond: (p_size = 16)
                                       Filter: ((p_type)::text ~~ '%NICKEL'::text)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=52.41..54.49 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=51.96..51.97 rows=1 width=32)
                                               ->  Nested Loop  (cost=2.41..51.95 rows=4 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Hash Join  (cost=2.41..50.65 rows=19 width=10)
                                                           Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                                           ->  Nested Loop  (cost=0.85..49.03 rows=19 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.43..2.77 rows=19 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.42..2.43 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                                                 ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
                           ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=144)
 JIT:
   Functions: 38
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(38 rows)

query 2 run 4
SET
SET
SET
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=506871.69..506871.69 rows=1 width=192)
   ->  Sort  (cost=506871.69..506871.69 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=52.83..506871.68 rows=1 width=192)
               Join Filter: (supplier.s_nationkey = nation.n_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=52.83..506868.98 rows=1 width=170)
                     ->  Nested Loop  (cost=52.83..506868.98 rows=1 width=170)
                           Join Filter: (supplier.s_suppkey = partsupp.ps_suppkey)
                           ->  Nested Loop  (cost=52.83..502397.98 rows=1 width=34)
                                 ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..54341.51 rows=8221 width=30)
                                       Index Cond: (p_size = 16)
                                       Filter: ((p_type)::text ~~ '%NICKEL'::text)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=52.41..54.49 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=51.96..51.97 rows=1 width=32)
                                               ->  Nested Loop  (cost=2.41..51.95 rows=4 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Hash Join  (cost=2.41..50.65 rows=19 width=10)
                                                           Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                                           ->  Nested Loop  (cost=0.85..49.03 rows=19 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.43..2.77 rows=19 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.42..2.43 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                                                 ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
                           ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=144)
 JIT:
   Functions: 38
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(38 rows)

query 2 run 5
SET
SET
SET
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=506871.69..506871.69 rows=1 width=192)
   ->  Sort  (cost=506871.69..506871.69 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=52.83..506871.68 rows=1 width=192)
               Join Filter: (supplier.s_nationkey = nation.n_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=52.83..506868.98 rows=1 width=170)
                     ->  Nested Loop  (cost=52.83..506868.98 rows=1 width=170)
                           Join Filter: (supplier.s_suppkey = partsupp.ps_suppkey)
                           ->  Nested Loop  (cost=52.83..502397.98 rows=1 width=34)
                                 ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..54341.51 rows=8221 width=30)
                                       Index Cond: (p_size = 16)
                                       Filter: ((p_type)::text ~~ '%NICKEL'::text)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=52.41..54.49 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=51.96..51.97 rows=1 width=32)
                                               ->  Nested Loop  (cost=2.41..51.95 rows=4 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Hash Join  (cost=2.41..50.65 rows=19 width=10)
                                                           Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                                           ->  Nested Loop  (cost=0.85..49.03 rows=19 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.43..2.77 rows=19 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.42..2.43 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                                                 ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
                           ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=144)
 JIT:
   Functions: 38
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(38 rows)

query 3 run 1
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3202481.88..3202481.91 rows=10 width=44)
   ->  Sort  (cost=3202481.88..3210300.00 rows=3127249 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  HashAggregate  (cost=3059165.09..3134903.15 rows=3127249 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               Planned Partitions: 16
               ->  Hash Join  (cost=522580.98..2876416.48 rows=3127249 width=24)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     ->  Seq Scan on lineitem  (cost=0.00..1875025.00 rows=32592535 width=16)
                           Filter: (l_shipdate > '1995-03-07'::date)
                     ->  Hash  (cost=497562.23..497562.23 rows=1439260 width=12)
                           ->  Hash Join  (cost=126866.53..497562.23 rows=1439260 width=12)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Bitmap Heap Scan on orders  (cost=68440.80..420144.88 rows=7234886 width=16)
                                       Recheck Cond: (o_orderdate < '1995-03-07'::date)
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..66632.08 rows=7234886 width=0)
                                             Index Cond: (o_orderdate < '1995-03-07'::date)
                                 ->  Hash  (cost=54695.94..54695.94 rows=298383 width=4)
                                       ->  Seq Scan on customer  (cost=0.00..54695.94 rows=298383 width=4)
                                             Filter: (c_mktsegment = 'BUILDING'::bpchar)
 JIT:
   Functions: 27
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(23 rows)

query 3 run 2
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3202481.88..3202481.91 rows=10 width=44)
   ->  Sort  (cost=3202481.88..3210300.00 rows=3127249 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  HashAggregate  (cost=3059165.09..3134903.15 rows=3127249 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               Planned Partitions: 16
               ->  Hash Join  (cost=522580.98..2876416.48 rows=3127249 width=24)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     ->  Seq Scan on lineitem  (cost=0.00..1875025.00 rows=32592535 width=16)
                           Filter: (l_shipdate > '1995-03-07'::date)
                     ->  Hash  (cost=497562.23..497562.23 rows=1439260 width=12)
                           ->  Hash Join  (cost=126866.53..497562.23 rows=1439260 width=12)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Bitmap Heap Scan on orders  (cost=68440.80..420144.88 rows=7234886 width=16)
                                       Recheck Cond: (o_orderdate < '1995-03-07'::date)
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..66632.08 rows=7234886 width=0)
                                             Index Cond: (o_orderdate < '1995-03-07'::date)
                                 ->  Hash  (cost=54695.94..54695.94 rows=298383 width=4)
                                       ->  Seq Scan on customer  (cost=0.00..54695.94 rows=298383 width=4)
                                             Filter: (c_mktsegment = 'BUILDING'::bpchar)
 JIT:
   Functions: 27
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(23 rows)

query 3 run 3
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3202481.88..3202481.91 rows=10 width=44)
   ->  Sort  (cost=3202481.88..3210300.00 rows=3127249 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  HashAggregate  (cost=3059165.09..3134903.15 rows=3127249 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               Planned Partitions: 16
               ->  Hash Join  (cost=522580.98..2876416.48 rows=3127249 width=24)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     ->  Seq Scan on lineitem  (cost=0.00..1875025.00 rows=32592535 width=16)
                           Filter: (l_shipdate > '1995-03-07'::date)
                     ->  Hash  (cost=497562.23..497562.23 rows=1439260 width=12)
                           ->  Hash Join  (cost=126866.53..497562.23 rows=1439260 width=12)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Bitmap Heap Scan on orders  (cost=68440.80..420144.88 rows=7234886 width=16)
                                       Recheck Cond: (o_orderdate < '1995-03-07'::date)
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..66632.08 rows=7234886 width=0)
                                             Index Cond: (o_orderdate < '1995-03-07'::date)
                                 ->  Hash  (cost=54695.94..54695.94 rows=298383 width=4)
                                       ->  Seq Scan on customer  (cost=0.00..54695.94 rows=298383 width=4)
                                             Filter: (c_mktsegment = 'BUILDING'::bpchar)
 JIT:
   Functions: 27
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(23 rows)

query 3 run 4
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3202481.88..3202481.91 rows=10 width=44)
   ->  Sort  (cost=3202481.88..3210300.00 rows=3127249 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  HashAggregate  (cost=3059165.09..3134903.15 rows=3127249 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               Planned Partitions: 16
               ->  Hash Join  (cost=522580.98..2876416.48 rows=3127249 width=24)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     ->  Seq Scan on lineitem  (cost=0.00..1875025.00 rows=32592535 width=16)
                           Filter: (l_shipdate > '1995-03-07'::date)
                     ->  Hash  (cost=497562.23..497562.23 rows=1439260 width=12)
                           ->  Hash Join  (cost=126866.53..497562.23 rows=1439260 width=12)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Bitmap Heap Scan on orders  (cost=68440.80..420144.88 rows=7234886 width=16)
                                       Recheck Cond: (o_orderdate < '1995-03-07'::date)
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..66632.08 rows=7234886 width=0)
                                             Index Cond: (o_orderdate < '1995-03-07'::date)
                                 ->  Hash  (cost=54695.94..54695.94 rows=298383 width=4)
                                       ->  Seq Scan on customer  (cost=0.00..54695.94 rows=298383 width=4)
                                             Filter: (c_mktsegment = 'BUILDING'::bpchar)
 JIT:
   Functions: 27
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(23 rows)

query 3 run 5
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3202481.88..3202481.91 rows=10 width=44)
   ->  Sort  (cost=3202481.88..3210300.00 rows=3127249 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  HashAggregate  (cost=3059165.09..3134903.15 rows=3127249 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               Planned Partitions: 16
               ->  Hash Join  (cost=522580.98..2876416.48 rows=3127249 width=24)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     ->  Seq Scan on lineitem  (cost=0.00..1875025.00 rows=32592535 width=16)
                           Filter: (l_shipdate > '1995-03-07'::date)
                     ->  Hash  (cost=497562.23..497562.23 rows=1439260 width=12)
                           ->  Hash Join  (cost=126866.53..497562.23 rows=1439260 width=12)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Bitmap Heap Scan on orders  (cost=68440.80..420144.88 rows=7234886 width=16)
                                       Recheck Cond: (o_orderdate < '1995-03-07'::date)
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..66632.08 rows=7234886 width=0)
                                             Index Cond: (o_orderdate < '1995-03-07'::date)
                                 ->  Hash  (cost=54695.94..54695.94 rows=298383 width=4)
                                       ->  Seq Scan on customer  (cost=0.00..54695.94 rows=298383 width=4)
                                             Filter: (c_mktsegment = 'BUILDING'::bpchar)
 JIT:
   Functions: 27
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(23 rows)

query 4 run 1
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=764589.98..764589.98 rows=1 width=24)
   ->  Sort  (cost=764589.98..764589.99 rows=5 width=24)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=764589.91..764589.96 rows=5 width=24)
               Group Key: orders.o_orderpriority
               ->  Merge Semi Join  (cost=327211.72..761894.49 rows=539083 width=16)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Sort  (cost=327134.74..328482.67 rows=539172 width=20)
                           Sort Key: orders.o_orderkey
                           ->  Bitmap Heap Scan on orders  (cost=6448.95..275804.53 rows=539172 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6314.16 rows=539172 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Only Scan using q4_idx_1 on lineitem  (cost=0.44..374921.24 rows=19996853 width=4)
 JIT:
   Functions: 12
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(17 rows)

query 4 run 2
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=764589.98..764589.98 rows=1 width=24)
   ->  Sort  (cost=764589.98..764589.99 rows=5 width=24)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=764589.91..764589.96 rows=5 width=24)
               Group Key: orders.o_orderpriority
               ->  Merge Semi Join  (cost=327211.72..761894.49 rows=539083 width=16)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Sort  (cost=327134.74..328482.67 rows=539172 width=20)
                           Sort Key: orders.o_orderkey
                           ->  Bitmap Heap Scan on orders  (cost=6448.95..275804.53 rows=539172 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6314.16 rows=539172 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Only Scan using q4_idx_1 on lineitem  (cost=0.44..374921.24 rows=19996853 width=4)
 JIT:
   Functions: 12
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(17 rows)

query 4 run 3
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=764589.98..764589.98 rows=1 width=24)
   ->  Sort  (cost=764589.98..764589.99 rows=5 width=24)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=764589.91..764589.96 rows=5 width=24)
               Group Key: orders.o_orderpriority
               ->  Merge Semi Join  (cost=327211.72..761894.49 rows=539083 width=16)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Sort  (cost=327134.74..328482.67 rows=539172 width=20)
                           Sort Key: orders.o_orderkey
                           ->  Bitmap Heap Scan on orders  (cost=6448.95..275804.53 rows=539172 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6314.16 rows=539172 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Only Scan using q4_idx_1 on lineitem  (cost=0.44..374921.24 rows=19996853 width=4)
 JIT:
   Functions: 12
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(17 rows)

query 4 run 4
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=764589.98..764589.98 rows=1 width=24)
   ->  Sort  (cost=764589.98..764589.99 rows=5 width=24)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=764589.91..764589.96 rows=5 width=24)
               Group Key: orders.o_orderpriority
               ->  Merge Semi Join  (cost=327211.72..761894.49 rows=539083 width=16)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Sort  (cost=327134.74..328482.67 rows=539172 width=20)
                           Sort Key: orders.o_orderkey
                           ->  Bitmap Heap Scan on orders  (cost=6448.95..275804.53 rows=539172 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6314.16 rows=539172 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Only Scan using q4_idx_1 on lineitem  (cost=0.44..374921.24 rows=19996853 width=4)
 JIT:
   Functions: 12
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(17 rows)

query 4 run 5
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=764589.98..764589.98 rows=1 width=24)
   ->  Sort  (cost=764589.98..764589.99 rows=5 width=24)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=764589.91..764589.96 rows=5 width=24)
               Group Key: orders.o_orderpriority
               ->  Merge Semi Join  (cost=327211.72..761894.49 rows=539083 width=16)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Sort  (cost=327134.74..328482.67 rows=539172 width=20)
                           Sort Key: orders.o_orderkey
                           ->  Bitmap Heap Scan on orders  (cost=6448.95..275804.53 rows=539172 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6314.16 rows=539172 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Only Scan using q4_idx_1 on lineitem  (cost=0.44..374921.24 rows=19996853 width=4)
 JIT:
   Functions: 12
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(17 rows)

query 5 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1642283.58..1642283.58 rows=1 width=58)
   ->  Sort  (cost=1642283.58..1642283.64 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=1641363.70..1642283.45 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=1641363.70..1641547.59 rows=73555 width=38)
                     Sort Key: nation.n_name
                     ->  Hash Join  (cost=95542.33..1635418.05 rows=73555 width=38)
                           Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                           ->  Nested Loop  (cost=90821.33..1621042.59 rows=1838944 width=50)
                                 ->  Hash Join  (cost=90820.77..399794.28 rows=459812 width=38)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=27497.81..323251.73 rows=2299061 width=8)
                                             Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..26923.05 rows=2299061 width=0)
                                                   Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Hash  (cost=59573.17..59573.17 rows=299983 width=38)
                                             ->  Hash Join  (cost=2.51..59573.17 rows=299983 width=38)
                                                   Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..50946.15 rows=1499915 width=8)
                                                   ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                         ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                               Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.56..2.62 rows=4 width=20)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
 JIT:
   Functions: 47
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(34 rows)

query 5 run 2
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1642283.58..1642283.58 rows=1 width=58)
   ->  Sort  (cost=1642283.58..1642283.64 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=1641363.70..1642283.45 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=1641363.70..1641547.59 rows=73555 width=38)
                     Sort Key: nation.n_name
                     ->  Hash Join  (cost=95542.33..1635418.05 rows=73555 width=38)
                           Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                           ->  Nested Loop  (cost=90821.33..1621042.59 rows=1838944 width=50)
                                 ->  Hash Join  (cost=90820.77..399794.28 rows=459812 width=38)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=27497.81..323251.73 rows=2299061 width=8)
                                             Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..26923.05 rows=2299061 width=0)
                                                   Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Hash  (cost=59573.17..59573.17 rows=299983 width=38)
                                             ->  Hash Join  (cost=2.51..59573.17 rows=299983 width=38)
                                                   Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..50946.15 rows=1499915 width=8)
                                                   ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                         ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                               Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.56..2.62 rows=4 width=20)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
 JIT:
   Functions: 47
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(34 rows)

query 5 run 3
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1642283.58..1642283.58 rows=1 width=58)
   ->  Sort  (cost=1642283.58..1642283.64 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=1641363.70..1642283.45 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=1641363.70..1641547.59 rows=73555 width=38)
                     Sort Key: nation.n_name
                     ->  Hash Join  (cost=95542.33..1635418.05 rows=73555 width=38)
                           Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                           ->  Nested Loop  (cost=90821.33..1621042.59 rows=1838944 width=50)
                                 ->  Hash Join  (cost=90820.77..399794.28 rows=459812 width=38)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=27497.81..323251.73 rows=2299061 width=8)
                                             Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..26923.05 rows=2299061 width=0)
                                                   Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Hash  (cost=59573.17..59573.17 rows=299983 width=38)
                                             ->  Hash Join  (cost=2.51..59573.17 rows=299983 width=38)
                                                   Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..50946.15 rows=1499915 width=8)
                                                   ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                         ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                               Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.56..2.62 rows=4 width=20)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
 JIT:
   Functions: 47
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(34 rows)

query 5 run 4
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1642283.58..1642283.58 rows=1 width=58)
   ->  Sort  (cost=1642283.58..1642283.64 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=1641363.70..1642283.45 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=1641363.70..1641547.59 rows=73555 width=38)
                     Sort Key: nation.n_name
                     ->  Hash Join  (cost=95542.33..1635418.05 rows=73555 width=38)
                           Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                           ->  Nested Loop  (cost=90821.33..1621042.59 rows=1838944 width=50)
                                 ->  Hash Join  (cost=90820.77..399794.28 rows=459812 width=38)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=27497.81..323251.73 rows=2299061 width=8)
                                             Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..26923.05 rows=2299061 width=0)
                                                   Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Hash  (cost=59573.17..59573.17 rows=299983 width=38)
                                             ->  Hash Join  (cost=2.51..59573.17 rows=299983 width=38)
                                                   Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..50946.15 rows=1499915 width=8)
                                                   ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                         ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                               Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.56..2.62 rows=4 width=20)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
 JIT:
   Functions: 47
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(34 rows)

query 5 run 5
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1642283.58..1642283.58 rows=1 width=58)
   ->  Sort  (cost=1642283.58..1642283.64 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=1641363.70..1642283.45 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=1641363.70..1641547.59 rows=73555 width=38)
                     Sort Key: nation.n_name
                     ->  Hash Join  (cost=95542.33..1635418.05 rows=73555 width=38)
                           Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                           ->  Nested Loop  (cost=90821.33..1621042.59 rows=1838944 width=50)
                                 ->  Hash Join  (cost=90820.77..399794.28 rows=459812 width=38)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=27497.81..323251.73 rows=2299061 width=8)
                                             Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..26923.05 rows=2299061 width=0)
                                                   Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Hash  (cost=59573.17..59573.17 rows=299983 width=38)
                                             ->  Hash Join  (cost=2.51..59573.17 rows=299983 width=38)
                                                   Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..50946.15 rows=1499915 width=8)
                                                   ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                         ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                               Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.56..2.62 rows=4 width=20)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
 JIT:
   Functions: 47
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(34 rows)

query 6 run 1
SET
SET
SET
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2067212.88..2067212.89 rows=1 width=32)
   ->  Aggregate  (cost=2067212.88..2067212.89 rows=1 width=32)
         ->  Bitmap Heap Scan on lineitem  (cost=232607.22..2061130.38 rows=1216500 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..232303.10 rows=1216500 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
 JIT:
   Functions: 6
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(9 rows)

query 6 run 2
SET
SET
SET
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2067212.88..2067212.89 rows=1 width=32)
   ->  Aggregate  (cost=2067212.88..2067212.89 rows=1 width=32)
         ->  Bitmap Heap Scan on lineitem  (cost=232607.22..2061130.38 rows=1216500 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..232303.10 rows=1216500 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
 JIT:
   Functions: 6
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(9 rows)

query 6 run 3
SET
SET
SET
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2067212.88..2067212.89 rows=1 width=32)
   ->  Aggregate  (cost=2067212.88..2067212.89 rows=1 width=32)
         ->  Bitmap Heap Scan on lineitem  (cost=232607.22..2061130.38 rows=1216500 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..232303.10 rows=1216500 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
 JIT:
   Functions: 6
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(9 rows)

query 6 run 4
SET
SET
SET
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2067212.88..2067212.89 rows=1 width=32)
   ->  Aggregate  (cost=2067212.88..2067212.89 rows=1 width=32)
         ->  Bitmap Heap Scan on lineitem  (cost=232607.22..2061130.38 rows=1216500 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..232303.10 rows=1216500 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
 JIT:
   Functions: 6
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(9 rows)

query 6 run 5
SET
SET
SET
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2067212.88..2067212.89 rows=1 width=32)
   ->  Aggregate  (cost=2067212.88..2067212.89 rows=1 width=32)
         ->  Bitmap Heap Scan on lineitem  (cost=232607.22..2061130.38 rows=1216500 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..232303.10 rows=1216500 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
 JIT:
   Functions: 6
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(9 rows)

query 7 run 1
SET
SET
SET
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2718792.04..2718792.16 rows=1 width=116)
   ->  GroupAggregate  (cost=2718792.04..2720011.75 rows=10028 width=116)
         Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
         ->  Sort  (cost=2718792.04..2718944.80 rows=61102 width=96)
               Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
               ->  Hash Join  (cost=563405.56..2713934.76 rows=61102 width=96)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     ->  Hash Join  (cost=3629.40..2112136.78 rows=1468237 width=46)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Seq Scan on lineitem  (cost=0.00..2025001.40 rows=18352962 width=24)
                                 Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=3529.40..3529.40 rows=8000 width=30)
                                 ->  Hash Join  (cost=1.40..3529.40 rows=8000 width=30)
                                       Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                                       ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                             ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                   Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                     ->  Hash  (cost=536572.03..536572.03 rows=1200010 width=30)
                           ->  Hash Join  (cost=57052.21..536572.03 rows=1200010 width=30)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Seq Scan on orders  (cost=0.00..411269.27 rows=15000127 width=8)
                                 ->  Hash  (cost=55552.29..55552.29 rows=119993 width=30)
                                       ->  Hash Join  (cost=1.40..55552.29 rows=119993 width=30)
                                             Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50946.15 rows=1499915 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
 JIT:
   Functions: 60
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(33 rows)

query 7 run 2
SET
SET
SET
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2718792.04..2718792.16 rows=1 width=116)
   ->  GroupAggregate  (cost=2718792.04..2720011.75 rows=10028 width=116)
         Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
         ->  Sort  (cost=2718792.04..2718944.80 rows=61102 width=96)
               Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
               ->  Hash Join  (cost=563405.56..2713934.76 rows=61102 width=96)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     ->  Hash Join  (cost=3629.40..2112136.78 rows=1468237 width=46)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Seq Scan on lineitem  (cost=0.00..2025001.40 rows=18352962 width=24)
                                 Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=3529.40..3529.40 rows=8000 width=30)
                                 ->  Hash Join  (cost=1.40..3529.40 rows=8000 width=30)
                                       Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                                       ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                             ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                   Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                     ->  Hash  (cost=536572.03..536572.03 rows=1200010 width=30)
                           ->  Hash Join  (cost=57052.21..536572.03 rows=1200010 width=30)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Seq Scan on orders  (cost=0.00..411269.27 rows=15000127 width=8)
                                 ->  Hash  (cost=55552.29..55552.29 rows=119993 width=30)
                                       ->  Hash Join  (cost=1.40..55552.29 rows=119993 width=30)
                                             Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50946.15 rows=1499915 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
 JIT:
   Functions: 60
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(33 rows)

query 7 run 3
SET
SET
SET
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2718792.04..2718792.16 rows=1 width=116)
   ->  GroupAggregate  (cost=2718792.04..2720011.75 rows=10028 width=116)
         Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
         ->  Sort  (cost=2718792.04..2718944.80 rows=61102 width=96)
               Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
               ->  Hash Join  (cost=563405.56..2713934.76 rows=61102 width=96)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     ->  Hash Join  (cost=3629.40..2112136.78 rows=1468237 width=46)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Seq Scan on lineitem  (cost=0.00..2025001.40 rows=18352962 width=24)
                                 Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=3529.40..3529.40 rows=8000 width=30)
                                 ->  Hash Join  (cost=1.40..3529.40 rows=8000 width=30)
                                       Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                                       ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                             ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                   Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                     ->  Hash  (cost=536572.03..536572.03 rows=1200010 width=30)
                           ->  Hash Join  (cost=57052.21..536572.03 rows=1200010 width=30)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Seq Scan on orders  (cost=0.00..411269.27 rows=15000127 width=8)
                                 ->  Hash  (cost=55552.29..55552.29 rows=119993 width=30)
                                       ->  Hash Join  (cost=1.40..55552.29 rows=119993 width=30)
                                             Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50946.15 rows=1499915 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
 JIT:
   Functions: 60
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(33 rows)

query 7 run 4
SET
SET
SET
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2718792.04..2718792.16 rows=1 width=116)
   ->  GroupAggregate  (cost=2718792.04..2720011.75 rows=10028 width=116)
         Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
         ->  Sort  (cost=2718792.04..2718944.80 rows=61102 width=96)
               Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
               ->  Hash Join  (cost=563405.56..2713934.76 rows=61102 width=96)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     ->  Hash Join  (cost=3629.40..2112136.78 rows=1468237 width=46)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Seq Scan on lineitem  (cost=0.00..2025001.40 rows=18352962 width=24)
                                 Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=3529.40..3529.40 rows=8000 width=30)
                                 ->  Hash Join  (cost=1.40..3529.40 rows=8000 width=30)
                                       Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                                       ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                             ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                   Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                     ->  Hash  (cost=536572.03..536572.03 rows=1200010 width=30)
                           ->  Hash Join  (cost=57052.21..536572.03 rows=1200010 width=30)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Seq Scan on orders  (cost=0.00..411269.27 rows=15000127 width=8)
                                 ->  Hash  (cost=55552.29..55552.29 rows=119993 width=30)
                                       ->  Hash Join  (cost=1.40..55552.29 rows=119993 width=30)
                                             Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50946.15 rows=1499915 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
 JIT:
   Functions: 60
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(33 rows)

query 7 run 5
SET
SET
SET
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2718792.04..2718792.16 rows=1 width=116)
   ->  GroupAggregate  (cost=2718792.04..2720011.75 rows=10028 width=116)
         Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
         ->  Sort  (cost=2718792.04..2718944.80 rows=61102 width=96)
               Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
               ->  Hash Join  (cost=563405.56..2713934.76 rows=61102 width=96)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     ->  Hash Join  (cost=3629.40..2112136.78 rows=1468237 width=46)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Seq Scan on lineitem  (cost=0.00..2025001.40 rows=18352962 width=24)
                                 Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=3529.40..3529.40 rows=8000 width=30)
                                 ->  Hash Join  (cost=1.40..3529.40 rows=8000 width=30)
                                       Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                                       ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                             ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                   Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                     ->  Hash  (cost=536572.03..536572.03 rows=1200010 width=30)
                           ->  Hash Join  (cost=57052.21..536572.03 rows=1200010 width=30)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Seq Scan on orders  (cost=0.00..411269.27 rows=15000127 width=8)
                                 ->  Hash  (cost=55552.29..55552.29 rows=119993 width=30)
                                       ->  Hash Join  (cost=1.40..55552.29 rows=119993 width=30)
                                             Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50946.15 rows=1499915 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
 JIT:
   Functions: 60
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(33 rows)

query 8 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=578201.67..578201.91 rows=1 width=64)
   ->  GroupAggregate  (cost=578201.67..578796.15 rows=2406 width=64)
         Group Key: (EXTRACT(year FROM orders.o_orderdate))
         ->  Sort  (cost=578201.67..578262.37 rows=24283 width=70)
               Sort Key: (EXTRACT(year FROM orders.o_orderdate))
               ->  Nested Loop  (cost=226604.14..576432.93 rows=24283 width=70)
                     ->  Hash Join  (cost=226603.99..575749.51 rows=24283 width=20)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=222132.99..571214.77 rows=24283 width=20)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=158810.04..507193.67 rows=121416 width=24)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Bitmap Heap Scan on orders  (cost=54793.91..384783.09 rows=4581412 width=12)
                                             Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..53648.56 rows=4581412 width=0)
                                                   Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=99047.00..99047.00 rows=397530 width=20)
                                             ->  Nested Loop  (cost=0.99..99047.00 rows=397530 width=20)
                                                   ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..53964.87 rows=13253 width=4)
                                                         Index Cond: (p_type = 'LARGE POLISHED BRASS'::text)
                                                   ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.56..3.09 rows=31 width=24)
                                                         Index Cond: (l_partkey = part.p_partkey)
                                 ->  Hash  (cost=59573.17..59573.17 rows=299983 width=4)
                                       ->  Hash Join  (cost=2.51..59573.17 rows=299983 width=4)
                                             Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50946.15 rows=1499915 width=8)
                                             ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                   ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                         Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                     ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                           Cache Key: supplier.s_nationkey
                           Cache Mode: logical
                           ->  Index Scan using nation_pkey on nation n2  (cost=0.14..1.16 rows=1 width=30)
                                 Index Cond: (n_nationkey = supplier.s_nationkey)
 JIT:
   Functions: 62
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(43 rows)

query 8 run 2
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=578201.67..578201.91 rows=1 width=64)
   ->  GroupAggregate  (cost=578201.67..578796.15 rows=2406 width=64)
         Group Key: (EXTRACT(year FROM orders.o_orderdate))
         ->  Sort  (cost=578201.67..578262.37 rows=24283 width=70)
               Sort Key: (EXTRACT(year FROM orders.o_orderdate))
               ->  Nested Loop  (cost=226604.14..576432.93 rows=24283 width=70)
                     ->  Hash Join  (cost=226603.99..575749.51 rows=24283 width=20)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=222132.99..571214.77 rows=24283 width=20)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=158810.04..507193.67 rows=121416 width=24)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Bitmap Heap Scan on orders  (cost=54793.91..384783.09 rows=4581412 width=12)
                                             Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..53648.56 rows=4581412 width=0)
                                                   Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=99047.00..99047.00 rows=397530 width=20)
                                             ->  Nested Loop  (cost=0.99..99047.00 rows=397530 width=20)
                                                   ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..53964.87 rows=13253 width=4)
                                                         Index Cond: (p_type = 'LARGE POLISHED BRASS'::text)
                                                   ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.56..3.09 rows=31 width=24)
                                                         Index Cond: (l_partkey = part.p_partkey)
                                 ->  Hash  (cost=59573.17..59573.17 rows=299983 width=4)
                                       ->  Hash Join  (cost=2.51..59573.17 rows=299983 width=4)
                                             Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50946.15 rows=1499915 width=8)
                                             ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                   ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                         Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                     ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                           Cache Key: supplier.s_nationkey
                           Cache Mode: logical
                           ->  Index Scan using nation_pkey on nation n2  (cost=0.14..1.16 rows=1 width=30)
                                 Index Cond: (n_nationkey = supplier.s_nationkey)
 JIT:
   Functions: 62
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(43 rows)

query 8 run 3
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=578201.67..578201.91 rows=1 width=64)
   ->  GroupAggregate  (cost=578201.67..578796.15 rows=2406 width=64)
         Group Key: (EXTRACT(year FROM orders.o_orderdate))
         ->  Sort  (cost=578201.67..578262.37 rows=24283 width=70)
               Sort Key: (EXTRACT(year FROM orders.o_orderdate))
               ->  Nested Loop  (cost=226604.14..576432.93 rows=24283 width=70)
                     ->  Hash Join  (cost=226603.99..575749.51 rows=24283 width=20)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=222132.99..571214.77 rows=24283 width=20)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=158810.04..507193.67 rows=121416 width=24)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Bitmap Heap Scan on orders  (cost=54793.91..384783.09 rows=4581412 width=12)
                                             Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..53648.56 rows=4581412 width=0)
                                                   Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=99047.00..99047.00 rows=397530 width=20)
                                             ->  Nested Loop  (cost=0.99..99047.00 rows=397530 width=20)
                                                   ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..53964.87 rows=13253 width=4)
                                                         Index Cond: (p_type = 'LARGE POLISHED BRASS'::text)
                                                   ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.56..3.09 rows=31 width=24)
                                                         Index Cond: (l_partkey = part.p_partkey)
                                 ->  Hash  (cost=59573.17..59573.17 rows=299983 width=4)
                                       ->  Hash Join  (cost=2.51..59573.17 rows=299983 width=4)
                                             Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50946.15 rows=1499915 width=8)
                                             ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                   ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                         Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                     ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                           Cache Key: supplier.s_nationkey
                           Cache Mode: logical
                           ->  Index Scan using nation_pkey on nation n2  (cost=0.14..1.16 rows=1 width=30)
                                 Index Cond: (n_nationkey = supplier.s_nationkey)
 JIT:
   Functions: 62
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(43 rows)

query 8 run 4
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=578201.67..578201.91 rows=1 width=64)
   ->  GroupAggregate  (cost=578201.67..578796.15 rows=2406 width=64)
         Group Key: (EXTRACT(year FROM orders.o_orderdate))
         ->  Sort  (cost=578201.67..578262.37 rows=24283 width=70)
               Sort Key: (EXTRACT(year FROM orders.o_orderdate))
               ->  Nested Loop  (cost=226604.14..576432.93 rows=24283 width=70)
                     ->  Hash Join  (cost=226603.99..575749.51 rows=24283 width=20)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=222132.99..571214.77 rows=24283 width=20)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=158810.04..507193.67 rows=121416 width=24)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Bitmap Heap Scan on orders  (cost=54793.91..384783.09 rows=4581412 width=12)
                                             Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..53648.56 rows=4581412 width=0)
                                                   Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=99047.00..99047.00 rows=397530 width=20)
                                             ->  Nested Loop  (cost=0.99..99047.00 rows=397530 width=20)
                                                   ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..53964.87 rows=13253 width=4)
                                                         Index Cond: (p_type = 'LARGE POLISHED BRASS'::text)
                                                   ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.56..3.09 rows=31 width=24)
                                                         Index Cond: (l_partkey = part.p_partkey)
                                 ->  Hash  (cost=59573.17..59573.17 rows=299983 width=4)
                                       ->  Hash Join  (cost=2.51..59573.17 rows=299983 width=4)
                                             Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50946.15 rows=1499915 width=8)
                                             ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                   ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                         Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                     ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                           Cache Key: supplier.s_nationkey
                           Cache Mode: logical
                           ->  Index Scan using nation_pkey on nation n2  (cost=0.14..1.16 rows=1 width=30)
                                 Index Cond: (n_nationkey = supplier.s_nationkey)
 JIT:
   Functions: 62
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(43 rows)

query 8 run 5
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=578201.67..578201.91 rows=1 width=64)
   ->  GroupAggregate  (cost=578201.67..578796.15 rows=2406 width=64)
         Group Key: (EXTRACT(year FROM orders.o_orderdate))
         ->  Sort  (cost=578201.67..578262.37 rows=24283 width=70)
               Sort Key: (EXTRACT(year FROM orders.o_orderdate))
               ->  Nested Loop  (cost=226604.14..576432.93 rows=24283 width=70)
                     ->  Hash Join  (cost=226603.99..575749.51 rows=24283 width=20)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=222132.99..571214.77 rows=24283 width=20)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=158810.04..507193.67 rows=121416 width=24)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Bitmap Heap Scan on orders  (cost=54793.91..384783.09 rows=4581412 width=12)
                                             Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..53648.56 rows=4581412 width=0)
                                                   Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=99047.00..99047.00 rows=397530 width=20)
                                             ->  Nested Loop  (cost=0.99..99047.00 rows=397530 width=20)
                                                   ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..53964.87 rows=13253 width=4)
                                                         Index Cond: (p_type = 'LARGE POLISHED BRASS'::text)
                                                   ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.56..3.09 rows=31 width=24)
                                                         Index Cond: (l_partkey = part.p_partkey)
                                 ->  Hash  (cost=59573.17..59573.17 rows=299983 width=4)
                                       ->  Hash Join  (cost=2.51..59573.17 rows=299983 width=4)
                                             Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50946.15 rows=1499915 width=8)
                                             ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                   ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                         Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                     ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                           Cache Key: supplier.s_nationkey
                           Cache Mode: logical
                           ->  Index Scan using nation_pkey on nation n2  (cost=0.14..1.16 rows=1 width=30)
                                 Index Cond: (n_nationkey = supplier.s_nationkey)
 JIT:
   Functions: 62
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(43 rows)

query 9 run 1
SET
SET
SET
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1630482.83..1630482.83 rows=1 width=90)
   ->  Sort  (cost=1630482.83..1630633.20 rows=60150 width=90)
         Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
         ->  HashAggregate  (cost=1629279.83..1630182.08 rows=60150 width=90)
               Group Key: nation.n_name, EXTRACT(year FROM orders.o_orderdate)
               ->  Hash Join  (cost=886160.95..1576257.63 rows=3029840 width=81)
                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Hash Join  (cost=886159.39..1559379.85 rows=3029840 width=31)
                           Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Seq Scan on orders  (cost=0.00..411269.27 rows=15000127 width=8)
                           ->  Hash  (cost=827574.39..827574.39 rows=3029840 width=31)
                                 ->  Hash Join  (cost=4483.22..827574.39 rows=3029840 width=31)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       ->  Merge Join  (cost=12.22..815149.73 rows=3029840 width=35)
                                             Merge Cond: (lineitem.l_partkey = partsupp.ps_partkey)
                                             Join Filter: (lineitem.l_suppkey = partsupp.ps_suppkey)
                                             ->  Nested Loop  (cost=0.99..407851.91 rows=3029840 width=33)
                                                   ->  Index Only Scan using q20_idx_2 on part  (cost=0.43..64306.24 rows=101010 width=4)
                                                         Filter: ((p_name)::text ~~ '%navy%'::text)
                                                   ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..3.09 rows=31 width=29)
                                                         Index Cond: (l_partkey = part.p_partkey)
                                             ->  Materialize  (cost=0.43..201501.44 rows=7998686 width=14)
                                                   ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.43..181504.72 rows=7998686 width=14)
                                       ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                             ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
 JIT:
   Functions: 37
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(30 rows)

query 9 run 2
SET
SET
SET
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1630482.83..1630482.83 rows=1 width=90)
   ->  Sort  (cost=1630482.83..1630633.20 rows=60150 width=90)
         Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
         ->  HashAggregate  (cost=1629279.83..1630182.08 rows=60150 width=90)
               Group Key: nation.n_name, EXTRACT(year FROM orders.o_orderdate)
               ->  Hash Join  (cost=886160.95..1576257.63 rows=3029840 width=81)
                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Hash Join  (cost=886159.39..1559379.85 rows=3029840 width=31)
                           Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Seq Scan on orders  (cost=0.00..411269.27 rows=15000127 width=8)
                           ->  Hash  (cost=827574.39..827574.39 rows=3029840 width=31)
                                 ->  Hash Join  (cost=4483.22..827574.39 rows=3029840 width=31)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       ->  Merge Join  (cost=12.22..815149.73 rows=3029840 width=35)
                                             Merge Cond: (lineitem.l_partkey = partsupp.ps_partkey)
                                             Join Filter: (lineitem.l_suppkey = partsupp.ps_suppkey)
                                             ->  Nested Loop  (cost=0.99..407851.91 rows=3029840 width=33)
                                                   ->  Index Only Scan using q20_idx_2 on part  (cost=0.43..64306.24 rows=101010 width=4)
                                                         Filter: ((p_name)::text ~~ '%navy%'::text)
                                                   ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..3.09 rows=31 width=29)
                                                         Index Cond: (l_partkey = part.p_partkey)
                                             ->  Materialize  (cost=0.43..201501.44 rows=7998686 width=14)
                                                   ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.43..181504.72 rows=7998686 width=14)
                                       ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                             ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
 JIT:
   Functions: 37
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(30 rows)

query 9 run 3
SET
SET
SET
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1630482.83..1630482.83 rows=1 width=90)
   ->  Sort  (cost=1630482.83..1630633.20 rows=60150 width=90)
         Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
         ->  HashAggregate  (cost=1629279.83..1630182.08 rows=60150 width=90)
               Group Key: nation.n_name, EXTRACT(year FROM orders.o_orderdate)
               ->  Hash Join  (cost=886160.95..1576257.63 rows=3029840 width=81)
                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Hash Join  (cost=886159.39..1559379.85 rows=3029840 width=31)
                           Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Seq Scan on orders  (cost=0.00..411269.27 rows=15000127 width=8)
                           ->  Hash  (cost=827574.39..827574.39 rows=3029840 width=31)
                                 ->  Hash Join  (cost=4483.22..827574.39 rows=3029840 width=31)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       ->  Merge Join  (cost=12.22..815149.73 rows=3029840 width=35)
                                             Merge Cond: (lineitem.l_partkey = partsupp.ps_partkey)
                                             Join Filter: (lineitem.l_suppkey = partsupp.ps_suppkey)
                                             ->  Nested Loop  (cost=0.99..407851.91 rows=3029840 width=33)
                                                   ->  Index Only Scan using q20_idx_2 on part  (cost=0.43..64306.24 rows=101010 width=4)
                                                         Filter: ((p_name)::text ~~ '%navy%'::text)
                                                   ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..3.09 rows=31 width=29)
                                                         Index Cond: (l_partkey = part.p_partkey)
                                             ->  Materialize  (cost=0.43..201501.44 rows=7998686 width=14)
                                                   ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.43..181504.72 rows=7998686 width=14)
                                       ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                             ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
 JIT:
   Functions: 37
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(30 rows)

query 9 run 4
SET
SET
SET
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1630482.83..1630482.83 rows=1 width=90)
   ->  Sort  (cost=1630482.83..1630633.20 rows=60150 width=90)
         Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
         ->  HashAggregate  (cost=1629279.83..1630182.08 rows=60150 width=90)
               Group Key: nation.n_name, EXTRACT(year FROM orders.o_orderdate)
               ->  Hash Join  (cost=886160.95..1576257.63 rows=3029840 width=81)
                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Hash Join  (cost=886159.39..1559379.85 rows=3029840 width=31)
                           Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Seq Scan on orders  (cost=0.00..411269.27 rows=15000127 width=8)
                           ->  Hash  (cost=827574.39..827574.39 rows=3029840 width=31)
                                 ->  Hash Join  (cost=4483.22..827574.39 rows=3029840 width=31)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       ->  Merge Join  (cost=12.22..815149.73 rows=3029840 width=35)
                                             Merge Cond: (lineitem.l_partkey = partsupp.ps_partkey)
                                             Join Filter: (lineitem.l_suppkey = partsupp.ps_suppkey)
                                             ->  Nested Loop  (cost=0.99..407851.91 rows=3029840 width=33)
                                                   ->  Index Only Scan using q20_idx_2 on part  (cost=0.43..64306.24 rows=101010 width=4)
                                                         Filter: ((p_name)::text ~~ '%navy%'::text)
                                                   ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..3.09 rows=31 width=29)
                                                         Index Cond: (l_partkey = part.p_partkey)
                                             ->  Materialize  (cost=0.43..201501.44 rows=7998686 width=14)
                                                   ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.43..181504.72 rows=7998686 width=14)
                                       ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                             ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
 JIT:
   Functions: 37
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(30 rows)

query 9 run 5
SET
SET
SET
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1630482.83..1630482.83 rows=1 width=90)
   ->  Sort  (cost=1630482.83..1630633.20 rows=60150 width=90)
         Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
         ->  HashAggregate  (cost=1629279.83..1630182.08 rows=60150 width=90)
               Group Key: nation.n_name, EXTRACT(year FROM orders.o_orderdate)
               ->  Hash Join  (cost=886160.95..1576257.63 rows=3029840 width=81)
                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Hash Join  (cost=886159.39..1559379.85 rows=3029840 width=31)
                           Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Seq Scan on orders  (cost=0.00..411269.27 rows=15000127 width=8)
                           ->  Hash  (cost=827574.39..827574.39 rows=3029840 width=31)
                                 ->  Hash Join  (cost=4483.22..827574.39 rows=3029840 width=31)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       ->  Merge Join  (cost=12.22..815149.73 rows=3029840 width=35)
                                             Merge Cond: (lineitem.l_partkey = partsupp.ps_partkey)
                                             Join Filter: (lineitem.l_suppkey = partsupp.ps_suppkey)
                                             ->  Nested Loop  (cost=0.99..407851.91 rows=3029840 width=33)
                                                   ->  Index Only Scan using q20_idx_2 on part  (cost=0.43..64306.24 rows=101010 width=4)
                                                         Filter: ((p_name)::text ~~ '%navy%'::text)
                                                   ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..3.09 rows=31 width=29)
                                                         Index Cond: (l_partkey = part.p_partkey)
                                             ->  Materialize  (cost=0.43..201501.44 rows=7998686 width=14)
                                                   ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.43..181504.72 rows=7998686 width=14)
                                       ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                             ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
 JIT:
   Functions: 37
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(30 rows)

query 10 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1722637.72..1722637.77 rows=20 width=202)
   ->  Sort  (cost=1722637.72..1724127.18 rows=595782 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=1571126.71..1706784.18 rows=595782 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Incremental Sort  (cost=1571126.71..1691889.63 rows=595782 width=182)
                     Sort Key: customer.c_custkey, nation.n_name
                     Presorted Key: customer.c_custkey
                     ->  Nested Loop  (cost=1571126.54..1665079.44 rows=595782 width=182)
                           ->  Merge Join  (cost=1571126.39..1650485.77 rows=595782 width=160)
                                 Merge Cond: (customer.c_custkey = orders.o_custkey)
                                 ->  Index Scan using customer_pkey on customer  (cost=0.43..66679.15 rows=1499915 width=148)
                                 ->  Sort  (cost=1571125.83..1572615.28 rows=595782 width=16)
                                       Sort Key: orders.o_custkey
                                       ->  Hash Join  (cost=284963.76..1513977.15 rows=595782 width=16)
                                             Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                             ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.56..1189944.34 rows=14883658 width=16)
                                                   Index Cond: (l_returnflag = 'R'::bpchar)
                                             ->  Hash  (cost=277457.65..277457.65 rows=600444 width=8)
                                                   ->  Bitmap Heap Scan on orders  (cost=7182.99..277457.65 rows=600444 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..7032.88 rows=600444 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                           ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                                 Cache Key: customer.c_nationkey
                                 Cache Mode: logical
                                 ->  Index Scan using nation_pkey on nation  (cost=0.14..1.16 rows=1 width=30)
                                       Index Cond: (n_nationkey = customer.c_nationkey)
 JIT:
   Functions: 33
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(31 rows)

query 10 run 2
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1722637.72..1722637.77 rows=20 width=202)
   ->  Sort  (cost=1722637.72..1724127.18 rows=595782 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=1571126.71..1706784.18 rows=595782 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Incremental Sort  (cost=1571126.71..1691889.63 rows=595782 width=182)
                     Sort Key: customer.c_custkey, nation.n_name
                     Presorted Key: customer.c_custkey
                     ->  Nested Loop  (cost=1571126.54..1665079.44 rows=595782 width=182)
                           ->  Merge Join  (cost=1571126.39..1650485.77 rows=595782 width=160)
                                 Merge Cond: (customer.c_custkey = orders.o_custkey)
                                 ->  Index Scan using customer_pkey on customer  (cost=0.43..66679.15 rows=1499915 width=148)
                                 ->  Sort  (cost=1571125.83..1572615.28 rows=595782 width=16)
                                       Sort Key: orders.o_custkey
                                       ->  Hash Join  (cost=284963.76..1513977.15 rows=595782 width=16)
                                             Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                             ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.56..1189944.34 rows=14883658 width=16)
                                                   Index Cond: (l_returnflag = 'R'::bpchar)
                                             ->  Hash  (cost=277457.65..277457.65 rows=600444 width=8)
                                                   ->  Bitmap Heap Scan on orders  (cost=7182.99..277457.65 rows=600444 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..7032.88 rows=600444 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                           ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                                 Cache Key: customer.c_nationkey
                                 Cache Mode: logical
                                 ->  Index Scan using nation_pkey on nation  (cost=0.14..1.16 rows=1 width=30)
                                       Index Cond: (n_nationkey = customer.c_nationkey)
 JIT:
   Functions: 33
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(31 rows)

query 10 run 3
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1722637.72..1722637.77 rows=20 width=202)
   ->  Sort  (cost=1722637.72..1724127.18 rows=595782 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=1571126.71..1706784.18 rows=595782 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Incremental Sort  (cost=1571126.71..1691889.63 rows=595782 width=182)
                     Sort Key: customer.c_custkey, nation.n_name
                     Presorted Key: customer.c_custkey
                     ->  Nested Loop  (cost=1571126.54..1665079.44 rows=595782 width=182)
                           ->  Merge Join  (cost=1571126.39..1650485.77 rows=595782 width=160)
                                 Merge Cond: (customer.c_custkey = orders.o_custkey)
                                 ->  Index Scan using customer_pkey on customer  (cost=0.43..66679.15 rows=1499915 width=148)
                                 ->  Sort  (cost=1571125.83..1572615.28 rows=595782 width=16)
                                       Sort Key: orders.o_custkey
                                       ->  Hash Join  (cost=284963.76..1513977.15 rows=595782 width=16)
                                             Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                             ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.56..1189944.34 rows=14883658 width=16)
                                                   Index Cond: (l_returnflag = 'R'::bpchar)
                                             ->  Hash  (cost=277457.65..277457.65 rows=600444 width=8)
                                                   ->  Bitmap Heap Scan on orders  (cost=7182.99..277457.65 rows=600444 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..7032.88 rows=600444 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                           ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                                 Cache Key: customer.c_nationkey
                                 Cache Mode: logical
                                 ->  Index Scan using nation_pkey on nation  (cost=0.14..1.16 rows=1 width=30)
                                       Index Cond: (n_nationkey = customer.c_nationkey)
 JIT:
   Functions: 33
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(31 rows)

query 10 run 4
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1722637.72..1722637.77 rows=20 width=202)
   ->  Sort  (cost=1722637.72..1724127.18 rows=595782 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=1571126.71..1706784.18 rows=595782 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Incremental Sort  (cost=1571126.71..1691889.63 rows=595782 width=182)
                     Sort Key: customer.c_custkey, nation.n_name
                     Presorted Key: customer.c_custkey
                     ->  Nested Loop  (cost=1571126.54..1665079.44 rows=595782 width=182)
                           ->  Merge Join  (cost=1571126.39..1650485.77 rows=595782 width=160)
                                 Merge Cond: (customer.c_custkey = orders.o_custkey)
                                 ->  Index Scan using customer_pkey on customer  (cost=0.43..66679.15 rows=1499915 width=148)
                                 ->  Sort  (cost=1571125.83..1572615.28 rows=595782 width=16)
                                       Sort Key: orders.o_custkey
                                       ->  Hash Join  (cost=284963.76..1513977.15 rows=595782 width=16)
                                             Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                             ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.56..1189944.34 rows=14883658 width=16)
                                                   Index Cond: (l_returnflag = 'R'::bpchar)
                                             ->  Hash  (cost=277457.65..277457.65 rows=600444 width=8)
                                                   ->  Bitmap Heap Scan on orders  (cost=7182.99..277457.65 rows=600444 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..7032.88 rows=600444 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                           ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                                 Cache Key: customer.c_nationkey
                                 Cache Mode: logical
                                 ->  Index Scan using nation_pkey on nation  (cost=0.14..1.16 rows=1 width=30)
                                       Index Cond: (n_nationkey = customer.c_nationkey)
 JIT:
   Functions: 33
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(31 rows)

query 10 run 5
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1722637.72..1722637.77 rows=20 width=202)
   ->  Sort  (cost=1722637.72..1724127.18 rows=595782 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=1571126.71..1706784.18 rows=595782 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Incremental Sort  (cost=1571126.71..1691889.63 rows=595782 width=182)
                     Sort Key: customer.c_custkey, nation.n_name
                     Presorted Key: customer.c_custkey
                     ->  Nested Loop  (cost=1571126.54..1665079.44 rows=595782 width=182)
                           ->  Merge Join  (cost=1571126.39..1650485.77 rows=595782 width=160)
                                 Merge Cond: (customer.c_custkey = orders.o_custkey)
                                 ->  Index Scan using customer_pkey on customer  (cost=0.43..66679.15 rows=1499915 width=148)
                                 ->  Sort  (cost=1571125.83..1572615.28 rows=595782 width=16)
                                       Sort Key: orders.o_custkey
                                       ->  Hash Join  (cost=284963.76..1513977.15 rows=595782 width=16)
                                             Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                             ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.56..1189944.34 rows=14883658 width=16)
                                                   Index Cond: (l_returnflag = 'R'::bpchar)
                                             ->  Hash  (cost=277457.65..277457.65 rows=600444 width=8)
                                                   ->  Bitmap Heap Scan on orders  (cost=7182.99..277457.65 rows=600444 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..7032.88 rows=600444 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                           ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                                 Cache Key: customer.c_nationkey
                                 Cache Mode: logical
                                 ->  Index Scan using nation_pkey on nation  (cost=0.14..1.16 rows=1 width=30)
                                       Index Cond: (n_nationkey = customer.c_nationkey)
 JIT:
   Functions: 33
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(31 rows)

query 11 run 1
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=608177.34..608177.34 rows=1 width=36)
   InitPlan 1
     ->  Aggregate  (cost=293136.31..293136.32 rows=1 width=32)
           ->  Hash Join  (cost=2341.31..290736.71 rows=319947 width=10)
                 Hash Cond: (partsupp_1.ps_suppkey = supplier_1.s_suppkey)
                 ->  Seq Scan on partsupp partsupp_1  (cost=0.00..255208.86 rows=7998686 width=14)
                 ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                       ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                             ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Bitmap Heap Scan on supplier supplier_1  (cost=39.29..2250.00 rows=4000 width=8)
                                   Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                         Index Cond: (s_nationkey = nation_1.n_nationkey)
   ->  Sort  (cost=315041.01..315307.64 rows=106649 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=306584.08..314507.77 rows=106649 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               Planned Partitions: 4
               ->  Hash Join  (cost=2341.31..290736.71 rows=319947 width=14)
                     Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                     ->  Seq Scan on partsupp  (cost=0.00..255208.86 rows=7998686 width=18)
                     ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                           ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                 ->  Bitmap Heap Scan on supplier  (cost=39.29..2250.00 rows=4000 width=8)
                                       Recheck Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
 JIT:
   Functions: 34
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(34 rows)

query 11 run 2
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=608177.34..608177.34 rows=1 width=36)
   InitPlan 1
     ->  Aggregate  (cost=293136.31..293136.32 rows=1 width=32)
           ->  Hash Join  (cost=2341.31..290736.71 rows=319947 width=10)
                 Hash Cond: (partsupp_1.ps_suppkey = supplier_1.s_suppkey)
                 ->  Seq Scan on partsupp partsupp_1  (cost=0.00..255208.86 rows=7998686 width=14)
                 ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                       ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                             ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Bitmap Heap Scan on supplier supplier_1  (cost=39.29..2250.00 rows=4000 width=8)
                                   Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                         Index Cond: (s_nationkey = nation_1.n_nationkey)
   ->  Sort  (cost=315041.01..315307.64 rows=106649 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=306584.08..314507.77 rows=106649 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               Planned Partitions: 4
               ->  Hash Join  (cost=2341.31..290736.71 rows=319947 width=14)
                     Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                     ->  Seq Scan on partsupp  (cost=0.00..255208.86 rows=7998686 width=18)
                     ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                           ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                 ->  Bitmap Heap Scan on supplier  (cost=39.29..2250.00 rows=4000 width=8)
                                       Recheck Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
 JIT:
   Functions: 34
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(34 rows)

query 11 run 3
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=608177.34..608177.34 rows=1 width=36)
   InitPlan 1
     ->  Aggregate  (cost=293136.31..293136.32 rows=1 width=32)
           ->  Hash Join  (cost=2341.31..290736.71 rows=319947 width=10)
                 Hash Cond: (partsupp_1.ps_suppkey = supplier_1.s_suppkey)
                 ->  Seq Scan on partsupp partsupp_1  (cost=0.00..255208.86 rows=7998686 width=14)
                 ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                       ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                             ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Bitmap Heap Scan on supplier supplier_1  (cost=39.29..2250.00 rows=4000 width=8)
                                   Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                         Index Cond: (s_nationkey = nation_1.n_nationkey)
   ->  Sort  (cost=315041.01..315307.64 rows=106649 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=306584.08..314507.77 rows=106649 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               Planned Partitions: 4
               ->  Hash Join  (cost=2341.31..290736.71 rows=319947 width=14)
                     Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                     ->  Seq Scan on partsupp  (cost=0.00..255208.86 rows=7998686 width=18)
                     ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                           ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                 ->  Bitmap Heap Scan on supplier  (cost=39.29..2250.00 rows=4000 width=8)
                                       Recheck Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
 JIT:
   Functions: 34
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(34 rows)

query 11 run 4
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=608177.34..608177.34 rows=1 width=36)
   InitPlan 1
     ->  Aggregate  (cost=293136.31..293136.32 rows=1 width=32)
           ->  Hash Join  (cost=2341.31..290736.71 rows=319947 width=10)
                 Hash Cond: (partsupp_1.ps_suppkey = supplier_1.s_suppkey)
                 ->  Seq Scan on partsupp partsupp_1  (cost=0.00..255208.86 rows=7998686 width=14)
                 ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                       ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                             ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Bitmap Heap Scan on supplier supplier_1  (cost=39.29..2250.00 rows=4000 width=8)
                                   Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                         Index Cond: (s_nationkey = nation_1.n_nationkey)
   ->  Sort  (cost=315041.01..315307.64 rows=106649 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=306584.08..314507.77 rows=106649 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               Planned Partitions: 4
               ->  Hash Join  (cost=2341.31..290736.71 rows=319947 width=14)
                     Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                     ->  Seq Scan on partsupp  (cost=0.00..255208.86 rows=7998686 width=18)
                     ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                           ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                 ->  Bitmap Heap Scan on supplier  (cost=39.29..2250.00 rows=4000 width=8)
                                       Recheck Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
 JIT:
   Functions: 34
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(34 rows)

query 11 run 5
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=608177.34..608177.34 rows=1 width=36)
   InitPlan 1
     ->  Aggregate  (cost=293136.31..293136.32 rows=1 width=32)
           ->  Hash Join  (cost=2341.31..290736.71 rows=319947 width=10)
                 Hash Cond: (partsupp_1.ps_suppkey = supplier_1.s_suppkey)
                 ->  Seq Scan on partsupp partsupp_1  (cost=0.00..255208.86 rows=7998686 width=14)
                 ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                       ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                             ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Bitmap Heap Scan on supplier supplier_1  (cost=39.29..2250.00 rows=4000 width=8)
                                   Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                         Index Cond: (s_nationkey = nation_1.n_nationkey)
   ->  Sort  (cost=315041.01..315307.64 rows=106649 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=306584.08..314507.77 rows=106649 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               Planned Partitions: 4
               ->  Hash Join  (cost=2341.31..290736.71 rows=319947 width=14)
                     Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                     ->  Seq Scan on partsupp  (cost=0.00..255208.86 rows=7998686 width=18)
                     ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                           ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                 ->  Bitmap Heap Scan on supplier  (cost=39.29..2250.00 rows=4000 width=8)
                                       Recheck Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
 JIT:
   Functions: 34
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(34 rows)

query 12 run 1
SET
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=687591.09..687591.09 rows=1 width=27)
   ->  Sort  (cost=687591.09..687591.10 rows=7 width=27)
         Sort Key: lineitem.l_shipmode
         ->  HashAggregate  (cost=687590.98..687591.05 rows=7 width=27)
               Group Key: lineitem.l_shipmode
               ->  Hash Join  (cost=156000.80..682614.65 rows=284362 width=27)
                     Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Seq Scan on orders  (cost=0.00..411269.27 rows=15000127 width=20)
                     ->  Hash  (cost=152446.28..152446.28 rows=284362 width=15)
                           ->  Index Only Scan using q12_idx_1 on lineitem  (cost=0.43..152446.28 rows=284362 width=15)
                                 Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
 JIT:
   Functions: 14
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(14 rows)

query 12 run 2
SET
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=687591.09..687591.09 rows=1 width=27)
   ->  Sort  (cost=687591.09..687591.10 rows=7 width=27)
         Sort Key: lineitem.l_shipmode
         ->  HashAggregate  (cost=687590.98..687591.05 rows=7 width=27)
               Group Key: lineitem.l_shipmode
               ->  Hash Join  (cost=156000.80..682614.65 rows=284362 width=27)
                     Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Seq Scan on orders  (cost=0.00..411269.27 rows=15000127 width=20)
                     ->  Hash  (cost=152446.28..152446.28 rows=284362 width=15)
                           ->  Index Only Scan using q12_idx_1 on lineitem  (cost=0.43..152446.28 rows=284362 width=15)
                                 Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
 JIT:
   Functions: 14
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(14 rows)

query 12 run 3
SET
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=687591.09..687591.09 rows=1 width=27)
   ->  Sort  (cost=687591.09..687591.10 rows=7 width=27)
         Sort Key: lineitem.l_shipmode
         ->  HashAggregate  (cost=687590.98..687591.05 rows=7 width=27)
               Group Key: lineitem.l_shipmode
               ->  Hash Join  (cost=156000.80..682614.65 rows=284362 width=27)
                     Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Seq Scan on orders  (cost=0.00..411269.27 rows=15000127 width=20)
                     ->  Hash  (cost=152446.28..152446.28 rows=284362 width=15)
                           ->  Index Only Scan using q12_idx_1 on lineitem  (cost=0.43..152446.28 rows=284362 width=15)
                                 Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
 JIT:
   Functions: 14
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(14 rows)

query 12 run 4
SET
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=687591.09..687591.09 rows=1 width=27)
   ->  Sort  (cost=687591.09..687591.10 rows=7 width=27)
         Sort Key: lineitem.l_shipmode
         ->  HashAggregate  (cost=687590.98..687591.05 rows=7 width=27)
               Group Key: lineitem.l_shipmode
               ->  Hash Join  (cost=156000.80..682614.65 rows=284362 width=27)
                     Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Seq Scan on orders  (cost=0.00..411269.27 rows=15000127 width=20)
                     ->  Hash  (cost=152446.28..152446.28 rows=284362 width=15)
                           ->  Index Only Scan using q12_idx_1 on lineitem  (cost=0.43..152446.28 rows=284362 width=15)
                                 Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
 JIT:
   Functions: 14
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(14 rows)

query 12 run 5
SET
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=687591.09..687591.09 rows=1 width=27)
   ->  Sort  (cost=687591.09..687591.10 rows=7 width=27)
         Sort Key: lineitem.l_shipmode
         ->  HashAggregate  (cost=687590.98..687591.05 rows=7 width=27)
               Group Key: lineitem.l_shipmode
               ->  Hash Join  (cost=156000.80..682614.65 rows=284362 width=27)
                     Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Seq Scan on orders  (cost=0.00..411269.27 rows=15000127 width=20)
                     ->  Hash  (cost=152446.28..152446.28 rows=284362 width=15)
                           ->  Index Only Scan using q12_idx_1 on lineitem  (cost=0.43..152446.28 rows=284362 width=15)
                                 Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
 JIT:
   Functions: 14
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(14 rows)

query 13 run 1
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1412763.03..1412763.03 rows=1 width=16)
   ->  Sort  (cost=1412763.03..1412763.53 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1412760.03..1412762.03 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=1260441.10..1390261.30 rows=1499915 width=12)
                     Group Key: customer.c_custkey
                     Planned Partitions: 4
                     ->  Hash Right Join  (cost=55340.09..663371.66 rows=14697094 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..448769.59 rows=14697094 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=30731.15..30731.15 rows=1499915 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.43..30731.15 rows=1499915 width=4)
 JIT:
   Functions: 15
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(17 rows)

query 13 run 2
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1412763.03..1412763.03 rows=1 width=16)
   ->  Sort  (cost=1412763.03..1412763.53 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1412760.03..1412762.03 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=1260441.10..1390261.30 rows=1499915 width=12)
                     Group Key: customer.c_custkey
                     Planned Partitions: 4
                     ->  Hash Right Join  (cost=55340.09..663371.66 rows=14697094 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..448769.59 rows=14697094 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=30731.15..30731.15 rows=1499915 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.43..30731.15 rows=1499915 width=4)
 JIT:
   Functions: 15
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(17 rows)

query 13 run 3
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1412763.03..1412763.03 rows=1 width=16)
   ->  Sort  (cost=1412763.03..1412763.53 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1412760.03..1412762.03 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=1260441.10..1390261.30 rows=1499915 width=12)
                     Group Key: customer.c_custkey
                     Planned Partitions: 4
                     ->  Hash Right Join  (cost=55340.09..663371.66 rows=14697094 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..448769.59 rows=14697094 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=30731.15..30731.15 rows=1499915 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.43..30731.15 rows=1499915 width=4)
 JIT:
   Functions: 15
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(17 rows)

query 13 run 4
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1412763.03..1412763.03 rows=1 width=16)
   ->  Sort  (cost=1412763.03..1412763.53 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1412760.03..1412762.03 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=1260441.10..1390261.30 rows=1499915 width=12)
                     Group Key: customer.c_custkey
                     Planned Partitions: 4
                     ->  Hash Right Join  (cost=55340.09..663371.66 rows=14697094 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..448769.59 rows=14697094 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=30731.15..30731.15 rows=1499915 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.43..30731.15 rows=1499915 width=4)
 JIT:
   Functions: 15
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(17 rows)

query 13 run 5
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1412763.03..1412763.03 rows=1 width=16)
   ->  Sort  (cost=1412763.03..1412763.53 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1412760.03..1412762.03 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=1260441.10..1390261.30 rows=1499915 width=12)
                     Group Key: customer.c_custkey
                     Planned Partitions: 4
                     ->  Hash Right Join  (cost=55340.09..663371.66 rows=14697094 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..448769.59 rows=14697094 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=30731.15..30731.15 rows=1499915 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.43..30731.15 rows=1499915 width=4)
 JIT:
   Functions: 15
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(17 rows)

query 14 run 1
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1300303.45..1300303.47 rows=1 width=32)
   ->  Aggregate  (cost=1300303.45..1300303.47 rows=1 width=32)
         ->  Merge Join  (cost=69.98..1285650.98 rows=837284 width=33)
               Merge Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Index Only Scan using q14_idx_1 on lineitem  (cost=0.56..1201357.01 rows=837284 width=16)
                     Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..68832.26 rows=1999989 width=25)
 JIT:
   Functions: 7
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(10 rows)

query 14 run 2
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1300303.45..1300303.47 rows=1 width=32)
   ->  Aggregate  (cost=1300303.45..1300303.47 rows=1 width=32)
         ->  Merge Join  (cost=69.98..1285650.98 rows=837284 width=33)
               Merge Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Index Only Scan using q14_idx_1 on lineitem  (cost=0.56..1201357.01 rows=837284 width=16)
                     Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..68832.26 rows=1999989 width=25)
 JIT:
   Functions: 7
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(10 rows)

query 14 run 3
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1300303.45..1300303.47 rows=1 width=32)
   ->  Aggregate  (cost=1300303.45..1300303.47 rows=1 width=32)
         ->  Merge Join  (cost=69.98..1285650.98 rows=837284 width=33)
               Merge Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Index Only Scan using q14_idx_1 on lineitem  (cost=0.56..1201357.01 rows=837284 width=16)
                     Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..68832.26 rows=1999989 width=25)
 JIT:
   Functions: 7
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(10 rows)

query 14 run 4
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1300303.45..1300303.47 rows=1 width=32)
   ->  Aggregate  (cost=1300303.45..1300303.47 rows=1 width=32)
         ->  Merge Join  (cost=69.98..1285650.98 rows=837284 width=33)
               Merge Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Index Only Scan using q14_idx_1 on lineitem  (cost=0.56..1201357.01 rows=837284 width=16)
                     Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..68832.26 rows=1999989 width=25)
 JIT:
   Functions: 7
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(10 rows)

query 14 run 5
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1300303.45..1300303.47 rows=1 width=32)
   ->  Aggregate  (cost=1300303.45..1300303.47 rows=1 width=32)
         ->  Merge Join  (cost=69.98..1285650.98 rows=837284 width=33)
               Merge Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Index Only Scan using q14_idx_1 on lineitem  (cost=0.56..1201357.01 rows=837284 width=16)
                     Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..68832.26 rows=1999989 width=25)
 JIT:
   Functions: 7
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(10 rows)

query 15 run 1
SET
SET
SET
CREATE VIEW
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3766228.05..3766237.36 rows=1 width=103)
   InitPlan 1
     ->  Aggregate  (cost=1883587.62..1883587.63 rows=1 width=32)
           ->  HashAggregate  (cost=1881152.37..1882370.00 rows=97410 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=39978.55..1858894.82 rows=2225755 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..39422.12 rows=2225755 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=1882640.42..1887171.73 rows=487 width=103)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..4274.29 rows=100000 width=71)
         ->  Sort  (cost=1882640.13..1882641.35 rows=487 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=1881152.37..1882618.39 rows=487 width=36)
                     ->  HashAggregate  (cost=1881152.37..1882613.52 rows=487 width=36)
                           Group Key: lineitem.l_suppkey
                           Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
                           ->  Bitmap Heap Scan on lineitem  (cost=39978.55..1858894.82 rows=2225755 width=16)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..39422.12 rows=2225755 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
 JIT:
   Functions: 24
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(25 rows)

DROP VIEW
query 15 run 2
SET
SET
SET
CREATE VIEW
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3766228.05..3766237.36 rows=1 width=103)
   InitPlan 1
     ->  Aggregate  (cost=1883587.62..1883587.63 rows=1 width=32)
           ->  HashAggregate  (cost=1881152.37..1882370.00 rows=97410 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=39978.55..1858894.82 rows=2225755 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..39422.12 rows=2225755 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=1882640.42..1887171.73 rows=487 width=103)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..4274.29 rows=100000 width=71)
         ->  Sort  (cost=1882640.13..1882641.35 rows=487 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=1881152.37..1882618.39 rows=487 width=36)
                     ->  HashAggregate  (cost=1881152.37..1882613.52 rows=487 width=36)
                           Group Key: lineitem.l_suppkey
                           Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
                           ->  Bitmap Heap Scan on lineitem  (cost=39978.55..1858894.82 rows=2225755 width=16)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..39422.12 rows=2225755 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
 JIT:
   Functions: 24
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(25 rows)

DROP VIEW
query 15 run 3
SET
SET
SET
CREATE VIEW
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3766228.05..3766237.36 rows=1 width=103)
   InitPlan 1
     ->  Aggregate  (cost=1883587.62..1883587.63 rows=1 width=32)
           ->  HashAggregate  (cost=1881152.37..1882370.00 rows=97410 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=39978.55..1858894.82 rows=2225755 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..39422.12 rows=2225755 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=1882640.42..1887171.73 rows=487 width=103)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..4274.29 rows=100000 width=71)
         ->  Sort  (cost=1882640.13..1882641.35 rows=487 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=1881152.37..1882618.39 rows=487 width=36)
                     ->  HashAggregate  (cost=1881152.37..1882613.52 rows=487 width=36)
                           Group Key: lineitem.l_suppkey
                           Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
                           ->  Bitmap Heap Scan on lineitem  (cost=39978.55..1858894.82 rows=2225755 width=16)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..39422.12 rows=2225755 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
 JIT:
   Functions: 24
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(25 rows)

DROP VIEW
query 15 run 4
SET
SET
SET
CREATE VIEW
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3766228.05..3766237.36 rows=1 width=103)
   InitPlan 1
     ->  Aggregate  (cost=1883587.62..1883587.63 rows=1 width=32)
           ->  HashAggregate  (cost=1881152.37..1882370.00 rows=97410 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=39978.55..1858894.82 rows=2225755 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..39422.12 rows=2225755 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=1882640.42..1887171.73 rows=487 width=103)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..4274.29 rows=100000 width=71)
         ->  Sort  (cost=1882640.13..1882641.35 rows=487 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=1881152.37..1882618.39 rows=487 width=36)
                     ->  HashAggregate  (cost=1881152.37..1882613.52 rows=487 width=36)
                           Group Key: lineitem.l_suppkey
                           Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
                           ->  Bitmap Heap Scan on lineitem  (cost=39978.55..1858894.82 rows=2225755 width=16)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..39422.12 rows=2225755 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
 JIT:
   Functions: 24
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(25 rows)

DROP VIEW
query 15 run 5
SET
SET
SET
CREATE VIEW
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3766228.05..3766237.36 rows=1 width=103)
   InitPlan 1
     ->  Aggregate  (cost=1883587.62..1883587.63 rows=1 width=32)
           ->  HashAggregate  (cost=1881152.37..1882370.00 rows=97410 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=39978.55..1858894.82 rows=2225755 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..39422.12 rows=2225755 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=1882640.42..1887171.73 rows=487 width=103)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..4274.29 rows=100000 width=71)
         ->  Sort  (cost=1882640.13..1882641.35 rows=487 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=1881152.37..1882618.39 rows=487 width=36)
                     ->  HashAggregate  (cost=1881152.37..1882613.52 rows=487 width=36)
                           Group Key: lineitem.l_suppkey
                           Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
                           ->  Bitmap Heap Scan on lineitem  (cost=39978.55..1858894.82 rows=2225755 width=16)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..39422.12 rows=2225755 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
 JIT:
   Functions: 24
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(25 rows)

DROP VIEW
query 16 run 1
SET
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=371834.14..371834.14 rows=1 width=44)
   ->  Sort  (cost=371834.14..372220.40 rows=154502 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=362002.70..371061.63 rows=154502 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=362002.70..363505.48 rows=601113 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                     ->  Hash Join  (cost=98212.23..292561.54 rows=601113 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=3473.96..187324.96 rows=3999343 width=8)
                                 Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=1010 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=90980.73..90980.73 rows=300604 width=40)
                                 ->  Seq Scan on part  (cost=0.00..90980.73 rows=300604 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
 JIT:
   Functions: 26
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(20 rows)

query 16 run 2
SET
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=371834.14..371834.14 rows=1 width=44)
   ->  Sort  (cost=371834.14..372220.40 rows=154502 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=362002.70..371061.63 rows=154502 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=362002.70..363505.48 rows=601113 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                     ->  Hash Join  (cost=98212.23..292561.54 rows=601113 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=3473.96..187324.96 rows=3999343 width=8)
                                 Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=1010 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=90980.73..90980.73 rows=300604 width=40)
                                 ->  Seq Scan on part  (cost=0.00..90980.73 rows=300604 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
 JIT:
   Functions: 26
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(20 rows)

query 16 run 3
SET
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=371834.14..371834.14 rows=1 width=44)
   ->  Sort  (cost=371834.14..372220.40 rows=154502 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=362002.70..371061.63 rows=154502 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=362002.70..363505.48 rows=601113 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                     ->  Hash Join  (cost=98212.23..292561.54 rows=601113 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=3473.96..187324.96 rows=3999343 width=8)
                                 Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=1010 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=90980.73..90980.73 rows=300604 width=40)
                                 ->  Seq Scan on part  (cost=0.00..90980.73 rows=300604 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
 JIT:
   Functions: 26
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(20 rows)

query 16 run 4
SET
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=371834.14..371834.14 rows=1 width=44)
   ->  Sort  (cost=371834.14..372220.40 rows=154502 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=362002.70..371061.63 rows=154502 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=362002.70..363505.48 rows=601113 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                     ->  Hash Join  (cost=98212.23..292561.54 rows=601113 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=3473.96..187324.96 rows=3999343 width=8)
                                 Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=1010 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=90980.73..90980.73 rows=300604 width=40)
                                 ->  Seq Scan on part  (cost=0.00..90980.73 rows=300604 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
 JIT:
   Functions: 26
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(20 rows)

query 16 run 5
SET
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=371834.14..371834.14 rows=1 width=44)
   ->  Sort  (cost=371834.14..372220.40 rows=154502 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=362002.70..371061.63 rows=154502 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=362002.70..363505.48 rows=601113 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                     ->  Hash Join  (cost=98212.23..292561.54 rows=601113 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=3473.96..187324.96 rows=3999343 width=8)
                                 Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=1010 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=90980.73..90980.73 rows=300604 width=40)
                                 ->  Seq Scan on part  (cost=0.00..90980.73 rows=300604 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
 JIT:
   Functions: 26
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(20 rows)

query 17 run 1
SET
SET
SET
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1773126.79..1773126.81 rows=1 width=32)
   ->  Aggregate  (cost=1773126.79..1773126.81 rows=1 width=32)
         ->  Nested Loop  (cost=71093.36..1773077.55 rows=19698 width=8)
               Join Filter: (part.p_partkey = lineitem.l_partkey)
               ->  Merge Join  (cost=71092.80..1767012.73 rows=1970 width=40)
                     Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                     ->  Sort  (cost=71092.23..71097.30 rows=2028 width=4)
                           Sort Key: part.p_partkey
                           ->  Seq Scan on part  (cost=0.00..70980.83 rows=2028 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                     ->  GroupAggregate  (cost=0.56..1691033.38 rows=1942908 width=36)
                           Group Key: lineitem_1.l_partkey
                           ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.56..1361936.96 rows=59990560 width=9)
               ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..2.95 rows=10 width=17)
                     Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
 JIT:
   Functions: 18
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(18 rows)

query 17 run 2
SET
SET
SET
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1773126.79..1773126.81 rows=1 width=32)
   ->  Aggregate  (cost=1773126.79..1773126.81 rows=1 width=32)
         ->  Nested Loop  (cost=71093.36..1773077.55 rows=19698 width=8)
               Join Filter: (part.p_partkey = lineitem.l_partkey)
               ->  Merge Join  (cost=71092.80..1767012.73 rows=1970 width=40)
                     Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                     ->  Sort  (cost=71092.23..71097.30 rows=2028 width=4)
                           Sort Key: part.p_partkey
                           ->  Seq Scan on part  (cost=0.00..70980.83 rows=2028 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                     ->  GroupAggregate  (cost=0.56..1691033.38 rows=1942908 width=36)
                           Group Key: lineitem_1.l_partkey
                           ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.56..1361936.96 rows=59990560 width=9)
               ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..2.95 rows=10 width=17)
                     Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
 JIT:
   Functions: 18
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(18 rows)

query 17 run 3
SET
SET
SET
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1773126.79..1773126.81 rows=1 width=32)
   ->  Aggregate  (cost=1773126.79..1773126.81 rows=1 width=32)
         ->  Nested Loop  (cost=71093.36..1773077.55 rows=19698 width=8)
               Join Filter: (part.p_partkey = lineitem.l_partkey)
               ->  Merge Join  (cost=71092.80..1767012.73 rows=1970 width=40)
                     Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                     ->  Sort  (cost=71092.23..71097.30 rows=2028 width=4)
                           Sort Key: part.p_partkey
                           ->  Seq Scan on part  (cost=0.00..70980.83 rows=2028 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                     ->  GroupAggregate  (cost=0.56..1691033.38 rows=1942908 width=36)
                           Group Key: lineitem_1.l_partkey
                           ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.56..1361936.96 rows=59990560 width=9)
               ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..2.95 rows=10 width=17)
                     Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
 JIT:
   Functions: 18
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(18 rows)

query 17 run 4
SET
SET
SET
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1773126.79..1773126.81 rows=1 width=32)
   ->  Aggregate  (cost=1773126.79..1773126.81 rows=1 width=32)
         ->  Nested Loop  (cost=71093.36..1773077.55 rows=19698 width=8)
               Join Filter: (part.p_partkey = lineitem.l_partkey)
               ->  Merge Join  (cost=71092.80..1767012.73 rows=1970 width=40)
                     Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                     ->  Sort  (cost=71092.23..71097.30 rows=2028 width=4)
                           Sort Key: part.p_partkey
                           ->  Seq Scan on part  (cost=0.00..70980.83 rows=2028 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                     ->  GroupAggregate  (cost=0.56..1691033.38 rows=1942908 width=36)
                           Group Key: lineitem_1.l_partkey
                           ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.56..1361936.96 rows=59990560 width=9)
               ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..2.95 rows=10 width=17)
                     Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
 JIT:
   Functions: 18
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(18 rows)

query 17 run 5
SET
SET
SET
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1773126.79..1773126.81 rows=1 width=32)
   ->  Aggregate  (cost=1773126.79..1773126.81 rows=1 width=32)
         ->  Nested Loop  (cost=71093.36..1773077.55 rows=19698 width=8)
               Join Filter: (part.p_partkey = lineitem.l_partkey)
               ->  Merge Join  (cost=71092.80..1767012.73 rows=1970 width=40)
                     Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                     ->  Sort  (cost=71092.23..71097.30 rows=2028 width=4)
                           Sort Key: part.p_partkey
                           ->  Seq Scan on part  (cost=0.00..70980.83 rows=2028 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                     ->  GroupAggregate  (cost=0.56..1691033.38 rows=1942908 width=36)
                           Group Key: lineitem_1.l_partkey
                           ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.56..1361936.96 rows=59990560 width=9)
               ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..2.95 rows=10 width=17)
                     Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
 JIT:
   Functions: 18
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(18 rows)

query 18 run 1
SET
SET
SET
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=7005573.36..7005573.61 rows=100 width=71)
   ->  Sort  (cost=7005573.36..7055557.20 rows=19993537 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=3380454.92..6241434.75 rows=19993537 width=71)
               Group Key: orders.o_orderkey, customer.c_custkey
               ->  Incremental Sort  (cost=3380454.92..5841564.01 rows=19993537 width=44)
                     Sort Key: orders.o_orderkey, customer.c_custkey
                     Presorted Key: orders.o_orderkey
                     ->  Merge Join  (cost=3380454.79..5116624.20 rows=19993537 width=44)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Sort  (cost=3380181.91..3392679.95 rows=4999213 width=43)
                                 Sort Key: orders.o_orderkey
                                 ->  Hash Join  (cost=78485.09..2714090.24 rows=4999213 width=43)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Merge Join  (cost=1.00..2555108.19 rows=4999213 width=24)
                                             Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                             ->  Index Scan using orders_pkey on orders  (cost=0.43..568533.34 rows=15000127 width=20)
                                             ->  GroupAggregate  (cost=0.56..1886584.36 rows=4999213 width=4)
                                                   Group Key: lineitem_1.l_orderkey
                                                   Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                   ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.56..1361666.96 rows=59990560 width=9)
                                       ->  Hash  (cost=50946.15..50946.15 rows=1499915 width=23)
                                             ->  Seq Scan on customer  (cost=0.00..50946.15 rows=1499915 width=23)
                           ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.56..1361666.96 rows=59990560 width=9)
 JIT:
   Functions: 28
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(27 rows)

query 18 run 2
SET
SET
SET
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=7005573.36..7005573.61 rows=100 width=71)
   ->  Sort  (cost=7005573.36..7055557.20 rows=19993537 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=3380454.92..6241434.75 rows=19993537 width=71)
               Group Key: orders.o_orderkey, customer.c_custkey
               ->  Incremental Sort  (cost=3380454.92..5841564.01 rows=19993537 width=44)
                     Sort Key: orders.o_orderkey, customer.c_custkey
                     Presorted Key: orders.o_orderkey
                     ->  Merge Join  (cost=3380454.79..5116624.20 rows=19993537 width=44)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Sort  (cost=3380181.91..3392679.95 rows=4999213 width=43)
                                 Sort Key: orders.o_orderkey
                                 ->  Hash Join  (cost=78485.09..2714090.24 rows=4999213 width=43)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Merge Join  (cost=1.00..2555108.19 rows=4999213 width=24)
                                             Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                             ->  Index Scan using orders_pkey on orders  (cost=0.43..568533.34 rows=15000127 width=20)
                                             ->  GroupAggregate  (cost=0.56..1886584.36 rows=4999213 width=4)
                                                   Group Key: lineitem_1.l_orderkey
                                                   Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                   ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.56..1361666.96 rows=59990560 width=9)
                                       ->  Hash  (cost=50946.15..50946.15 rows=1499915 width=23)
                                             ->  Seq Scan on customer  (cost=0.00..50946.15 rows=1499915 width=23)
                           ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.56..1361666.96 rows=59990560 width=9)
 JIT:
   Functions: 28
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(27 rows)

query 18 run 3
SET
SET
SET
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=7005573.36..7005573.61 rows=100 width=71)
   ->  Sort  (cost=7005573.36..7055557.20 rows=19993537 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=3380454.92..6241434.75 rows=19993537 width=71)
               Group Key: orders.o_orderkey, customer.c_custkey
               ->  Incremental Sort  (cost=3380454.92..5841564.01 rows=19993537 width=44)
                     Sort Key: orders.o_orderkey, customer.c_custkey
                     Presorted Key: orders.o_orderkey
                     ->  Merge Join  (cost=3380454.79..5116624.20 rows=19993537 width=44)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Sort  (cost=3380181.91..3392679.95 rows=4999213 width=43)
                                 Sort Key: orders.o_orderkey
                                 ->  Hash Join  (cost=78485.09..2714090.24 rows=4999213 width=43)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Merge Join  (cost=1.00..2555108.19 rows=4999213 width=24)
                                             Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                             ->  Index Scan using orders_pkey on orders  (cost=0.43..568533.34 rows=15000127 width=20)
                                             ->  GroupAggregate  (cost=0.56..1886584.36 rows=4999213 width=4)
                                                   Group Key: lineitem_1.l_orderkey
                                                   Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                   ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.56..1361666.96 rows=59990560 width=9)
                                       ->  Hash  (cost=50946.15..50946.15 rows=1499915 width=23)
                                             ->  Seq Scan on customer  (cost=0.00..50946.15 rows=1499915 width=23)
                           ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.56..1361666.96 rows=59990560 width=9)
 JIT:
   Functions: 28
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(27 rows)

query 18 run 4
SET
SET
SET
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=7005573.36..7005573.61 rows=100 width=71)
   ->  Sort  (cost=7005573.36..7055557.20 rows=19993537 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=3380454.92..6241434.75 rows=19993537 width=71)
               Group Key: orders.o_orderkey, customer.c_custkey
               ->  Incremental Sort  (cost=3380454.92..5841564.01 rows=19993537 width=44)
                     Sort Key: orders.o_orderkey, customer.c_custkey
                     Presorted Key: orders.o_orderkey
                     ->  Merge Join  (cost=3380454.79..5116624.20 rows=19993537 width=44)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Sort  (cost=3380181.91..3392679.95 rows=4999213 width=43)
                                 Sort Key: orders.o_orderkey
                                 ->  Hash Join  (cost=78485.09..2714090.24 rows=4999213 width=43)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Merge Join  (cost=1.00..2555108.19 rows=4999213 width=24)
                                             Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                             ->  Index Scan using orders_pkey on orders  (cost=0.43..568533.34 rows=15000127 width=20)
                                             ->  GroupAggregate  (cost=0.56..1886584.36 rows=4999213 width=4)
                                                   Group Key: lineitem_1.l_orderkey
                                                   Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                   ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.56..1361666.96 rows=59990560 width=9)
                                       ->  Hash  (cost=50946.15..50946.15 rows=1499915 width=23)
                                             ->  Seq Scan on customer  (cost=0.00..50946.15 rows=1499915 width=23)
                           ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.56..1361666.96 rows=59990560 width=9)
 JIT:
   Functions: 28
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(27 rows)

query 18 run 5
SET
SET
SET
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=7005573.36..7005573.61 rows=100 width=71)
   ->  Sort  (cost=7005573.36..7055557.20 rows=19993537 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=3380454.92..6241434.75 rows=19993537 width=71)
               Group Key: orders.o_orderkey, customer.c_custkey
               ->  Incremental Sort  (cost=3380454.92..5841564.01 rows=19993537 width=44)
                     Sort Key: orders.o_orderkey, customer.c_custkey
                     Presorted Key: orders.o_orderkey
                     ->  Merge Join  (cost=3380454.79..5116624.20 rows=19993537 width=44)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Sort  (cost=3380181.91..3392679.95 rows=4999213 width=43)
                                 Sort Key: orders.o_orderkey
                                 ->  Hash Join  (cost=78485.09..2714090.24 rows=4999213 width=43)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Merge Join  (cost=1.00..2555108.19 rows=4999213 width=24)
                                             Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                             ->  Index Scan using orders_pkey on orders  (cost=0.43..568533.34 rows=15000127 width=20)
                                             ->  GroupAggregate  (cost=0.56..1886584.36 rows=4999213 width=4)
                                                   Group Key: lineitem_1.l_orderkey
                                                   Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                   ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.56..1361666.96 rows=59990560 width=9)
                                       ->  Hash  (cost=50946.15..50946.15 rows=1499915 width=23)
                                             ->  Seq Scan on customer  (cost=0.00..50946.15 rows=1499915 width=23)
                           ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.56..1361666.96 rows=59990560 width=9)
 JIT:
   Functions: 28
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(27 rows)

query 19 run 1
SET
SET
SET


 Limit  (cost=150693.44..150693.45 rows=1 width=32)
   ->  Aggregate  (cost=150693.44..150693.45 rows=1 width=32)
         ->  Nested Loop  (cost=0.56..150684.90 rows=1138 width=12)
               ->  Seq Scan on part  (cost=0.00..125980.53 rows=4742 width=30)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
               ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..5.20 rows=1 width=21)
                     Index Cond: ((l_partkey = part.p_partkey) AND (l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                     Filter: ((((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
 JIT:
   Functions: 8
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(11 rows)

query 19 run 2
SET
SET
SET
                                                                                                                                                                                                                                                                                                                                                                                                                                                        QUERY PLAN                                                                                                                                                                                                                                                                                                                                                                                                                                                        

 Limit  (cost=150693.44..150693.45 rows=1 width=32)
   ->  Aggregate  (cost=150693.44..150693.45 rows=1 width=32)
         ->  Nested Loop  (cost=0.56..150684.90 rows=1138 width=12)
               ->  Seq Scan on part  (cost=0.00..125980.53 rows=4742 width=30)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
               ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..5.20 rows=1 width=21)
                     Index Cond: ((l_partkey = part.p_partkey) AND (l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                     Filter: ((((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
 JIT:
   Functions: 8
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(11 rows)

query 19 run 3
SET
SET
SET


 Limit  (cost=150693.44..150693.45 rows=1 width=32)
   ->  Aggregate  (cost=150693.44..150693.45 rows=1 width=32)
         ->  Nested Loop  (cost=0.56..150684.90 rows=1138 width=12)
               ->  Seq Scan on part  (cost=0.00..125980.53 rows=4742 width=30)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
               ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..5.20 rows=1 width=21)
                     Index Cond: ((l_partkey = part.p_partkey) AND (l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                     Filter: ((((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
 JIT:
   Functions: 8
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(11 rows)

query 19 run 4
SET
SET
SET


 Limit  (cost=150693.44..150693.45 rows=1 width=32)
   ->  Aggregate  (cost=150693.44..150693.45 rows=1 width=32)
         ->  Nested Loop  (cost=0.56..150684.90 rows=1138 width=12)
               ->  Seq Scan on part  (cost=0.00..125980.53 rows=4742 width=30)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
               ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..5.20 rows=1 width=21)
                     Index Cond: ((l_partkey = part.p_partkey) AND (l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                     Filter: ((((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
 JIT:
   Functions: 8
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(11 rows)

query 19 run 5
SET
SET
SET


 Limit  (cost=150693.44..150693.45 rows=1 width=32)
   ->  Aggregate  (cost=150693.44..150693.45 rows=1 width=32)
         ->  Nested Loop  (cost=0.56..150684.90 rows=1138 width=12)
               ->  Seq Scan on part  (cost=0.00..125980.53 rows=4742 width=30)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
               ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..5.20 rows=1 width=21)
                     Index Cond: ((l_partkey = part.p_partkey) AND (l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                     Filter: ((((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
 JIT:
   Functions: 8
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(11 rows)

query 20 run 1
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2780897.01..2780897.02 rows=1 width=51)
   ->  Sort  (cost=2780897.01..2780897.02 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=2577784.44..2780897.00 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..4472.31 rows=4000 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=59)
               ->  Materialize  (cost=2577784.44..2776244.70 rows=3 width=8)
                     ->  Hash Join  (cost=2577784.44..2776244.68 rows=3 width=8)
                           Hash Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                           Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                           ->  HashAggregate  (cost=2455087.37..2617161.96 rows=4851402 width=40)
                                 Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                 Planned Partitions: 32
                                 ->  Seq Scan on lineitem  (cost=0.00..2025001.40 rows=9144685 width=13)
                                       Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Hash  (cost=121485.15..121485.15 rows=80795 width=16)
                                 ->  Nested Loop  (cost=0.86..121485.15 rows=80795 width=16)
                                       ->  Index Only Scan using q20_idx_2 on part  (cost=0.43..64306.24 rows=20202 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.43..2.64 rows=19 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
 JIT:
   Functions: 28
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(28 rows)

query 20 run 2
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2780897.01..2780897.02 rows=1 width=51)
   ->  Sort  (cost=2780897.01..2780897.02 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=2577784.44..2780897.00 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..4472.31 rows=4000 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=59)
               ->  Materialize  (cost=2577784.44..2776244.70 rows=3 width=8)
                     ->  Hash Join  (cost=2577784.44..2776244.68 rows=3 width=8)
                           Hash Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                           Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                           ->  HashAggregate  (cost=2455087.37..2617161.96 rows=4851402 width=40)
                                 Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                 Planned Partitions: 32
                                 ->  Seq Scan on lineitem  (cost=0.00..2025001.40 rows=9144685 width=13)
                                       Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Hash  (cost=121485.15..121485.15 rows=80795 width=16)
                                 ->  Nested Loop  (cost=0.86..121485.15 rows=80795 width=16)
                                       ->  Index Only Scan using q20_idx_2 on part  (cost=0.43..64306.24 rows=20202 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.43..2.64 rows=19 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
 JIT:
   Functions: 28
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(28 rows)

query 20 run 3
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2780897.01..2780897.02 rows=1 width=51)
   ->  Sort  (cost=2780897.01..2780897.02 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=2577784.44..2780897.00 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..4472.31 rows=4000 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=59)
               ->  Materialize  (cost=2577784.44..2776244.70 rows=3 width=8)
                     ->  Hash Join  (cost=2577784.44..2776244.68 rows=3 width=8)
                           Hash Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                           Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                           ->  HashAggregate  (cost=2455087.37..2617161.96 rows=4851402 width=40)
                                 Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                 Planned Partitions: 32
                                 ->  Seq Scan on lineitem  (cost=0.00..2025001.40 rows=9144685 width=13)
                                       Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Hash  (cost=121485.15..121485.15 rows=80795 width=16)
                                 ->  Nested Loop  (cost=0.86..121485.15 rows=80795 width=16)
                                       ->  Index Only Scan using q20_idx_2 on part  (cost=0.43..64306.24 rows=20202 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.43..2.64 rows=19 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
 JIT:
   Functions: 28
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(28 rows)

query 20 run 4
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2780897.01..2780897.02 rows=1 width=51)
   ->  Sort  (cost=2780897.01..2780897.02 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=2577784.44..2780897.00 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..4472.31 rows=4000 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=59)
               ->  Materialize  (cost=2577784.44..2776244.70 rows=3 width=8)
                     ->  Hash Join  (cost=2577784.44..2776244.68 rows=3 width=8)
                           Hash Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                           Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                           ->  HashAggregate  (cost=2455087.37..2617161.96 rows=4851402 width=40)
                                 Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                 Planned Partitions: 32
                                 ->  Seq Scan on lineitem  (cost=0.00..2025001.40 rows=9144685 width=13)
                                       Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Hash  (cost=121485.15..121485.15 rows=80795 width=16)
                                 ->  Nested Loop  (cost=0.86..121485.15 rows=80795 width=16)
                                       ->  Index Only Scan using q20_idx_2 on part  (cost=0.43..64306.24 rows=20202 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.43..2.64 rows=19 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
 JIT:
   Functions: 28
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(28 rows)

query 20 run 5
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2780897.01..2780897.02 rows=1 width=51)
   ->  Sort  (cost=2780897.01..2780897.02 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=2577784.44..2780897.00 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..4472.31 rows=4000 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=59)
               ->  Materialize  (cost=2577784.44..2776244.70 rows=3 width=8)
                     ->  Hash Join  (cost=2577784.44..2776244.68 rows=3 width=8)
                           Hash Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                           Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                           ->  HashAggregate  (cost=2455087.37..2617161.96 rows=4851402 width=40)
                                 Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                 Planned Partitions: 32
                                 ->  Seq Scan on lineitem  (cost=0.00..2025001.40 rows=9144685 width=13)
                                       Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Hash  (cost=121485.15..121485.15 rows=80795 width=16)
                                 ->  Nested Loop  (cost=0.86..121485.15 rows=80795 width=16)
                                       ->  Index Only Scan using q20_idx_2 on part  (cost=0.43..64306.24 rows=20202 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.43..2.64 rows=19 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
 JIT:
   Functions: 28
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(28 rows)

query 21 run 1
SET
SET
SET
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1066237.14..1066237.15 rows=1 width=34)
   ->  Sort  (cost=1066237.14..1066237.15 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=1066237.11..1066237.13 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=1066237.11..1066237.12 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=589145.48..1066237.10 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=589144.91..1066234.46 rows=1 width=38)
                                 ->  Merge Anti Join  (cost=589144.48..1066232.01 rows=1 width=34)
                                       Merge Cond: (l1.l_orderkey = l3.l_orderkey)
                                       Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                       ->  Sort  (cost=589143.91..591143.60 rows=799874 width=34)
                                             Sort Key: l1.l_orderkey
                                             ->  Hash Join  (cost=2341.88..495093.61 rows=799874 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.56..409765.36 rows=19996853 width=8)
                                                   ->  Hash  (cost=2291.31..2291.31 rows=4000 width=30)
                                                         ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=39.29..2250.00 rows=4000 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.56..409765.36 rows=19996853 width=8)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.45 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.56..2.63 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
 JIT:
   Functions: 29
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(34 rows)

query 21 run 2
SET
SET
SET
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1066237.14..1066237.15 rows=1 width=34)
   ->  Sort  (cost=1066237.14..1066237.15 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=1066237.11..1066237.13 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=1066237.11..1066237.12 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=589145.48..1066237.10 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=589144.91..1066234.46 rows=1 width=38)
                                 ->  Merge Anti Join  (cost=589144.48..1066232.01 rows=1 width=34)
                                       Merge Cond: (l1.l_orderkey = l3.l_orderkey)
                                       Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                       ->  Sort  (cost=589143.91..591143.60 rows=799874 width=34)
                                             Sort Key: l1.l_orderkey
                                             ->  Hash Join  (cost=2341.88..495093.61 rows=799874 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.56..409765.36 rows=19996853 width=8)
                                                   ->  Hash  (cost=2291.31..2291.31 rows=4000 width=30)
                                                         ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=39.29..2250.00 rows=4000 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.56..409765.36 rows=19996853 width=8)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.45 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.56..2.63 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
 JIT:
   Functions: 29
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(34 rows)

query 21 run 3
SET
SET
SET
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1066237.14..1066237.15 rows=1 width=34)
   ->  Sort  (cost=1066237.14..1066237.15 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=1066237.11..1066237.13 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=1066237.11..1066237.12 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=589145.48..1066237.10 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=589144.91..1066234.46 rows=1 width=38)
                                 ->  Merge Anti Join  (cost=589144.48..1066232.01 rows=1 width=34)
                                       Merge Cond: (l1.l_orderkey = l3.l_orderkey)
                                       Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                       ->  Sort  (cost=589143.91..591143.60 rows=799874 width=34)
                                             Sort Key: l1.l_orderkey
                                             ->  Hash Join  (cost=2341.88..495093.61 rows=799874 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.56..409765.36 rows=19996853 width=8)
                                                   ->  Hash  (cost=2291.31..2291.31 rows=4000 width=30)
                                                         ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=39.29..2250.00 rows=4000 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.56..409765.36 rows=19996853 width=8)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.45 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.56..2.63 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
 JIT:
   Functions: 29
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(34 rows)

query 21 run 4
SET
SET
SET
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1066237.14..1066237.15 rows=1 width=34)
   ->  Sort  (cost=1066237.14..1066237.15 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=1066237.11..1066237.13 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=1066237.11..1066237.12 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=589145.48..1066237.10 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=589144.91..1066234.46 rows=1 width=38)
                                 ->  Merge Anti Join  (cost=589144.48..1066232.01 rows=1 width=34)
                                       Merge Cond: (l1.l_orderkey = l3.l_orderkey)
                                       Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                       ->  Sort  (cost=589143.91..591143.60 rows=799874 width=34)
                                             Sort Key: l1.l_orderkey
                                             ->  Hash Join  (cost=2341.88..495093.61 rows=799874 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.56..409765.36 rows=19996853 width=8)
                                                   ->  Hash  (cost=2291.31..2291.31 rows=4000 width=30)
                                                         ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=39.29..2250.00 rows=4000 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.56..409765.36 rows=19996853 width=8)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.45 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.56..2.63 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
 JIT:
   Functions: 29
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(34 rows)

query 21 run 5
SET
SET
SET
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1066237.14..1066237.15 rows=1 width=34)
   ->  Sort  (cost=1066237.14..1066237.15 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=1066237.11..1066237.13 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=1066237.11..1066237.12 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=589145.48..1066237.10 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=589144.91..1066234.46 rows=1 width=38)
                                 ->  Merge Anti Join  (cost=589144.48..1066232.01 rows=1 width=34)
                                       Merge Cond: (l1.l_orderkey = l3.l_orderkey)
                                       Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                       ->  Sort  (cost=589143.91..591143.60 rows=799874 width=34)
                                             Sort Key: l1.l_orderkey
                                             ->  Hash Join  (cost=2341.88..495093.61 rows=799874 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.56..409765.36 rows=19996853 width=8)
                                                   ->  Hash  (cost=2291.31..2291.31 rows=4000 width=30)
                                                         ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=39.29..2250.00 rows=4000 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.56..409765.36 rows=19996853 width=8)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.45 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.56..2.63 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
 JIT:
   Functions: 29
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(34 rows)

query 22 run 1
SET
SET
SET
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=162398.72..162398.75 rows=1 width=72)
   InitPlan 1
     ->  Aggregate  (cost=75439.10..75439.11 rows=1 width=32)
           ->  Seq Scan on customer customer_1  (cost=0.00..75319.77 rows=47731 width=6)
                 Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=86959.61..87165.92 rows=7502 width=72)
         Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
         ->  Sort  (cost=86959.61..86978.37 rows=7502 width=38)
               Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
               ->  Nested Loop Anti Join  (cost=0.43..86476.74 rows=7502 width=38)
                     ->  Seq Scan on customer  (cost=0.00..75319.77 rows=17499 width=26)
                           Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.65 rows=18 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
 JIT:
   Functions: 16
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(17 rows)

query 22 run 2
SET
SET
SET
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=162398.72..162398.75 rows=1 width=72)
   InitPlan 1
     ->  Aggregate  (cost=75439.10..75439.11 rows=1 width=32)
           ->  Seq Scan on customer customer_1  (cost=0.00..75319.77 rows=47731 width=6)
                 Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=86959.61..87165.92 rows=7502 width=72)
         Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
         ->  Sort  (cost=86959.61..86978.37 rows=7502 width=38)
               Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
               ->  Nested Loop Anti Join  (cost=0.43..86476.74 rows=7502 width=38)
                     ->  Seq Scan on customer  (cost=0.00..75319.77 rows=17499 width=26)
                           Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.65 rows=18 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
 JIT:
   Functions: 16
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(17 rows)

query 22 run 3
SET
SET
SET
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=162398.72..162398.75 rows=1 width=72)
   InitPlan 1
     ->  Aggregate  (cost=75439.10..75439.11 rows=1 width=32)
           ->  Seq Scan on customer customer_1  (cost=0.00..75319.77 rows=47731 width=6)
                 Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=86959.61..87165.92 rows=7502 width=72)
         Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
         ->  Sort  (cost=86959.61..86978.37 rows=7502 width=38)
               Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
               ->  Nested Loop Anti Join  (cost=0.43..86476.74 rows=7502 width=38)
                     ->  Seq Scan on customer  (cost=0.00..75319.77 rows=17499 width=26)
                           Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.65 rows=18 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
 JIT:
   Functions: 16
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(17 rows)

query 22 run 4
SET
SET
SET
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=162398.72..162398.75 rows=1 width=72)
   InitPlan 1
     ->  Aggregate  (cost=75439.10..75439.11 rows=1 width=32)
           ->  Seq Scan on customer customer_1  (cost=0.00..75319.77 rows=47731 width=6)
                 Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=86959.61..87165.92 rows=7502 width=72)
         Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
         ->  Sort  (cost=86959.61..86978.37 rows=7502 width=38)
               Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
               ->  Nested Loop Anti Join  (cost=0.43..86476.74 rows=7502 width=38)
                     ->  Seq Scan on customer  (cost=0.00..75319.77 rows=17499 width=26)
                           Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.65 rows=18 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
 JIT:
   Functions: 16
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(17 rows)

query 22 run 5
SET
SET
SET
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=162398.72..162398.75 rows=1 width=72)
   InitPlan 1
     ->  Aggregate  (cost=75439.10..75439.11 rows=1 width=32)
           ->  Seq Scan on customer customer_1  (cost=0.00..75319.77 rows=47731 width=6)
                 Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=86959.61..87165.92 rows=7502 width=72)
         Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
         ->  Sort  (cost=86959.61..86978.37 rows=7502 width=38)
               Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
               ->  Nested Loop Anti Join  (cost=0.43..86476.74 rows=7502 width=38)
                     ->  Seq Scan on customer  (cost=0.00..75319.77 rows=17499 width=26)
                           Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.65 rows=18 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
 JIT:
   Functions: 16
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(17 rows)

