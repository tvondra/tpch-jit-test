query 1 run 1
SET
SET
SET
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Limit  (cost=184227.61..184228.25 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=184227.61..184231.43 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=184227.61..184230.49 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=183227.55..183227.57 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=183227.34..183227.48 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..131314.57 rows=1483222 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
 JIT:
   Functions: 10
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(14 rows)

query 1 run 2
SET
SET
SET
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Limit  (cost=184227.61..184228.25 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=184227.61..184231.43 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=184227.61..184230.49 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=183227.55..183227.57 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=183227.34..183227.48 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..131314.57 rows=1483222 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
 JIT:
   Functions: 10
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(14 rows)

query 1 run 3
SET
SET
SET
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Limit  (cost=184227.61..184228.25 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=184227.61..184231.43 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=184227.61..184230.49 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=183227.55..183227.57 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=183227.34..183227.48 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..131314.57 rows=1483222 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
 JIT:
   Functions: 10
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(14 rows)

query 1 run 4
SET
SET
SET
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Limit  (cost=184227.61..184228.25 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=184227.61..184231.43 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=184227.61..184230.49 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=183227.55..183227.57 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=183227.34..183227.48 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..131314.57 rows=1483222 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
 JIT:
   Functions: 10
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(14 rows)

query 1 run 5
SET
SET
SET
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Limit  (cost=184227.61..184228.25 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=184227.61..184231.43 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=184227.61..184230.49 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=183227.55..183227.57 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=183227.34..183227.48 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..131314.57 rows=1483222 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
 JIT:
   Functions: 10
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(14 rows)

query 2 run 1
SET
SET
SET
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=18196.53..18196.54 rows=1 width=192)
   ->  Sort  (cost=18196.53..18196.54 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=14.58..18196.52 rows=1 width=192)
               Join Filter: (supplier.s_nationkey = nation.n_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=14.58..18193.82 rows=1 width=170)
                     ->  Nested Loop  (cost=14.58..18193.82 rows=1 width=170)
                           ->  Nested Loop  (cost=14.30..18192.55 rows=1 width=34)
                                 ->  Index Only Scan using q2_idx_1 on part  (cost=0.42..5437.92 rows=812 width=30)
                                       Index Cond: (p_size = 16)
                                       Filter: ((p_type)::text ~~ '%NICKEL'::text)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=13.88..15.70 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=13.44..13.45 rows=1 width=32)
                                               ->  Nested Loop  (cost=0.85..13.44 rows=1 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Nested Loop  (cost=0.85..12.33 rows=4 width=10)
                                                           ->  Nested Loop  (cost=0.71..11.71 rows=4 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.42..2.49 rows=4 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.29..2.30 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                                                 Index Cond: (n_nationkey = supplier_1.s_nationkey)
                           ->  Index Scan using supplier_pkey on supplier  (cost=0.29..1.27 rows=1 width=144)
                                 Index Cond: (s_suppkey = partsupp.ps_suppkey)
(34 rows)

query 2 run 2
SET
SET
SET
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=18196.53..18196.54 rows=1 width=192)
   ->  Sort  (cost=18196.53..18196.54 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=14.58..18196.52 rows=1 width=192)
               Join Filter: (supplier.s_nationkey = nation.n_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=14.58..18193.82 rows=1 width=170)
                     ->  Nested Loop  (cost=14.58..18193.82 rows=1 width=170)
                           ->  Nested Loop  (cost=14.30..18192.55 rows=1 width=34)
                                 ->  Index Only Scan using q2_idx_1 on part  (cost=0.42..5437.92 rows=812 width=30)
                                       Index Cond: (p_size = 16)
                                       Filter: ((p_type)::text ~~ '%NICKEL'::text)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=13.88..15.70 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=13.44..13.45 rows=1 width=32)
                                               ->  Nested Loop  (cost=0.85..13.44 rows=1 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Nested Loop  (cost=0.85..12.33 rows=4 width=10)
                                                           ->  Nested Loop  (cost=0.71..11.71 rows=4 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.42..2.49 rows=4 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.29..2.30 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                                                 Index Cond: (n_nationkey = supplier_1.s_nationkey)
                           ->  Index Scan using supplier_pkey on supplier  (cost=0.29..1.27 rows=1 width=144)
                                 Index Cond: (s_suppkey = partsupp.ps_suppkey)
(34 rows)

query 2 run 3
SET
SET
SET
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=18196.53..18196.54 rows=1 width=192)
   ->  Sort  (cost=18196.53..18196.54 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=14.58..18196.52 rows=1 width=192)
               Join Filter: (supplier.s_nationkey = nation.n_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=14.58..18193.82 rows=1 width=170)
                     ->  Nested Loop  (cost=14.58..18193.82 rows=1 width=170)
                           ->  Nested Loop  (cost=14.30..18192.55 rows=1 width=34)
                                 ->  Index Only Scan using q2_idx_1 on part  (cost=0.42..5437.92 rows=812 width=30)
                                       Index Cond: (p_size = 16)
                                       Filter: ((p_type)::text ~~ '%NICKEL'::text)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=13.88..15.70 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=13.44..13.45 rows=1 width=32)
                                               ->  Nested Loop  (cost=0.85..13.44 rows=1 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Nested Loop  (cost=0.85..12.33 rows=4 width=10)
                                                           ->  Nested Loop  (cost=0.71..11.71 rows=4 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.42..2.49 rows=4 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.29..2.30 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                                                 Index Cond: (n_nationkey = supplier_1.s_nationkey)
                           ->  Index Scan using supplier_pkey on supplier  (cost=0.29..1.27 rows=1 width=144)
                                 Index Cond: (s_suppkey = partsupp.ps_suppkey)
(34 rows)

query 2 run 4
SET
SET
SET
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=18196.53..18196.54 rows=1 width=192)
   ->  Sort  (cost=18196.53..18196.54 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=14.58..18196.52 rows=1 width=192)
               Join Filter: (supplier.s_nationkey = nation.n_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=14.58..18193.82 rows=1 width=170)
                     ->  Nested Loop  (cost=14.58..18193.82 rows=1 width=170)
                           ->  Nested Loop  (cost=14.30..18192.55 rows=1 width=34)
                                 ->  Index Only Scan using q2_idx_1 on part  (cost=0.42..5437.92 rows=812 width=30)
                                       Index Cond: (p_size = 16)
                                       Filter: ((p_type)::text ~~ '%NICKEL'::text)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=13.88..15.70 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=13.44..13.45 rows=1 width=32)
                                               ->  Nested Loop  (cost=0.85..13.44 rows=1 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Nested Loop  (cost=0.85..12.33 rows=4 width=10)
                                                           ->  Nested Loop  (cost=0.71..11.71 rows=4 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.42..2.49 rows=4 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.29..2.30 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                                                 Index Cond: (n_nationkey = supplier_1.s_nationkey)
                           ->  Index Scan using supplier_pkey on supplier  (cost=0.29..1.27 rows=1 width=144)
                                 Index Cond: (s_suppkey = partsupp.ps_suppkey)
(34 rows)

query 2 run 5
SET
SET
SET
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=18196.53..18196.54 rows=1 width=192)
   ->  Sort  (cost=18196.53..18196.54 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=14.58..18196.52 rows=1 width=192)
               Join Filter: (supplier.s_nationkey = nation.n_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=14.58..18193.82 rows=1 width=170)
                     ->  Nested Loop  (cost=14.58..18193.82 rows=1 width=170)
                           ->  Nested Loop  (cost=14.30..18192.55 rows=1 width=34)
                                 ->  Index Only Scan using q2_idx_1 on part  (cost=0.42..5437.92 rows=812 width=30)
                                       Index Cond: (p_size = 16)
                                       Filter: ((p_type)::text ~~ '%NICKEL'::text)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=13.88..15.70 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=13.44..13.45 rows=1 width=32)
                                               ->  Nested Loop  (cost=0.85..13.44 rows=1 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Nested Loop  (cost=0.85..12.33 rows=4 width=10)
                                                           ->  Nested Loop  (cost=0.71..11.71 rows=4 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.42..2.49 rows=4 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.29..2.30 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                                                 Index Cond: (n_nationkey = supplier_1.s_nationkey)
                           ->  Index Scan using supplier_pkey on supplier  (cost=0.29..1.27 rows=1 width=144)
                                 Index Cond: (s_suppkey = partsupp.ps_suppkey)
(34 rows)

query 3 run 1
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=235161.52..235161.54 rows=10 width=44)
   ->  Sort  (cost=235161.52..235974.98 rows=325387 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=180221.78..228130.02 rows=325387 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=180221.78..219181.88 rows=325387 width=24)
                     Workers Planned: 4
                     ->  Sort  (cost=179221.72..179425.09 rows=81347 width=24)
                           Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Parallel Hash Join  (cost=37926.72..172587.14 rows=81347 width=24)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Parallel Seq Scan on lineitem  (cost=0.00..131314.57 rows=822270 width=16)
                                       Filter: (l_shipdate > '1995-03-07'::date)
                                 ->  Parallel Hash  (cost=37328.36..37328.36 rows=47869 width=12)
                                       ->  Parallel Hash Join  (cost=4539.26..37328.36 rows=47869 width=12)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..32179.39 rows=232261 width=16)
                                                   Filter: (o_orderdate < '1995-03-07'::date)
                                             ->  Parallel Hash  (cost=4378.25..4378.25 rows=12881 width=4)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..4378.25 rows=12881 width=4)
                                                         Filter: (c_mktsegment = 'BUILDING'::bpchar)
 JIT:
   Functions: 29
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(24 rows)

query 3 run 2
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=235161.52..235161.54 rows=10 width=44)
   ->  Sort  (cost=235161.52..235974.98 rows=325387 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=180221.78..228130.02 rows=325387 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=180221.78..219181.88 rows=325387 width=24)
                     Workers Planned: 4
                     ->  Sort  (cost=179221.72..179425.09 rows=81347 width=24)
                           Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Parallel Hash Join  (cost=37926.72..172587.14 rows=81347 width=24)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Parallel Seq Scan on lineitem  (cost=0.00..131314.57 rows=822270 width=16)
                                       Filter: (l_shipdate > '1995-03-07'::date)
                                 ->  Parallel Hash  (cost=37328.36..37328.36 rows=47869 width=12)
                                       ->  Parallel Hash Join  (cost=4539.26..37328.36 rows=47869 width=12)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..32179.39 rows=232261 width=16)
                                                   Filter: (o_orderdate < '1995-03-07'::date)
                                             ->  Parallel Hash  (cost=4378.25..4378.25 rows=12881 width=4)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..4378.25 rows=12881 width=4)
                                                         Filter: (c_mktsegment = 'BUILDING'::bpchar)
 JIT:
   Functions: 29
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(24 rows)

query 3 run 3
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=235161.52..235161.54 rows=10 width=44)
   ->  Sort  (cost=235161.52..235974.98 rows=325387 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=180221.78..228130.02 rows=325387 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=180221.78..219181.88 rows=325387 width=24)
                     Workers Planned: 4
                     ->  Sort  (cost=179221.72..179425.09 rows=81347 width=24)
                           Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Parallel Hash Join  (cost=37926.72..172587.14 rows=81347 width=24)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Parallel Seq Scan on lineitem  (cost=0.00..131314.57 rows=822270 width=16)
                                       Filter: (l_shipdate > '1995-03-07'::date)
                                 ->  Parallel Hash  (cost=37328.36..37328.36 rows=47869 width=12)
                                       ->  Parallel Hash Join  (cost=4539.26..37328.36 rows=47869 width=12)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..32179.39 rows=232261 width=16)
                                                   Filter: (o_orderdate < '1995-03-07'::date)
                                             ->  Parallel Hash  (cost=4378.25..4378.25 rows=12881 width=4)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..4378.25 rows=12881 width=4)
                                                         Filter: (c_mktsegment = 'BUILDING'::bpchar)
 JIT:
   Functions: 29
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(24 rows)

query 3 run 4
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=235161.52..235161.54 rows=10 width=44)
   ->  Sort  (cost=235161.52..235974.98 rows=325387 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=180221.78..228130.02 rows=325387 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=180221.78..219181.88 rows=325387 width=24)
                     Workers Planned: 4
                     ->  Sort  (cost=179221.72..179425.09 rows=81347 width=24)
                           Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Parallel Hash Join  (cost=37926.72..172587.14 rows=81347 width=24)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Parallel Seq Scan on lineitem  (cost=0.00..131314.57 rows=822270 width=16)
                                       Filter: (l_shipdate > '1995-03-07'::date)
                                 ->  Parallel Hash  (cost=37328.36..37328.36 rows=47869 width=12)
                                       ->  Parallel Hash Join  (cost=4539.26..37328.36 rows=47869 width=12)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..32179.39 rows=232261 width=16)
                                                   Filter: (o_orderdate < '1995-03-07'::date)
                                             ->  Parallel Hash  (cost=4378.25..4378.25 rows=12881 width=4)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..4378.25 rows=12881 width=4)
                                                         Filter: (c_mktsegment = 'BUILDING'::bpchar)
 JIT:
   Functions: 29
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(24 rows)

query 3 run 5
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=235161.52..235161.54 rows=10 width=44)
   ->  Sort  (cost=235161.52..235974.98 rows=325387 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=180221.78..228130.02 rows=325387 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=180221.78..219181.88 rows=325387 width=24)
                     Workers Planned: 4
                     ->  Sort  (cost=179221.72..179425.09 rows=81347 width=24)
                           Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Parallel Hash Join  (cost=37926.72..172587.14 rows=81347 width=24)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Parallel Seq Scan on lineitem  (cost=0.00..131314.57 rows=822270 width=16)
                                       Filter: (l_shipdate > '1995-03-07'::date)
                                 ->  Parallel Hash  (cost=37328.36..37328.36 rows=47869 width=12)
                                       ->  Parallel Hash Join  (cost=4539.26..37328.36 rows=47869 width=12)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..32179.39 rows=232261 width=16)
                                                   Filter: (o_orderdate < '1995-03-07'::date)
                                             ->  Parallel Hash  (cost=4378.25..4378.25 rows=12881 width=4)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..4378.25 rows=12881 width=4)
                                                         Filter: (c_mktsegment = 'BUILDING'::bpchar)
 JIT:
   Functions: 29
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(24 rows)

query 4 run 1
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=29293.37..52197.53 rows=1 width=24)
   ->  GroupAggregate  (cost=29293.37..143814.19 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop Semi Join  (cost=29293.37..143541.44 rows=54539 width=16)
               ->  Gather Merge  (cost=29292.94..35745.25 rows=54539 width=20)
                     Workers Planned: 3
                     ->  Sort  (cost=28292.90..28336.88 rows=17593 width=20)
                           Sort Key: orders.o_orderpriority
                           ->  Parallel Bitmap Heap Scan on orders  (cost=657.45..27052.35 rows=17593 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..643.82 rows=54539 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
               ->  Index Only Scan using q4_idx_1 on lineitem  (cost=0.43..2.22 rows=1 width=4)
                     Index Cond: (l_orderkey = orders.o_orderkey)
(14 rows)

query 4 run 2
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=29293.37..52197.53 rows=1 width=24)
   ->  GroupAggregate  (cost=29293.37..143814.19 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop Semi Join  (cost=29293.37..143541.44 rows=54539 width=16)
               ->  Gather Merge  (cost=29292.94..35745.25 rows=54539 width=20)
                     Workers Planned: 3
                     ->  Sort  (cost=28292.90..28336.88 rows=17593 width=20)
                           Sort Key: orders.o_orderpriority
                           ->  Parallel Bitmap Heap Scan on orders  (cost=657.45..27052.35 rows=17593 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..643.82 rows=54539 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
               ->  Index Only Scan using q4_idx_1 on lineitem  (cost=0.43..2.22 rows=1 width=4)
                     Index Cond: (l_orderkey = orders.o_orderkey)
(14 rows)

query 4 run 3
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=29293.37..52197.53 rows=1 width=24)
   ->  GroupAggregate  (cost=29293.37..143814.19 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop Semi Join  (cost=29293.37..143541.44 rows=54539 width=16)
               ->  Gather Merge  (cost=29292.94..35745.25 rows=54539 width=20)
                     Workers Planned: 3
                     ->  Sort  (cost=28292.90..28336.88 rows=17593 width=20)
                           Sort Key: orders.o_orderpriority
                           ->  Parallel Bitmap Heap Scan on orders  (cost=657.45..27052.35 rows=17593 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..643.82 rows=54539 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
               ->  Index Only Scan using q4_idx_1 on lineitem  (cost=0.43..2.22 rows=1 width=4)
                     Index Cond: (l_orderkey = orders.o_orderkey)
(14 rows)

query 4 run 4
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=29293.37..52197.53 rows=1 width=24)
   ->  GroupAggregate  (cost=29293.37..143814.19 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop Semi Join  (cost=29293.37..143541.44 rows=54539 width=16)
               ->  Gather Merge  (cost=29292.94..35745.25 rows=54539 width=20)
                     Workers Planned: 3
                     ->  Sort  (cost=28292.90..28336.88 rows=17593 width=20)
                           Sort Key: orders.o_orderpriority
                           ->  Parallel Bitmap Heap Scan on orders  (cost=657.45..27052.35 rows=17593 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..643.82 rows=54539 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
               ->  Index Only Scan using q4_idx_1 on lineitem  (cost=0.43..2.22 rows=1 width=4)
                     Index Cond: (l_orderkey = orders.o_orderkey)
(14 rows)

query 4 run 5
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=29293.37..52197.53 rows=1 width=24)
   ->  GroupAggregate  (cost=29293.37..143814.19 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop Semi Join  (cost=29293.37..143541.44 rows=54539 width=16)
               ->  Gather Merge  (cost=29292.94..35745.25 rows=54539 width=20)
                     Workers Planned: 3
                     ->  Sort  (cost=28292.90..28336.88 rows=17593 width=20)
                           Sort Key: orders.o_orderpriority
                           ->  Parallel Bitmap Heap Scan on orders  (cost=657.45..27052.35 rows=17593 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..643.82 rows=54539 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
               ->  Index Only Scan using q4_idx_1 on lineitem  (cost=0.43..2.22 rows=1 width=4)
                     Index Cond: (l_orderkey = orders.o_orderkey)
(14 rows)

query 5 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=70776.74..70776.74 rows=1 width=58)
   ->  Sort  (cost=70776.74..70776.80 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=70737.45..70776.62 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=70737.45..70775.72 rows=78 width=58)
                     Workers Planned: 3
                     ->  Partial GroupAggregate  (cost=69737.41..69766.51 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=69737.41..69743.17 rows=2303 width=38)
                                 Sort Key: nation.n_name
                                 ->  Hash Join  (cost=7896.50..69608.80 rows=2303 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=7423.50..68833.49 rows=57582 width=50)
                                             ->  Parallel Hash Join  (cost=7423.07..34963.28 rows=14392 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=2682.94..29893.33 rows=71959 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..2627.17 rows=223074 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Parallel Hash  (cost=4583.88..4583.88 rows=12500 width=38)
                                                         ->  Hash Join  (cost=2.51..4583.88 rows=12500 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.43..2.31 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                             ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
(35 rows)

query 5 run 2
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=70776.74..70776.74 rows=1 width=58)
   ->  Sort  (cost=70776.74..70776.80 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=70737.45..70776.62 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=70737.45..70775.72 rows=78 width=58)
                     Workers Planned: 3
                     ->  Partial GroupAggregate  (cost=69737.41..69766.51 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=69737.41..69743.17 rows=2303 width=38)
                                 Sort Key: nation.n_name
                                 ->  Hash Join  (cost=7896.50..69608.80 rows=2303 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=7423.50..68833.49 rows=57582 width=50)
                                             ->  Parallel Hash Join  (cost=7423.07..34963.28 rows=14392 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=2682.94..29893.33 rows=71959 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..2627.17 rows=223074 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Parallel Hash  (cost=4583.88..4583.88 rows=12500 width=38)
                                                         ->  Hash Join  (cost=2.51..4583.88 rows=12500 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.43..2.31 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                             ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
(35 rows)

query 5 run 3
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=70776.74..70776.74 rows=1 width=58)
   ->  Sort  (cost=70776.74..70776.80 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=70737.45..70776.62 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=70737.45..70775.72 rows=78 width=58)
                     Workers Planned: 3
                     ->  Partial GroupAggregate  (cost=69737.41..69766.51 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=69737.41..69743.17 rows=2303 width=38)
                                 Sort Key: nation.n_name
                                 ->  Hash Join  (cost=7896.50..69608.80 rows=2303 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=7423.50..68833.49 rows=57582 width=50)
                                             ->  Parallel Hash Join  (cost=7423.07..34963.28 rows=14392 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=2682.94..29893.33 rows=71959 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..2627.17 rows=223074 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Parallel Hash  (cost=4583.88..4583.88 rows=12500 width=38)
                                                         ->  Hash Join  (cost=2.51..4583.88 rows=12500 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.43..2.31 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                             ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
(35 rows)

query 5 run 4
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=70776.74..70776.74 rows=1 width=58)
   ->  Sort  (cost=70776.74..70776.80 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=70737.45..70776.62 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=70737.45..70775.72 rows=78 width=58)
                     Workers Planned: 3
                     ->  Partial GroupAggregate  (cost=69737.41..69766.51 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=69737.41..69743.17 rows=2303 width=38)
                                 Sort Key: nation.n_name
                                 ->  Hash Join  (cost=7896.50..69608.80 rows=2303 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=7423.50..68833.49 rows=57582 width=50)
                                             ->  Parallel Hash Join  (cost=7423.07..34963.28 rows=14392 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=2682.94..29893.33 rows=71959 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..2627.17 rows=223074 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Parallel Hash  (cost=4583.88..4583.88 rows=12500 width=38)
                                                         ->  Hash Join  (cost=2.51..4583.88 rows=12500 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.43..2.31 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                             ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
(35 rows)

query 5 run 5
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=70776.74..70776.74 rows=1 width=58)
   ->  Sort  (cost=70776.74..70776.80 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=70737.45..70776.62 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=70737.45..70775.72 rows=78 width=58)
                     Workers Planned: 3
                     ->  Partial GroupAggregate  (cost=69737.41..69766.51 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=69737.41..69743.17 rows=2303 width=38)
                                 Sort Key: nation.n_name
                                 ->  Hash Join  (cost=7896.50..69608.80 rows=2303 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=7423.50..68833.49 rows=57582 width=50)
                                             ->  Parallel Hash Join  (cost=7423.07..34963.28 rows=14392 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=2682.94..29893.33 rows=71959 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..2627.17 rows=223074 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Parallel Hash  (cost=4583.88..4583.88 rows=12500 width=38)
                                                         ->  Hash Join  (cost=2.51..4583.88 rows=12500 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.43..2.31 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                             ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
(35 rows)

query 6 run 1
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=112928.23..112928.24 rows=1 width=32)
   ->  Finalize Aggregate  (cost=112928.23..112928.24 rows=1 width=32)
         ->  Gather  (cost=112927.79..112928.20 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=111927.79..111927.80 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=22019.53..111785.93 rows=28372 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..21991.16 rows=113487 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
 JIT:
   Functions: 8
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(12 rows)

query 6 run 2
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=112928.23..112928.24 rows=1 width=32)
   ->  Finalize Aggregate  (cost=112928.23..112928.24 rows=1 width=32)
         ->  Gather  (cost=112927.79..112928.20 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=111927.79..111927.80 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=22019.53..111785.93 rows=28372 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..21991.16 rows=113487 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
 JIT:
   Functions: 8
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(12 rows)

query 6 run 3
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=112928.23..112928.24 rows=1 width=32)
   ->  Finalize Aggregate  (cost=112928.23..112928.24 rows=1 width=32)
         ->  Gather  (cost=112927.79..112928.20 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=111927.79..111927.80 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=22019.53..111785.93 rows=28372 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..21991.16 rows=113487 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
 JIT:
   Functions: 8
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(12 rows)

query 6 run 4
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=112928.23..112928.24 rows=1 width=32)
   ->  Finalize Aggregate  (cost=112928.23..112928.24 rows=1 width=32)
         ->  Gather  (cost=112927.79..112928.20 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=111927.79..111927.80 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=22019.53..111785.93 rows=28372 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..21991.16 rows=113487 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
 JIT:
   Functions: 8
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(12 rows)

query 6 run 5
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=112928.23..112928.24 rows=1 width=32)
   ->  Finalize Aggregate  (cost=112928.23..112928.24 rows=1 width=32)
         ->  Gather  (cost=112927.79..112928.20 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=111927.79..111927.80 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=22019.53..111785.93 rows=28372 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..21991.16 rows=113487 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
 JIT:
   Functions: 8
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(12 rows)

query 7 run 1
SET
SET
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=141466.12..141624.73 rows=1 width=116)
   ->  GroupAggregate  (cost=141466.12..1112320.89 rows=6121 width=116)
         Group Key: n1.n_name, n2.n_name, EXTRACT(year FROM lineitem.l_shipdate)
         ->  Nested Loop  (cost=141466.12..1112137.26 rows=6121 width=96)
               Join Filter: (customer.c_nationkey = n2.n_nationkey)
               ->  Nested Loop  (cost=141465.70..771609.89 rows=153024 width=76)
                     ->  Gather Merge  (cost=141465.28..159787.55 rows=153024 width=76)
                           Workers Planned: 4
                           ->  Sort  (cost=140465.22..140560.86 rows=38256 width=76)
                                 Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                                 ->  Hash Join  (cost=381.77..137553.29 rows=38256 width=76)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..135065.49 rows=459632 width=24)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=371.37..371.37 rows=832 width=60)
                                             ->  Hash Join  (cost=2.87..371.37 rows=832 width=60)
                                                   Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                                   ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                                   ->  Hash  (cost=2.84..2.84 rows=2 width=60)
                                                         ->  Nested Loop  (cost=0.00..2.84 rows=2 width=60)
                                                               Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                                               ->  Materialize  (cost=0.00..1.39 rows=2 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                           Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                     ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.00 rows=1 width=8)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
               ->  Index Only Scan using q10_idx_1 on customer  (cost=0.42..2.21 rows=1 width=8)
                     Index Cond: (c_custkey = orders.o_custkey)
 JIT:
   Functions: 44
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(33 rows)

query 7 run 2
SET
SET
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=141466.12..141624.73 rows=1 width=116)
   ->  GroupAggregate  (cost=141466.12..1112320.89 rows=6121 width=116)
         Group Key: n1.n_name, n2.n_name, EXTRACT(year FROM lineitem.l_shipdate)
         ->  Nested Loop  (cost=141466.12..1112137.26 rows=6121 width=96)
               Join Filter: (customer.c_nationkey = n2.n_nationkey)
               ->  Nested Loop  (cost=141465.70..771609.89 rows=153024 width=76)
                     ->  Gather Merge  (cost=141465.28..159787.55 rows=153024 width=76)
                           Workers Planned: 4
                           ->  Sort  (cost=140465.22..140560.86 rows=38256 width=76)
                                 Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                                 ->  Hash Join  (cost=381.77..137553.29 rows=38256 width=76)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..135065.49 rows=459632 width=24)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=371.37..371.37 rows=832 width=60)
                                             ->  Hash Join  (cost=2.87..371.37 rows=832 width=60)
                                                   Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                                   ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                                   ->  Hash  (cost=2.84..2.84 rows=2 width=60)
                                                         ->  Nested Loop  (cost=0.00..2.84 rows=2 width=60)
                                                               Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                                               ->  Materialize  (cost=0.00..1.39 rows=2 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                           Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                     ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.00 rows=1 width=8)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
               ->  Index Only Scan using q10_idx_1 on customer  (cost=0.42..2.21 rows=1 width=8)
                     Index Cond: (c_custkey = orders.o_custkey)
 JIT:
   Functions: 44
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(33 rows)

query 7 run 3
SET
SET
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=141466.12..141624.73 rows=1 width=116)
   ->  GroupAggregate  (cost=141466.12..1112320.89 rows=6121 width=116)
         Group Key: n1.n_name, n2.n_name, EXTRACT(year FROM lineitem.l_shipdate)
         ->  Nested Loop  (cost=141466.12..1112137.26 rows=6121 width=96)
               Join Filter: (customer.c_nationkey = n2.n_nationkey)
               ->  Nested Loop  (cost=141465.70..771609.89 rows=153024 width=76)
                     ->  Gather Merge  (cost=141465.28..159787.55 rows=153024 width=76)
                           Workers Planned: 4
                           ->  Sort  (cost=140465.22..140560.86 rows=38256 width=76)
                                 Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                                 ->  Hash Join  (cost=381.77..137553.29 rows=38256 width=76)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..135065.49 rows=459632 width=24)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=371.37..371.37 rows=832 width=60)
                                             ->  Hash Join  (cost=2.87..371.37 rows=832 width=60)
                                                   Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                                   ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                                   ->  Hash  (cost=2.84..2.84 rows=2 width=60)
                                                         ->  Nested Loop  (cost=0.00..2.84 rows=2 width=60)
                                                               Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                                               ->  Materialize  (cost=0.00..1.39 rows=2 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                           Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                     ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.00 rows=1 width=8)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
               ->  Index Only Scan using q10_idx_1 on customer  (cost=0.42..2.21 rows=1 width=8)
                     Index Cond: (c_custkey = orders.o_custkey)
 JIT:
   Functions: 44
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(33 rows)

query 7 run 4
SET
SET
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=141466.12..141624.73 rows=1 width=116)
   ->  GroupAggregate  (cost=141466.12..1112320.89 rows=6121 width=116)
         Group Key: n1.n_name, n2.n_name, EXTRACT(year FROM lineitem.l_shipdate)
         ->  Nested Loop  (cost=141466.12..1112137.26 rows=6121 width=96)
               Join Filter: (customer.c_nationkey = n2.n_nationkey)
               ->  Nested Loop  (cost=141465.70..771609.89 rows=153024 width=76)
                     ->  Gather Merge  (cost=141465.28..159787.55 rows=153024 width=76)
                           Workers Planned: 4
                           ->  Sort  (cost=140465.22..140560.86 rows=38256 width=76)
                                 Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                                 ->  Hash Join  (cost=381.77..137553.29 rows=38256 width=76)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..135065.49 rows=459632 width=24)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=371.37..371.37 rows=832 width=60)
                                             ->  Hash Join  (cost=2.87..371.37 rows=832 width=60)
                                                   Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                                   ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                                   ->  Hash  (cost=2.84..2.84 rows=2 width=60)
                                                         ->  Nested Loop  (cost=0.00..2.84 rows=2 width=60)
                                                               Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                                               ->  Materialize  (cost=0.00..1.39 rows=2 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                           Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                     ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.00 rows=1 width=8)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
               ->  Index Only Scan using q10_idx_1 on customer  (cost=0.42..2.21 rows=1 width=8)
                     Index Cond: (c_custkey = orders.o_custkey)
 JIT:
   Functions: 44
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(33 rows)

query 7 run 5
SET
SET
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=141466.12..141624.73 rows=1 width=116)
   ->  GroupAggregate  (cost=141466.12..1112320.89 rows=6121 width=116)
         Group Key: n1.n_name, n2.n_name, EXTRACT(year FROM lineitem.l_shipdate)
         ->  Nested Loop  (cost=141466.12..1112137.26 rows=6121 width=96)
               Join Filter: (customer.c_nationkey = n2.n_nationkey)
               ->  Nested Loop  (cost=141465.70..771609.89 rows=153024 width=76)
                     ->  Gather Merge  (cost=141465.28..159787.55 rows=153024 width=76)
                           Workers Planned: 4
                           ->  Sort  (cost=140465.22..140560.86 rows=38256 width=76)
                                 Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                                 ->  Hash Join  (cost=381.77..137553.29 rows=38256 width=76)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..135065.49 rows=459632 width=24)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=371.37..371.37 rows=832 width=60)
                                             ->  Hash Join  (cost=2.87..371.37 rows=832 width=60)
                                                   Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                                   ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                                   ->  Hash  (cost=2.84..2.84 rows=2 width=60)
                                                         ->  Nested Loop  (cost=0.00..2.84 rows=2 width=60)
                                                               Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                                               ->  Materialize  (cost=0.00..1.39 rows=2 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                           Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                     ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.00 rows=1 width=8)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
               ->  Index Only Scan using q10_idx_1 on customer  (cost=0.42..2.21 rows=1 width=8)
                     Index Cond: (c_custkey = orders.o_custkey)
 JIT:
   Functions: 44
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(33 rows)

query 8 run 1
SET
SET
SET
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=41779.07..41793.38 rows=1 width=64)
   ->  GroupAggregate  (cost=41779.07..76203.42 rows=2406 width=64)
         Group Key: EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=41779.07..76106.28 rows=2451 width=70)
               ->  Nested Loop  (cost=41778.92..76011.15 rows=2451 width=20)
                     ->  Nested Loop  (cost=41778.64..70935.32 rows=2451 width=20)
                           Join Filter: (n1.n_regionkey = region.r_regionkey)
                           ->  Nested Loop  (cost=41778.64..70750.45 rows=12254 width=24)
                                 ->  Nested Loop  (cost=41778.49..70421.80 rows=12254 width=24)
                                       ->  Gather Merge  (cost=41778.07..43227.80 rows=12254 width=24)
                                             Workers Planned: 3
                                             ->  Sort  (cost=40778.03..40787.91 rows=3953 width=24)
                                                   Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                                                   ->  Parallel Hash Join  (cost=6585.37..40541.87 rows=3953 width=24)
                                                         Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                                         ->  Parallel Seq Scan on orders  (cost=0.00..33389.06 rows=148681 width=12)
                                                               Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                         ->  Parallel Hash  (cost=6460.74..6460.74 rows=9970 width=20)
                                                               ->  Nested Loop  (cost=0.85..6460.74 rows=9970 width=20)
                                                                     ->  Parallel Index Only Scan using q2_idx_1 on part  (cost=0.42..5391.74 rows=332 width=4)
                                                                           Index Cond: (p_type = 'LARGE POLISHED BRASS'::text)
                                                                     ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.43..2.92 rows=30 width=24)
                                                                           Index Cond: (l_partkey = part.p_partkey)
                                       ->  Index Only Scan using q10_idx_1 on customer  (cost=0.42..2.22 rows=1 width=8)
                                             Index Cond: (c_custkey = orders.o_custkey)
                                 ->  Memoize  (cost=0.15..1.17 rows=1 width=8)
                                       Cache Key: customer.c_nationkey
                                       Cache Mode: logical
                                       ->  Index Scan using nation_pkey on nation n1  (cost=0.14..1.16 rows=1 width=8)
                                             Index Cond: (n_nationkey = customer.c_nationkey)
                           ->  Materialize  (cost=0.00..1.07 rows=1 width=4)
                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                       Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Index Only Scan using q2_idx_3 on supplier  (cost=0.29..2.07 rows=1 width=8)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
               ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                     Cache Key: supplier.s_nationkey
                     Cache Mode: logical
                     ->  Index Scan using nation_pkey on nation n2  (cost=0.14..1.16 rows=1 width=30)
                           Index Cond: (n_nationkey = supplier.s_nationkey)
(40 rows)

query 8 run 2
SET
SET
SET
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=41779.07..41793.38 rows=1 width=64)
   ->  GroupAggregate  (cost=41779.07..76203.42 rows=2406 width=64)
         Group Key: EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=41779.07..76106.28 rows=2451 width=70)
               ->  Nested Loop  (cost=41778.92..76011.15 rows=2451 width=20)
                     ->  Nested Loop  (cost=41778.64..70935.32 rows=2451 width=20)
                           Join Filter: (n1.n_regionkey = region.r_regionkey)
                           ->  Nested Loop  (cost=41778.64..70750.45 rows=12254 width=24)
                                 ->  Nested Loop  (cost=41778.49..70421.80 rows=12254 width=24)
                                       ->  Gather Merge  (cost=41778.07..43227.80 rows=12254 width=24)
                                             Workers Planned: 3
                                             ->  Sort  (cost=40778.03..40787.91 rows=3953 width=24)
                                                   Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                                                   ->  Parallel Hash Join  (cost=6585.37..40541.87 rows=3953 width=24)
                                                         Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                                         ->  Parallel Seq Scan on orders  (cost=0.00..33389.06 rows=148681 width=12)
                                                               Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                         ->  Parallel Hash  (cost=6460.74..6460.74 rows=9970 width=20)
                                                               ->  Nested Loop  (cost=0.85..6460.74 rows=9970 width=20)
                                                                     ->  Parallel Index Only Scan using q2_idx_1 on part  (cost=0.42..5391.74 rows=332 width=4)
                                                                           Index Cond: (p_type = 'LARGE POLISHED BRASS'::text)
                                                                     ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.43..2.92 rows=30 width=24)
                                                                           Index Cond: (l_partkey = part.p_partkey)
                                       ->  Index Only Scan using q10_idx_1 on customer  (cost=0.42..2.22 rows=1 width=8)
                                             Index Cond: (c_custkey = orders.o_custkey)
                                 ->  Memoize  (cost=0.15..1.17 rows=1 width=8)
                                       Cache Key: customer.c_nationkey
                                       Cache Mode: logical
                                       ->  Index Scan using nation_pkey on nation n1  (cost=0.14..1.16 rows=1 width=8)
                                             Index Cond: (n_nationkey = customer.c_nationkey)
                           ->  Materialize  (cost=0.00..1.07 rows=1 width=4)
                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                       Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Index Only Scan using q2_idx_3 on supplier  (cost=0.29..2.07 rows=1 width=8)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
               ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                     Cache Key: supplier.s_nationkey
                     Cache Mode: logical
                     ->  Index Scan using nation_pkey on nation n2  (cost=0.14..1.16 rows=1 width=30)
                           Index Cond: (n_nationkey = supplier.s_nationkey)
(40 rows)

query 8 run 3
SET
SET
SET
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=41779.07..41793.38 rows=1 width=64)
   ->  GroupAggregate  (cost=41779.07..76203.42 rows=2406 width=64)
         Group Key: EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=41779.07..76106.28 rows=2451 width=70)
               ->  Nested Loop  (cost=41778.92..76011.15 rows=2451 width=20)
                     ->  Nested Loop  (cost=41778.64..70935.32 rows=2451 width=20)
                           Join Filter: (n1.n_regionkey = region.r_regionkey)
                           ->  Nested Loop  (cost=41778.64..70750.45 rows=12254 width=24)
                                 ->  Nested Loop  (cost=41778.49..70421.80 rows=12254 width=24)
                                       ->  Gather Merge  (cost=41778.07..43227.80 rows=12254 width=24)
                                             Workers Planned: 3
                                             ->  Sort  (cost=40778.03..40787.91 rows=3953 width=24)
                                                   Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                                                   ->  Parallel Hash Join  (cost=6585.37..40541.87 rows=3953 width=24)
                                                         Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                                         ->  Parallel Seq Scan on orders  (cost=0.00..33389.06 rows=148681 width=12)
                                                               Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                         ->  Parallel Hash  (cost=6460.74..6460.74 rows=9970 width=20)
                                                               ->  Nested Loop  (cost=0.85..6460.74 rows=9970 width=20)
                                                                     ->  Parallel Index Only Scan using q2_idx_1 on part  (cost=0.42..5391.74 rows=332 width=4)
                                                                           Index Cond: (p_type = 'LARGE POLISHED BRASS'::text)
                                                                     ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.43..2.92 rows=30 width=24)
                                                                           Index Cond: (l_partkey = part.p_partkey)
                                       ->  Index Only Scan using q10_idx_1 on customer  (cost=0.42..2.22 rows=1 width=8)
                                             Index Cond: (c_custkey = orders.o_custkey)
                                 ->  Memoize  (cost=0.15..1.17 rows=1 width=8)
                                       Cache Key: customer.c_nationkey
                                       Cache Mode: logical
                                       ->  Index Scan using nation_pkey on nation n1  (cost=0.14..1.16 rows=1 width=8)
                                             Index Cond: (n_nationkey = customer.c_nationkey)
                           ->  Materialize  (cost=0.00..1.07 rows=1 width=4)
                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                       Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Index Only Scan using q2_idx_3 on supplier  (cost=0.29..2.07 rows=1 width=8)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
               ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                     Cache Key: supplier.s_nationkey
                     Cache Mode: logical
                     ->  Index Scan using nation_pkey on nation n2  (cost=0.14..1.16 rows=1 width=30)
                           Index Cond: (n_nationkey = supplier.s_nationkey)
(40 rows)

query 8 run 4
SET
SET
SET
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=41779.07..41793.38 rows=1 width=64)
   ->  GroupAggregate  (cost=41779.07..76203.42 rows=2406 width=64)
         Group Key: EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=41779.07..76106.28 rows=2451 width=70)
               ->  Nested Loop  (cost=41778.92..76011.15 rows=2451 width=20)
                     ->  Nested Loop  (cost=41778.64..70935.32 rows=2451 width=20)
                           Join Filter: (n1.n_regionkey = region.r_regionkey)
                           ->  Nested Loop  (cost=41778.64..70750.45 rows=12254 width=24)
                                 ->  Nested Loop  (cost=41778.49..70421.80 rows=12254 width=24)
                                       ->  Gather Merge  (cost=41778.07..43227.80 rows=12254 width=24)
                                             Workers Planned: 3
                                             ->  Sort  (cost=40778.03..40787.91 rows=3953 width=24)
                                                   Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                                                   ->  Parallel Hash Join  (cost=6585.37..40541.87 rows=3953 width=24)
                                                         Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                                         ->  Parallel Seq Scan on orders  (cost=0.00..33389.06 rows=148681 width=12)
                                                               Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                         ->  Parallel Hash  (cost=6460.74..6460.74 rows=9970 width=20)
                                                               ->  Nested Loop  (cost=0.85..6460.74 rows=9970 width=20)
                                                                     ->  Parallel Index Only Scan using q2_idx_1 on part  (cost=0.42..5391.74 rows=332 width=4)
                                                                           Index Cond: (p_type = 'LARGE POLISHED BRASS'::text)
                                                                     ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.43..2.92 rows=30 width=24)
                                                                           Index Cond: (l_partkey = part.p_partkey)
                                       ->  Index Only Scan using q10_idx_1 on customer  (cost=0.42..2.22 rows=1 width=8)
                                             Index Cond: (c_custkey = orders.o_custkey)
                                 ->  Memoize  (cost=0.15..1.17 rows=1 width=8)
                                       Cache Key: customer.c_nationkey
                                       Cache Mode: logical
                                       ->  Index Scan using nation_pkey on nation n1  (cost=0.14..1.16 rows=1 width=8)
                                             Index Cond: (n_nationkey = customer.c_nationkey)
                           ->  Materialize  (cost=0.00..1.07 rows=1 width=4)
                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                       Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Index Only Scan using q2_idx_3 on supplier  (cost=0.29..2.07 rows=1 width=8)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
               ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                     Cache Key: supplier.s_nationkey
                     Cache Mode: logical
                     ->  Index Scan using nation_pkey on nation n2  (cost=0.14..1.16 rows=1 width=30)
                           Index Cond: (n_nationkey = supplier.s_nationkey)
(40 rows)

query 8 run 5
SET
SET
SET
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=41779.07..41793.38 rows=1 width=64)
   ->  GroupAggregate  (cost=41779.07..76203.42 rows=2406 width=64)
         Group Key: EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=41779.07..76106.28 rows=2451 width=70)
               ->  Nested Loop  (cost=41778.92..76011.15 rows=2451 width=20)
                     ->  Nested Loop  (cost=41778.64..70935.32 rows=2451 width=20)
                           Join Filter: (n1.n_regionkey = region.r_regionkey)
                           ->  Nested Loop  (cost=41778.64..70750.45 rows=12254 width=24)
                                 ->  Nested Loop  (cost=41778.49..70421.80 rows=12254 width=24)
                                       ->  Gather Merge  (cost=41778.07..43227.80 rows=12254 width=24)
                                             Workers Planned: 3
                                             ->  Sort  (cost=40778.03..40787.91 rows=3953 width=24)
                                                   Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                                                   ->  Parallel Hash Join  (cost=6585.37..40541.87 rows=3953 width=24)
                                                         Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                                         ->  Parallel Seq Scan on orders  (cost=0.00..33389.06 rows=148681 width=12)
                                                               Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                         ->  Parallel Hash  (cost=6460.74..6460.74 rows=9970 width=20)
                                                               ->  Nested Loop  (cost=0.85..6460.74 rows=9970 width=20)
                                                                     ->  Parallel Index Only Scan using q2_idx_1 on part  (cost=0.42..5391.74 rows=332 width=4)
                                                                           Index Cond: (p_type = 'LARGE POLISHED BRASS'::text)
                                                                     ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.43..2.92 rows=30 width=24)
                                                                           Index Cond: (l_partkey = part.p_partkey)
                                       ->  Index Only Scan using q10_idx_1 on customer  (cost=0.42..2.22 rows=1 width=8)
                                             Index Cond: (c_custkey = orders.o_custkey)
                                 ->  Memoize  (cost=0.15..1.17 rows=1 width=8)
                                       Cache Key: customer.c_nationkey
                                       Cache Mode: logical
                                       ->  Index Scan using nation_pkey on nation n1  (cost=0.14..1.16 rows=1 width=8)
                                             Index Cond: (n_nationkey = customer.c_nationkey)
                           ->  Materialize  (cost=0.00..1.07 rows=1 width=4)
                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                       Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Index Only Scan using q2_idx_3 on supplier  (cost=0.29..2.07 rows=1 width=8)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
               ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                     Cache Key: supplier.s_nationkey
                     Cache Mode: logical
                     ->  Index Scan using nation_pkey on nation n2  (cost=0.14..1.16 rows=1 width=30)
                           Index Cond: (n_nationkey = supplier.s_nationkey)
(40 rows)

query 9 run 1
SET
SET
SET
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=59333.32..59345.40 rows=1 width=90)
   ->  GroupAggregate  (cost=59333.32..786198.74 rows=60150 width=90)
         Group Key: nation.n_name, EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=59333.32..779992.17 rows=303104 width=81)
               Join Filter: (supplier.s_suppkey = partsupp.ps_suppkey)
               ->  Gather Merge  (cost=59332.90..95192.05 rows=303104 width=63)
                     Workers Planned: 3
                     ->  Sort  (cost=58332.86..58577.29 rows=97775 width=63)
                           Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
                           ->  Hash Join  (cost=16828.96..50228.69 rows=97775 width=63)
                                 Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                 ->  Parallel Hash Join  (cost=16827.40..49926.96 rows=97775 width=41)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..30969.71 rows=483871 width=8)
                                       ->  Parallel Hash  (cost=15605.21..15605.21 rows=97775 width=41)
                                             ->  Hash Join  (cost=448.85..15605.21 rows=97775 width=41)
                                                   Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                                   ->  Nested Loop  (cost=0.85..14900.44 rows=97775 width=33)
                                                         ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.42..4744.87 rows=3258 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.43..2.82 rows=30 width=29)
                                                               Index Cond: (l_partkey = part.p_partkey)
                                                   ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                                         ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
               ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.42..2.24 rows=1 width=14)
                     Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
(28 rows)

query 9 run 2
SET
SET
SET
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=59333.32..59345.40 rows=1 width=90)
   ->  GroupAggregate  (cost=59333.32..786198.74 rows=60150 width=90)
         Group Key: nation.n_name, EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=59333.32..779992.17 rows=303104 width=81)
               Join Filter: (supplier.s_suppkey = partsupp.ps_suppkey)
               ->  Gather Merge  (cost=59332.90..95192.05 rows=303104 width=63)
                     Workers Planned: 3
                     ->  Sort  (cost=58332.86..58577.29 rows=97775 width=63)
                           Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
                           ->  Hash Join  (cost=16828.96..50228.69 rows=97775 width=63)
                                 Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                 ->  Parallel Hash Join  (cost=16827.40..49926.96 rows=97775 width=41)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..30969.71 rows=483871 width=8)
                                       ->  Parallel Hash  (cost=15605.21..15605.21 rows=97775 width=41)
                                             ->  Hash Join  (cost=448.85..15605.21 rows=97775 width=41)
                                                   Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                                   ->  Nested Loop  (cost=0.85..14900.44 rows=97775 width=33)
                                                         ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.42..4744.87 rows=3258 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.43..2.82 rows=30 width=29)
                                                               Index Cond: (l_partkey = part.p_partkey)
                                                   ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                                         ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
               ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.42..2.24 rows=1 width=14)
                     Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
(28 rows)

query 9 run 3
SET
SET
SET
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=59333.32..59345.40 rows=1 width=90)
   ->  GroupAggregate  (cost=59333.32..786198.74 rows=60150 width=90)
         Group Key: nation.n_name, EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=59333.32..779992.17 rows=303104 width=81)
               Join Filter: (supplier.s_suppkey = partsupp.ps_suppkey)
               ->  Gather Merge  (cost=59332.90..95192.05 rows=303104 width=63)
                     Workers Planned: 3
                     ->  Sort  (cost=58332.86..58577.29 rows=97775 width=63)
                           Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
                           ->  Hash Join  (cost=16828.96..50228.69 rows=97775 width=63)
                                 Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                 ->  Parallel Hash Join  (cost=16827.40..49926.96 rows=97775 width=41)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..30969.71 rows=483871 width=8)
                                       ->  Parallel Hash  (cost=15605.21..15605.21 rows=97775 width=41)
                                             ->  Hash Join  (cost=448.85..15605.21 rows=97775 width=41)
                                                   Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                                   ->  Nested Loop  (cost=0.85..14900.44 rows=97775 width=33)
                                                         ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.42..4744.87 rows=3258 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.43..2.82 rows=30 width=29)
                                                               Index Cond: (l_partkey = part.p_partkey)
                                                   ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                                         ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
               ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.42..2.24 rows=1 width=14)
                     Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
(28 rows)

query 9 run 4
SET
SET
SET
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=59333.32..59345.40 rows=1 width=90)
   ->  GroupAggregate  (cost=59333.32..786198.74 rows=60150 width=90)
         Group Key: nation.n_name, EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=59333.32..779992.17 rows=303104 width=81)
               Join Filter: (supplier.s_suppkey = partsupp.ps_suppkey)
               ->  Gather Merge  (cost=59332.90..95192.05 rows=303104 width=63)
                     Workers Planned: 3
                     ->  Sort  (cost=58332.86..58577.29 rows=97775 width=63)
                           Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
                           ->  Hash Join  (cost=16828.96..50228.69 rows=97775 width=63)
                                 Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                 ->  Parallel Hash Join  (cost=16827.40..49926.96 rows=97775 width=41)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..30969.71 rows=483871 width=8)
                                       ->  Parallel Hash  (cost=15605.21..15605.21 rows=97775 width=41)
                                             ->  Hash Join  (cost=448.85..15605.21 rows=97775 width=41)
                                                   Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                                   ->  Nested Loop  (cost=0.85..14900.44 rows=97775 width=33)
                                                         ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.42..4744.87 rows=3258 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.43..2.82 rows=30 width=29)
                                                               Index Cond: (l_partkey = part.p_partkey)
                                                   ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                                         ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
               ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.42..2.24 rows=1 width=14)
                     Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
(28 rows)

query 9 run 5
SET
SET
SET
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=59333.32..59345.40 rows=1 width=90)
   ->  GroupAggregate  (cost=59333.32..786198.74 rows=60150 width=90)
         Group Key: nation.n_name, EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=59333.32..779992.17 rows=303104 width=81)
               Join Filter: (supplier.s_suppkey = partsupp.ps_suppkey)
               ->  Gather Merge  (cost=59332.90..95192.05 rows=303104 width=63)
                     Workers Planned: 3
                     ->  Sort  (cost=58332.86..58577.29 rows=97775 width=63)
                           Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
                           ->  Hash Join  (cost=16828.96..50228.69 rows=97775 width=63)
                                 Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                 ->  Parallel Hash Join  (cost=16827.40..49926.96 rows=97775 width=41)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..30969.71 rows=483871 width=8)
                                       ->  Parallel Hash  (cost=15605.21..15605.21 rows=97775 width=41)
                                             ->  Hash Join  (cost=448.85..15605.21 rows=97775 width=41)
                                                   Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                                   ->  Nested Loop  (cost=0.85..14900.44 rows=97775 width=33)
                                                         ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.42..4744.87 rows=3258 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.43..2.82 rows=30 width=29)
                                                               Index Cond: (l_partkey = part.p_partkey)
                                                   ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                                         ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
               ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.42..2.24 rows=1 width=14)
                     Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
(28 rows)

query 10 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=83132.50..83132.55 rows=20 width=202)
   ->  Sort  (cost=83132.50..83269.83 rows=54931 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  HashAggregate  (cost=80984.17..81670.80 rows=54931 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather  (cost=6688.39..80297.53 rows=54931 width=182)
                     Workers Planned: 3
                     ->  Hash Join  (cost=5688.39..73804.43 rows=17720 width=182)
                           Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                           ->  Parallel Hash Join  (cost=5686.82..73748.46 rows=17720 width=160)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Nested Loop  (cost=683.57..68698.70 rows=17720 width=16)
                                       ->  Parallel Bitmap Heap Scan on orders  (cost=683.14..27088.28 rows=18276 width=8)
                                             Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..668.98 rows=56655 width=0)
                                                   Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                       ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.43..2.27 rows=1 width=16)
                                             Index Cond: ((l_orderkey = orders.o_orderkey) AND (l_returnflag = 'R'::bpchar))
                                 ->  Parallel Hash  (cost=4222.00..4222.00 rows=62500 width=148)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=148)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(22 rows)

query 10 run 2
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=83132.50..83132.55 rows=20 width=202)
   ->  Sort  (cost=83132.50..83269.83 rows=54931 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  HashAggregate  (cost=80984.17..81670.80 rows=54931 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather  (cost=6688.39..80297.53 rows=54931 width=182)
                     Workers Planned: 3
                     ->  Hash Join  (cost=5688.39..73804.43 rows=17720 width=182)
                           Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                           ->  Parallel Hash Join  (cost=5686.82..73748.46 rows=17720 width=160)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Nested Loop  (cost=683.57..68698.70 rows=17720 width=16)
                                       ->  Parallel Bitmap Heap Scan on orders  (cost=683.14..27088.28 rows=18276 width=8)
                                             Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..668.98 rows=56655 width=0)
                                                   Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                       ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.43..2.27 rows=1 width=16)
                                             Index Cond: ((l_orderkey = orders.o_orderkey) AND (l_returnflag = 'R'::bpchar))
                                 ->  Parallel Hash  (cost=4222.00..4222.00 rows=62500 width=148)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=148)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(22 rows)

query 10 run 3
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=83132.50..83132.55 rows=20 width=202)
   ->  Sort  (cost=83132.50..83269.83 rows=54931 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  HashAggregate  (cost=80984.17..81670.80 rows=54931 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather  (cost=6688.39..80297.53 rows=54931 width=182)
                     Workers Planned: 3
                     ->  Hash Join  (cost=5688.39..73804.43 rows=17720 width=182)
                           Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                           ->  Parallel Hash Join  (cost=5686.82..73748.46 rows=17720 width=160)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Nested Loop  (cost=683.57..68698.70 rows=17720 width=16)
                                       ->  Parallel Bitmap Heap Scan on orders  (cost=683.14..27088.28 rows=18276 width=8)
                                             Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..668.98 rows=56655 width=0)
                                                   Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                       ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.43..2.27 rows=1 width=16)
                                             Index Cond: ((l_orderkey = orders.o_orderkey) AND (l_returnflag = 'R'::bpchar))
                                 ->  Parallel Hash  (cost=4222.00..4222.00 rows=62500 width=148)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=148)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(22 rows)

query 10 run 4
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=83132.50..83132.55 rows=20 width=202)
   ->  Sort  (cost=83132.50..83269.83 rows=54931 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  HashAggregate  (cost=80984.17..81670.80 rows=54931 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather  (cost=6688.39..80297.53 rows=54931 width=182)
                     Workers Planned: 3
                     ->  Hash Join  (cost=5688.39..73804.43 rows=17720 width=182)
                           Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                           ->  Parallel Hash Join  (cost=5686.82..73748.46 rows=17720 width=160)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Nested Loop  (cost=683.57..68698.70 rows=17720 width=16)
                                       ->  Parallel Bitmap Heap Scan on orders  (cost=683.14..27088.28 rows=18276 width=8)
                                             Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..668.98 rows=56655 width=0)
                                                   Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                       ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.43..2.27 rows=1 width=16)
                                             Index Cond: ((l_orderkey = orders.o_orderkey) AND (l_returnflag = 'R'::bpchar))
                                 ->  Parallel Hash  (cost=4222.00..4222.00 rows=62500 width=148)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=148)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(22 rows)

query 10 run 5
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=83132.50..83132.55 rows=20 width=202)
   ->  Sort  (cost=83132.50..83269.83 rows=54931 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  HashAggregate  (cost=80984.17..81670.80 rows=54931 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather  (cost=6688.39..80297.53 rows=54931 width=182)
                     Workers Planned: 3
                     ->  Hash Join  (cost=5688.39..73804.43 rows=17720 width=182)
                           Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                           ->  Parallel Hash Join  (cost=5686.82..73748.46 rows=17720 width=160)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Nested Loop  (cost=683.57..68698.70 rows=17720 width=16)
                                       ->  Parallel Bitmap Heap Scan on orders  (cost=683.14..27088.28 rows=18276 width=8)
                                             Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..668.98 rows=56655 width=0)
                                                   Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                       ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.43..2.27 rows=1 width=16)
                                             Index Cond: ((l_orderkey = orders.o_orderkey) AND (l_returnflag = 'R'::bpchar))
                                 ->  Parallel Hash  (cost=4222.00..4222.00 rows=62500 width=148)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..4222.00 rows=62500 width=148)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(22 rows)

query 11 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=17532.87..17532.87 rows=1 width=36)
   InitPlan 1
     ->  Finalize Aggregate  (cost=7170.21..7170.22 rows=1 width=32)
           ->  Gather  (cost=7169.99..7170.20 rows=2 width=32)
                 Workers Planned: 1
                 ->  Partial Aggregate  (cost=6169.99..6170.00 rows=1 width=32)
                       ->  Nested Loop  (cost=0.71..6028.81 rows=18824 width=10)
                             ->  Nested Loop  (cost=0.29..578.65 rows=235 width=4)
                                   Join Filter: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Parallel Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.29..489.11 rows=5882 width=8)
                                   ->  Materialize  (cost=0.00..1.32 rows=1 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.42..22.39 rows=80 width=14)
                                   Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=10362.65..10389.31 rows=10667 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=9829.31..10309.31 rows=10667 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               ->  Nested Loop  (cost=5.81..9509.31 rows=32000 width=14)
                     ->  Nested Loop  (cost=5.38..232.45 rows=400 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=5.38..227.14 rows=400 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..5.29 rows=400 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..22.39 rows=80 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(30 rows)

query 11 run 2
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=17532.87..17532.87 rows=1 width=36)
   InitPlan 1
     ->  Finalize Aggregate  (cost=7170.21..7170.22 rows=1 width=32)
           ->  Gather  (cost=7169.99..7170.20 rows=2 width=32)
                 Workers Planned: 1
                 ->  Partial Aggregate  (cost=6169.99..6170.00 rows=1 width=32)
                       ->  Nested Loop  (cost=0.71..6028.81 rows=18824 width=10)
                             ->  Nested Loop  (cost=0.29..578.65 rows=235 width=4)
                                   Join Filter: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Parallel Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.29..489.11 rows=5882 width=8)
                                   ->  Materialize  (cost=0.00..1.32 rows=1 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.42..22.39 rows=80 width=14)
                                   Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=10362.65..10389.31 rows=10667 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=9829.31..10309.31 rows=10667 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               ->  Nested Loop  (cost=5.81..9509.31 rows=32000 width=14)
                     ->  Nested Loop  (cost=5.38..232.45 rows=400 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=5.38..227.14 rows=400 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..5.29 rows=400 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..22.39 rows=80 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(30 rows)

query 11 run 3
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=17532.87..17532.87 rows=1 width=36)
   InitPlan 1
     ->  Finalize Aggregate  (cost=7170.21..7170.22 rows=1 width=32)
           ->  Gather  (cost=7169.99..7170.20 rows=2 width=32)
                 Workers Planned: 1
                 ->  Partial Aggregate  (cost=6169.99..6170.00 rows=1 width=32)
                       ->  Nested Loop  (cost=0.71..6028.81 rows=18824 width=10)
                             ->  Nested Loop  (cost=0.29..578.65 rows=235 width=4)
                                   Join Filter: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Parallel Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.29..489.11 rows=5882 width=8)
                                   ->  Materialize  (cost=0.00..1.32 rows=1 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.42..22.39 rows=80 width=14)
                                   Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=10362.65..10389.31 rows=10667 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=9829.31..10309.31 rows=10667 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               ->  Nested Loop  (cost=5.81..9509.31 rows=32000 width=14)
                     ->  Nested Loop  (cost=5.38..232.45 rows=400 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=5.38..227.14 rows=400 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..5.29 rows=400 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..22.39 rows=80 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(30 rows)

query 11 run 4
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=17532.87..17532.87 rows=1 width=36)
   InitPlan 1
     ->  Finalize Aggregate  (cost=7170.21..7170.22 rows=1 width=32)
           ->  Gather  (cost=7169.99..7170.20 rows=2 width=32)
                 Workers Planned: 1
                 ->  Partial Aggregate  (cost=6169.99..6170.00 rows=1 width=32)
                       ->  Nested Loop  (cost=0.71..6028.81 rows=18824 width=10)
                             ->  Nested Loop  (cost=0.29..578.65 rows=235 width=4)
                                   Join Filter: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Parallel Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.29..489.11 rows=5882 width=8)
                                   ->  Materialize  (cost=0.00..1.32 rows=1 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.42..22.39 rows=80 width=14)
                                   Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=10362.65..10389.31 rows=10667 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=9829.31..10309.31 rows=10667 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               ->  Nested Loop  (cost=5.81..9509.31 rows=32000 width=14)
                     ->  Nested Loop  (cost=5.38..232.45 rows=400 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=5.38..227.14 rows=400 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..5.29 rows=400 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..22.39 rows=80 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(30 rows)

query 11 run 5
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=17532.87..17532.87 rows=1 width=36)
   InitPlan 1
     ->  Finalize Aggregate  (cost=7170.21..7170.22 rows=1 width=32)
           ->  Gather  (cost=7169.99..7170.20 rows=2 width=32)
                 Workers Planned: 1
                 ->  Partial Aggregate  (cost=6169.99..6170.00 rows=1 width=32)
                       ->  Nested Loop  (cost=0.71..6028.81 rows=18824 width=10)
                             ->  Nested Loop  (cost=0.29..578.65 rows=235 width=4)
                                   Join Filter: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                   ->  Parallel Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.29..489.11 rows=5882 width=8)
                                   ->  Materialize  (cost=0.00..1.32 rows=1 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.42..22.39 rows=80 width=14)
                                   Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=10362.65..10389.31 rows=10667 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=9829.31..10309.31 rows=10667 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               ->  Nested Loop  (cost=5.81..9509.31 rows=32000 width=14)
                     ->  Nested Loop  (cost=5.38..232.45 rows=400 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=5.38..227.14 rows=400 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..5.29 rows=400 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..22.39 rows=80 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(30 rows)

query 12 run 1
SET
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=16659.81..34095.46 rows=1 width=27)
   ->  GroupAggregate  (cost=16659.81..138709.37 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Nested Loop  (cost=16659.81..138193.05 rows=29500 width=27)
               ->  Gather Merge  (cost=16659.38..20191.55 rows=29500 width=15)
                     Workers Planned: 4
                     ->  Sort  (cost=15659.32..15677.76 rows=7375 width=15)
                           Sort Key: lineitem.l_shipmode
                           ->  Parallel Index Only Scan using q12_idx_1 on lineitem  (cost=0.42..15185.54 rows=7375 width=15)
                                 Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
               ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.00 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
(12 rows)

query 12 run 2
SET
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=16659.81..34095.46 rows=1 width=27)
   ->  GroupAggregate  (cost=16659.81..138709.37 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Nested Loop  (cost=16659.81..138193.05 rows=29500 width=27)
               ->  Gather Merge  (cost=16659.38..20191.55 rows=29500 width=15)
                     Workers Planned: 4
                     ->  Sort  (cost=15659.32..15677.76 rows=7375 width=15)
                           Sort Key: lineitem.l_shipmode
                           ->  Parallel Index Only Scan using q12_idx_1 on lineitem  (cost=0.42..15185.54 rows=7375 width=15)
                                 Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
               ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.00 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
(12 rows)

query 12 run 3
SET
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=16659.81..34095.46 rows=1 width=27)
   ->  GroupAggregate  (cost=16659.81..138709.37 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Nested Loop  (cost=16659.81..138193.05 rows=29500 width=27)
               ->  Gather Merge  (cost=16659.38..20191.55 rows=29500 width=15)
                     Workers Planned: 4
                     ->  Sort  (cost=15659.32..15677.76 rows=7375 width=15)
                           Sort Key: lineitem.l_shipmode
                           ->  Parallel Index Only Scan using q12_idx_1 on lineitem  (cost=0.42..15185.54 rows=7375 width=15)
                                 Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
               ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.00 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
(12 rows)

query 12 run 4
SET
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=16659.81..34095.46 rows=1 width=27)
   ->  GroupAggregate  (cost=16659.81..138709.37 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Nested Loop  (cost=16659.81..138193.05 rows=29500 width=27)
               ->  Gather Merge  (cost=16659.38..20191.55 rows=29500 width=15)
                     Workers Planned: 4
                     ->  Sort  (cost=15659.32..15677.76 rows=7375 width=15)
                           Sort Key: lineitem.l_shipmode
                           ->  Parallel Index Only Scan using q12_idx_1 on lineitem  (cost=0.42..15185.54 rows=7375 width=15)
                                 Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
               ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.00 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
(12 rows)

query 12 run 5
SET
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=16659.81..34095.46 rows=1 width=27)
   ->  GroupAggregate  (cost=16659.81..138709.37 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Nested Loop  (cost=16659.81..138193.05 rows=29500 width=27)
               ->  Gather Merge  (cost=16659.38..20191.55 rows=29500 width=15)
                     Workers Planned: 4
                     ->  Sort  (cost=15659.32..15677.76 rows=7375 width=15)
                           Sort Key: lineitem.l_shipmode
                           ->  Parallel Index Only Scan using q12_idx_1 on lineitem  (cost=0.42..15185.54 rows=7375 width=15)
                                 Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
               ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.00 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
(12 rows)

query 13 run 1
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=64678.44..64678.44 rows=1 width=16)
   ->  Sort  (cost=64678.44..64678.94 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=64675.44..64677.44 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=60925.44..62425.44 rows=150000 width=12)
                     Group Key: customer.c_custkey
                     ->  Hash Right Join  (cost=4953.42..53652.71 rows=1454545 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..44881.00 rows=1454545 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=3078.42..3078.42 rows=150000 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.42..3078.42 rows=150000 width=4)
(13 rows)

query 13 run 2
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=64678.44..64678.44 rows=1 width=16)
   ->  Sort  (cost=64678.44..64678.94 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=64675.44..64677.44 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=60925.44..62425.44 rows=150000 width=12)
                     Group Key: customer.c_custkey
                     ->  Hash Right Join  (cost=4953.42..53652.71 rows=1454545 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..44881.00 rows=1454545 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=3078.42..3078.42 rows=150000 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.42..3078.42 rows=150000 width=4)
(13 rows)

query 13 run 3
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=64678.44..64678.44 rows=1 width=16)
   ->  Sort  (cost=64678.44..64678.94 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=64675.44..64677.44 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=60925.44..62425.44 rows=150000 width=12)
                     Group Key: customer.c_custkey
                     ->  Hash Right Join  (cost=4953.42..53652.71 rows=1454545 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..44881.00 rows=1454545 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=3078.42..3078.42 rows=150000 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.42..3078.42 rows=150000 width=4)
(13 rows)

query 13 run 4
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=64678.44..64678.44 rows=1 width=16)
   ->  Sort  (cost=64678.44..64678.94 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=64675.44..64677.44 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=60925.44..62425.44 rows=150000 width=12)
                     Group Key: customer.c_custkey
                     ->  Hash Right Join  (cost=4953.42..53652.71 rows=1454545 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..44881.00 rows=1454545 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=3078.42..3078.42 rows=150000 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.42..3078.42 rows=150000 width=4)
(13 rows)

query 13 run 5
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=64678.44..64678.44 rows=1 width=16)
   ->  Sort  (cost=64678.44..64678.94 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=64675.44..64677.44 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=60925.44..62425.44 rows=150000 width=12)
                     Group Key: customer.c_custkey
                     ->  Hash Right Join  (cost=4953.42..53652.71 rows=1454545 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..44881.00 rows=1454545 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=3078.42..3078.42 rows=150000 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.42..3078.42 rows=150000 width=4)
(13 rows)

query 14 run 1
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=86151.60..86151.61 rows=1 width=32)
   ->  Finalize Aggregate  (cost=86151.60..86151.61 rows=1 width=32)
         ->  Gather  (cost=86151.14..86151.55 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=85151.14..85151.15 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=7472.88..84786.44 rows=20840 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=1498.88..78757.73 rows=20840 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..1478.04 rows=83361 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=4932.33..4932.33 rows=83333 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..4932.33 rows=83333 width=25)
(13 rows)

query 14 run 2
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=86151.60..86151.61 rows=1 width=32)
   ->  Finalize Aggregate  (cost=86151.60..86151.61 rows=1 width=32)
         ->  Gather  (cost=86151.14..86151.55 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=85151.14..85151.15 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=7472.88..84786.44 rows=20840 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=1498.88..78757.73 rows=20840 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..1478.04 rows=83361 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=4932.33..4932.33 rows=83333 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..4932.33 rows=83333 width=25)
(13 rows)

query 14 run 3
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=86151.60..86151.61 rows=1 width=32)
   ->  Finalize Aggregate  (cost=86151.60..86151.61 rows=1 width=32)
         ->  Gather  (cost=86151.14..86151.55 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=85151.14..85151.15 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=7472.88..84786.44 rows=20840 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=1498.88..78757.73 rows=20840 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..1478.04 rows=83361 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=4932.33..4932.33 rows=83333 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..4932.33 rows=83333 width=25)
(13 rows)

query 14 run 4
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=86151.60..86151.61 rows=1 width=32)
   ->  Finalize Aggregate  (cost=86151.60..86151.61 rows=1 width=32)
         ->  Gather  (cost=86151.14..86151.55 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=85151.14..85151.15 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=7472.88..84786.44 rows=20840 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=1498.88..78757.73 rows=20840 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..1478.04 rows=83361 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=4932.33..4932.33 rows=83333 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..4932.33 rows=83333 width=25)
(13 rows)

query 14 run 5
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=86151.60..86151.61 rows=1 width=32)
   ->  Finalize Aggregate  (cost=86151.60..86151.61 rows=1 width=32)
         ->  Gather  (cost=86151.14..86151.55 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=85151.14..85151.15 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=7472.88..84786.44 rows=20840 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=1498.88..78757.73 rows=20840 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..1478.04 rows=83361 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=4932.33..4932.33 rows=83333 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..4932.33 rows=83333 width=25)
(13 rows)

query 15 run 1
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=242325.92..242433.85 rows=1 width=103)
   InitPlan 1
     ->  Aggregate  (cost=122509.67..122509.68 rows=1 width=32)
           ->  HashAggregate  (cost=122259.87..122384.77 rows=9992 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=4056.30..120002.44 rows=225743 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3999.86 rows=225743 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=119816.23..125212.77 rows=50 width=103)
         ->  Finalize GroupAggregate  (cost=119815.95..125051.14 rows=50 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
               ->  Gather Merge  (cost=119815.95..124601.50 rows=39968 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=118815.89..118840.87 rows=9992 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=118027.19..118152.09 rows=9992 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=4056.30..117462.83 rows=56436 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3999.86 rows=225743 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..3.22 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
 JIT:
   Functions: 23
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(28 rows)

DROP VIEW
query 15 run 2
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=242325.92..242433.85 rows=1 width=103)
   InitPlan 1
     ->  Aggregate  (cost=122509.67..122509.68 rows=1 width=32)
           ->  HashAggregate  (cost=122259.87..122384.77 rows=9992 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=4056.30..120002.44 rows=225743 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3999.86 rows=225743 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=119816.23..125212.77 rows=50 width=103)
         ->  Finalize GroupAggregate  (cost=119815.95..125051.14 rows=50 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
               ->  Gather Merge  (cost=119815.95..124601.50 rows=39968 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=118815.89..118840.87 rows=9992 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=118027.19..118152.09 rows=9992 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=4056.30..117462.83 rows=56436 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3999.86 rows=225743 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..3.22 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
 JIT:
   Functions: 23
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(28 rows)

DROP VIEW
query 15 run 3
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=242325.92..242433.85 rows=1 width=103)
   InitPlan 1
     ->  Aggregate  (cost=122509.67..122509.68 rows=1 width=32)
           ->  HashAggregate  (cost=122259.87..122384.77 rows=9992 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=4056.30..120002.44 rows=225743 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3999.86 rows=225743 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=119816.23..125212.77 rows=50 width=103)
         ->  Finalize GroupAggregate  (cost=119815.95..125051.14 rows=50 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
               ->  Gather Merge  (cost=119815.95..124601.50 rows=39968 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=118815.89..118840.87 rows=9992 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=118027.19..118152.09 rows=9992 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=4056.30..117462.83 rows=56436 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3999.86 rows=225743 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..3.22 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
 JIT:
   Functions: 23
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(28 rows)

DROP VIEW
query 15 run 4
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=242325.92..242433.85 rows=1 width=103)
   InitPlan 1
     ->  Aggregate  (cost=122509.67..122509.68 rows=1 width=32)
           ->  HashAggregate  (cost=122259.87..122384.77 rows=9992 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=4056.30..120002.44 rows=225743 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3999.86 rows=225743 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=119816.23..125212.77 rows=50 width=103)
         ->  Finalize GroupAggregate  (cost=119815.95..125051.14 rows=50 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
               ->  Gather Merge  (cost=119815.95..124601.50 rows=39968 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=118815.89..118840.87 rows=9992 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=118027.19..118152.09 rows=9992 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=4056.30..117462.83 rows=56436 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3999.86 rows=225743 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..3.22 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
 JIT:
   Functions: 23
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(28 rows)

DROP VIEW
query 15 run 5
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=242325.92..242433.85 rows=1 width=103)
   InitPlan 1
     ->  Aggregate  (cost=122509.67..122509.68 rows=1 width=32)
           ->  HashAggregate  (cost=122259.87..122384.77 rows=9992 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=4056.30..120002.44 rows=225743 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3999.86 rows=225743 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=119816.23..125212.77 rows=50 width=103)
         ->  Finalize GroupAggregate  (cost=119815.95..125051.14 rows=50 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
               ->  Gather Merge  (cost=119815.95..124601.50 rows=39968 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=118815.89..118840.87 rows=9992 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=118027.19..118152.09 rows=9992 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=4056.30..117462.83 rows=56436 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..3999.86 rows=225743 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..3.22 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
 JIT:
   Functions: 23
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(28 rows)

DROP VIEW
query 16 run 1
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=27940.75..27940.75 rows=1 width=44)
   ->  Sort  (cost=27940.75..27980.97 rows=16088 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=19886.81..27860.31 rows=16088 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Gather Merge  (cost=19886.81..27097.23 rows=60220 width=40)
                     Workers Planned: 4
                     ->  Sort  (cost=18886.75..18924.39 rows=15055 width=40)
                           Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                           ->  Parallel Hash Join  (cost=6687.59..17842.09 rows=15055 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=348.43..11240.43 rows=100000 width=8)
                                       Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..348.00 rows=1 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=6182.33..6182.33 rows=12546 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..6182.33 rows=12546 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 16 run 2
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=27940.75..27940.75 rows=1 width=44)
   ->  Sort  (cost=27940.75..27980.97 rows=16088 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=19886.81..27860.31 rows=16088 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Gather Merge  (cost=19886.81..27097.23 rows=60220 width=40)
                     Workers Planned: 4
                     ->  Sort  (cost=18886.75..18924.39 rows=15055 width=40)
                           Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                           ->  Parallel Hash Join  (cost=6687.59..17842.09 rows=15055 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=348.43..11240.43 rows=100000 width=8)
                                       Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..348.00 rows=1 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=6182.33..6182.33 rows=12546 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..6182.33 rows=12546 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 16 run 3
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=27940.75..27940.75 rows=1 width=44)
   ->  Sort  (cost=27940.75..27980.97 rows=16088 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=19886.81..27860.31 rows=16088 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Gather Merge  (cost=19886.81..27097.23 rows=60220 width=40)
                     Workers Planned: 4
                     ->  Sort  (cost=18886.75..18924.39 rows=15055 width=40)
                           Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                           ->  Parallel Hash Join  (cost=6687.59..17842.09 rows=15055 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=348.43..11240.43 rows=100000 width=8)
                                       Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..348.00 rows=1 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=6182.33..6182.33 rows=12546 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..6182.33 rows=12546 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 16 run 4
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=27940.75..27940.75 rows=1 width=44)
   ->  Sort  (cost=27940.75..27980.97 rows=16088 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=19886.81..27860.31 rows=16088 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Gather Merge  (cost=19886.81..27097.23 rows=60220 width=40)
                     Workers Planned: 4
                     ->  Sort  (cost=18886.75..18924.39 rows=15055 width=40)
                           Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                           ->  Parallel Hash Join  (cost=6687.59..17842.09 rows=15055 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=348.43..11240.43 rows=100000 width=8)
                                       Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..348.00 rows=1 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=6182.33..6182.33 rows=12546 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..6182.33 rows=12546 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 16 run 5
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=27940.75..27940.75 rows=1 width=44)
   ->  Sort  (cost=27940.75..27980.97 rows=16088 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=19886.81..27860.31 rows=16088 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Gather Merge  (cost=19886.81..27097.23 rows=60220 width=40)
                     Workers Planned: 4
                     ->  Sort  (cost=18886.75..18924.39 rows=15055 width=40)
                           Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                           ->  Parallel Hash Join  (cost=6687.59..17842.09 rows=15055 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=348.43..11240.43 rows=100000 width=8)
                                       Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..348.00 rows=1 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=6182.33..6182.33 rows=12546 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..6182.33 rows=12546 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 17 run 1
SET
SET
SET
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=176305.53..176305.55 rows=1 width=32)
   ->  Finalize Aggregate  (cost=176305.53..176305.55 rows=1 width=32)
         ->  Gather  (cost=176305.31..176305.52 rows=2 width=32)
               Workers Planned: 2
               ->  Partial Aggregate  (cost=175305.31..175305.32 rows=1 width=32)
                     ->  Nested Loop  (cost=5352.71..175303.13 rows=870 width=8)
                           Join Filter: (part.p_partkey = lineitem.l_partkey)
                           ->  Merge Join  (cost=5352.27..175064.27 rows=87 width=40)
                                 Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                                 ->  Sort  (cost=5351.84..5352.06 rows=88 width=4)
                                       Sort Key: part.p_partkey
                                       ->  Parallel Seq Scan on part  (cost=0.00..5349.00 rows=88 width=4)
                                             Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  GroupAggregate  (cost=0.43..169218.63 rows=196996 width=36)
                                       Group Key: lineitem_1.l_partkey
                                       ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.43..136256.38 rows=6001463 width=9)
                           ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.43..2.62 rows=10 width=17)
                                 Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
 JIT:
   Functions: 20
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(21 rows)

query 17 run 2
SET
SET
SET
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=176305.53..176305.55 rows=1 width=32)
   ->  Finalize Aggregate  (cost=176305.53..176305.55 rows=1 width=32)
         ->  Gather  (cost=176305.31..176305.52 rows=2 width=32)
               Workers Planned: 2
               ->  Partial Aggregate  (cost=175305.31..175305.32 rows=1 width=32)
                     ->  Nested Loop  (cost=5352.71..175303.13 rows=870 width=8)
                           Join Filter: (part.p_partkey = lineitem.l_partkey)
                           ->  Merge Join  (cost=5352.27..175064.27 rows=87 width=40)
                                 Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                                 ->  Sort  (cost=5351.84..5352.06 rows=88 width=4)
                                       Sort Key: part.p_partkey
                                       ->  Parallel Seq Scan on part  (cost=0.00..5349.00 rows=88 width=4)
                                             Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  GroupAggregate  (cost=0.43..169218.63 rows=196996 width=36)
                                       Group Key: lineitem_1.l_partkey
                                       ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.43..136256.38 rows=6001463 width=9)
                           ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.43..2.62 rows=10 width=17)
                                 Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
 JIT:
   Functions: 20
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(21 rows)

query 17 run 3
SET
SET
SET
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=176305.53..176305.55 rows=1 width=32)
   ->  Finalize Aggregate  (cost=176305.53..176305.55 rows=1 width=32)
         ->  Gather  (cost=176305.31..176305.52 rows=2 width=32)
               Workers Planned: 2
               ->  Partial Aggregate  (cost=175305.31..175305.32 rows=1 width=32)
                     ->  Nested Loop  (cost=5352.71..175303.13 rows=870 width=8)
                           Join Filter: (part.p_partkey = lineitem.l_partkey)
                           ->  Merge Join  (cost=5352.27..175064.27 rows=87 width=40)
                                 Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                                 ->  Sort  (cost=5351.84..5352.06 rows=88 width=4)
                                       Sort Key: part.p_partkey
                                       ->  Parallel Seq Scan on part  (cost=0.00..5349.00 rows=88 width=4)
                                             Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  GroupAggregate  (cost=0.43..169218.63 rows=196996 width=36)
                                       Group Key: lineitem_1.l_partkey
                                       ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.43..136256.38 rows=6001463 width=9)
                           ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.43..2.62 rows=10 width=17)
                                 Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
 JIT:
   Functions: 20
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(21 rows)

query 17 run 4
SET
SET
SET
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=176305.53..176305.55 rows=1 width=32)
   ->  Finalize Aggregate  (cost=176305.53..176305.55 rows=1 width=32)
         ->  Gather  (cost=176305.31..176305.52 rows=2 width=32)
               Workers Planned: 2
               ->  Partial Aggregate  (cost=175305.31..175305.32 rows=1 width=32)
                     ->  Nested Loop  (cost=5352.71..175303.13 rows=870 width=8)
                           Join Filter: (part.p_partkey = lineitem.l_partkey)
                           ->  Merge Join  (cost=5352.27..175064.27 rows=87 width=40)
                                 Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                                 ->  Sort  (cost=5351.84..5352.06 rows=88 width=4)
                                       Sort Key: part.p_partkey
                                       ->  Parallel Seq Scan on part  (cost=0.00..5349.00 rows=88 width=4)
                                             Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  GroupAggregate  (cost=0.43..169218.63 rows=196996 width=36)
                                       Group Key: lineitem_1.l_partkey
                                       ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.43..136256.38 rows=6001463 width=9)
                           ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.43..2.62 rows=10 width=17)
                                 Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
 JIT:
   Functions: 20
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(21 rows)

query 17 run 5
SET
SET
SET
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=176305.53..176305.55 rows=1 width=32)
   ->  Finalize Aggregate  (cost=176305.53..176305.55 rows=1 width=32)
         ->  Gather  (cost=176305.31..176305.52 rows=2 width=32)
               Workers Planned: 2
               ->  Partial Aggregate  (cost=175305.31..175305.32 rows=1 width=32)
                     ->  Nested Loop  (cost=5352.71..175303.13 rows=870 width=8)
                           Join Filter: (part.p_partkey = lineitem.l_partkey)
                           ->  Merge Join  (cost=5352.27..175064.27 rows=87 width=40)
                                 Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                                 ->  Sort  (cost=5351.84..5352.06 rows=88 width=4)
                                       Sort Key: part.p_partkey
                                       ->  Parallel Seq Scan on part  (cost=0.00..5349.00 rows=88 width=4)
                                             Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  GroupAggregate  (cost=0.43..169218.63 rows=196996 width=36)
                                       Group Key: lineitem_1.l_partkey
                                       ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.43..136256.38 rows=6001463 width=9)
                           ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.43..2.62 rows=10 width=17)
                                 Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
 JIT:
   Functions: 20
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(21 rows)

query 18 run 1
SET
SET
SET
                                                                           QUERY PLAN                                                                            
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=669412.13..669412.38 rows=100 width=71)
   ->  Sort  (cost=669412.13..674414.57 rows=2000976 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=306685.31..592936.26 rows=2000976 width=71)
               Group Key: orders.o_orderkey, customer.c_custkey
               ->  Incremental Sort  (cost=306685.31..552916.74 rows=2000976 width=44)
                     Sort Key: orders.o_orderkey, customer.c_custkey
                     Presorted Key: orders.o_orderkey
                     ->  Merge Join  (cost=306685.19..480406.98 rows=2000976 width=44)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Sort  (cost=306677.42..307927.73 rows=500122 width=43)
                                 Sort Key: orders.o_orderkey
                                 ->  Hash Join  (cost=201964.71..248346.07 rows=500122 width=43)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Hash Join  (cost=194992.71..240061.22 rows=500122 width=24)
                                             Hash Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                             ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=20)
                                             ->  Hash  (cost=188741.18..188741.18 rows=500122 width=4)
                                                   ->  GroupAggregate  (cost=0.43..188741.18 rows=500122 width=4)
                                                         Group Key: lineitem_1.l_orderkey
                                                         Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                         ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.43..136228.38 rows=6001463 width=9)
                                       ->  Hash  (cost=5097.00..5097.00 rows=150000 width=23)
                                             ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=23)
                           ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.43..136228.38 rows=6001463 width=9)
 JIT:
   Functions: 32
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(28 rows)

query 18 run 2
SET
SET
SET
                                                                           QUERY PLAN                                                                            
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=669412.13..669412.38 rows=100 width=71)
   ->  Sort  (cost=669412.13..674414.57 rows=2000976 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=306685.31..592936.26 rows=2000976 width=71)
               Group Key: orders.o_orderkey, customer.c_custkey
               ->  Incremental Sort  (cost=306685.31..552916.74 rows=2000976 width=44)
                     Sort Key: orders.o_orderkey, customer.c_custkey
                     Presorted Key: orders.o_orderkey
                     ->  Merge Join  (cost=306685.19..480406.98 rows=2000976 width=44)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Sort  (cost=306677.42..307927.73 rows=500122 width=43)
                                 Sort Key: orders.o_orderkey
                                 ->  Hash Join  (cost=201964.71..248346.07 rows=500122 width=43)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Hash Join  (cost=194992.71..240061.22 rows=500122 width=24)
                                             Hash Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                             ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=20)
                                             ->  Hash  (cost=188741.18..188741.18 rows=500122 width=4)
                                                   ->  GroupAggregate  (cost=0.43..188741.18 rows=500122 width=4)
                                                         Group Key: lineitem_1.l_orderkey
                                                         Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                         ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.43..136228.38 rows=6001463 width=9)
                                       ->  Hash  (cost=5097.00..5097.00 rows=150000 width=23)
                                             ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=23)
                           ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.43..136228.38 rows=6001463 width=9)
 JIT:
   Functions: 32
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(28 rows)

query 18 run 3
SET
SET
SET
                                                                           QUERY PLAN                                                                            
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=669412.13..669412.38 rows=100 width=71)
   ->  Sort  (cost=669412.13..674414.57 rows=2000976 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=306685.31..592936.26 rows=2000976 width=71)
               Group Key: orders.o_orderkey, customer.c_custkey
               ->  Incremental Sort  (cost=306685.31..552916.74 rows=2000976 width=44)
                     Sort Key: orders.o_orderkey, customer.c_custkey
                     Presorted Key: orders.o_orderkey
                     ->  Merge Join  (cost=306685.19..480406.98 rows=2000976 width=44)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Sort  (cost=306677.42..307927.73 rows=500122 width=43)
                                 Sort Key: orders.o_orderkey
                                 ->  Hash Join  (cost=201964.71..248346.07 rows=500122 width=43)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Hash Join  (cost=194992.71..240061.22 rows=500122 width=24)
                                             Hash Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                             ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=20)
                                             ->  Hash  (cost=188741.18..188741.18 rows=500122 width=4)
                                                   ->  GroupAggregate  (cost=0.43..188741.18 rows=500122 width=4)
                                                         Group Key: lineitem_1.l_orderkey
                                                         Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                         ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.43..136228.38 rows=6001463 width=9)
                                       ->  Hash  (cost=5097.00..5097.00 rows=150000 width=23)
                                             ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=23)
                           ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.43..136228.38 rows=6001463 width=9)
 JIT:
   Functions: 32
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(28 rows)

query 18 run 4
SET
SET
SET
                                                                           QUERY PLAN                                                                            
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=669412.13..669412.38 rows=100 width=71)
   ->  Sort  (cost=669412.13..674414.57 rows=2000976 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=306685.31..592936.26 rows=2000976 width=71)
               Group Key: orders.o_orderkey, customer.c_custkey
               ->  Incremental Sort  (cost=306685.31..552916.74 rows=2000976 width=44)
                     Sort Key: orders.o_orderkey, customer.c_custkey
                     Presorted Key: orders.o_orderkey
                     ->  Merge Join  (cost=306685.19..480406.98 rows=2000976 width=44)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Sort  (cost=306677.42..307927.73 rows=500122 width=43)
                                 Sort Key: orders.o_orderkey
                                 ->  Hash Join  (cost=201964.71..248346.07 rows=500122 width=43)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Hash Join  (cost=194992.71..240061.22 rows=500122 width=24)
                                             Hash Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                             ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=20)
                                             ->  Hash  (cost=188741.18..188741.18 rows=500122 width=4)
                                                   ->  GroupAggregate  (cost=0.43..188741.18 rows=500122 width=4)
                                                         Group Key: lineitem_1.l_orderkey
                                                         Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                         ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.43..136228.38 rows=6001463 width=9)
                                       ->  Hash  (cost=5097.00..5097.00 rows=150000 width=23)
                                             ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=23)
                           ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.43..136228.38 rows=6001463 width=9)
 JIT:
   Functions: 32
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(28 rows)

query 18 run 5
SET
SET
SET
                                                                           QUERY PLAN                                                                            
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=669412.13..669412.38 rows=100 width=71)
   ->  Sort  (cost=669412.13..674414.57 rows=2000976 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=306685.31..592936.26 rows=2000976 width=71)
               Group Key: orders.o_orderkey, customer.c_custkey
               ->  Incremental Sort  (cost=306685.31..552916.74 rows=2000976 width=44)
                     Sort Key: orders.o_orderkey, customer.c_custkey
                     Presorted Key: orders.o_orderkey
                     ->  Merge Join  (cost=306685.19..480406.98 rows=2000976 width=44)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Sort  (cost=306677.42..307927.73 rows=500122 width=43)
                                 Sort Key: orders.o_orderkey
                                 ->  Hash Join  (cost=201964.71..248346.07 rows=500122 width=43)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Hash Join  (cost=194992.71..240061.22 rows=500122 width=24)
                                             Hash Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                             ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=20)
                                             ->  Hash  (cost=188741.18..188741.18 rows=500122 width=4)
                                                   ->  GroupAggregate  (cost=0.43..188741.18 rows=500122 width=4)
                                                         Group Key: lineitem_1.l_orderkey
                                                         Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                         ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.43..136228.38 rows=6001463 width=9)
                                       ->  Hash  (cost=5097.00..5097.00 rows=150000 width=23)
                                             ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=23)
                           ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.43..136228.38 rows=6001463 width=9)
 JIT:
   Functions: 32
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(28 rows)

query 19 run 1
SET
SET
SET


 Limit  (cost=9679.42..9679.43 rows=1 width=32)
   ->  Finalize Aggregate  (cost=9679.42..9679.43 rows=1 width=32)
         ->  Gather  (cost=9679.19..9679.40 rows=2 width=32)
               Workers Planned: 2
               ->  Partial Aggregate  (cost=8679.19..8679.20 rows=1 width=32)
                     ->  Nested Loop  (cost=0.56..8678.85 rows=46 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..7640.67 rows=200 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..5.18 rows=1 width=21)
                                 Index Cond: ((l_partkey = part.p_partkey) AND (l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                                 Filter: ((((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 19 run 2
SET
SET
SET
                                                                                                                                                                                                                                                                                                                                                                                                                                                              QUERY PLAN                                                                                                                                                                                                                                                                                                                                                                                                                                                              

 Limit  (cost=9679.42..9679.43 rows=1 width=32)
   ->  Finalize Aggregate  (cost=9679.42..9679.43 rows=1 width=32)
         ->  Gather  (cost=9679.19..9679.40 rows=2 width=32)
               Workers Planned: 2
               ->  Partial Aggregate  (cost=8679.19..8679.20 rows=1 width=32)
                     ->  Nested Loop  (cost=0.56..8678.85 rows=46 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..7640.67 rows=200 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..5.18 rows=1 width=21)
                                 Index Cond: ((l_partkey = part.p_partkey) AND (l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                                 Filter: ((((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 19 run 3
SET
SET
SET


 Limit  (cost=9679.42..9679.43 rows=1 width=32)
   ->  Finalize Aggregate  (cost=9679.42..9679.43 rows=1 width=32)
         ->  Gather  (cost=9679.19..9679.40 rows=2 width=32)
               Workers Planned: 2
               ->  Partial Aggregate  (cost=8679.19..8679.20 rows=1 width=32)
                     ->  Nested Loop  (cost=0.56..8678.85 rows=46 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..7640.67 rows=200 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..5.18 rows=1 width=21)
                                 Index Cond: ((l_partkey = part.p_partkey) AND (l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                                 Filter: ((((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 19 run 4
SET
SET
SET
                                                                                                                                                                                                                                                                                                                                                                                                                                                              QUERY PLAN                                                                                                                                                                                                                                                                                                                                                                                                                                                              

 Limit  (cost=9679.42..9679.43 rows=1 width=32)
   ->  Finalize Aggregate  (cost=9679.42..9679.43 rows=1 width=32)
         ->  Gather  (cost=9679.19..9679.40 rows=2 width=32)
               Workers Planned: 2
               ->  Partial Aggregate  (cost=8679.19..8679.20 rows=1 width=32)
                     ->  Nested Loop  (cost=0.56..8678.85 rows=46 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..7640.67 rows=200 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..5.18 rows=1 width=21)
                                 Index Cond: ((l_partkey = part.p_partkey) AND (l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                                 Filter: ((((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 19 run 5
SET
SET
SET


 Limit  (cost=9679.42..9679.43 rows=1 width=32)
   ->  Finalize Aggregate  (cost=9679.42..9679.43 rows=1 width=32)
         ->  Gather  (cost=9679.19..9679.40 rows=2 width=32)
               Workers Planned: 2
               ->  Partial Aggregate  (cost=8679.19..8679.20 rows=1 width=32)
                     ->  Nested Loop  (cost=0.56..8678.85 rows=46 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..7640.67 rows=200 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..5.18 rows=1 width=21)
                                 Index Cond: ((l_partkey = part.p_partkey) AND (l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                                 Filter: ((((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 20 run 1
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=215124.13..215124.14 rows=1 width=51)
   ->  Sort  (cost=215124.13..215124.14 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=191581.37..215124.12 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..449.31 rows=400 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=59)
               ->  Materialize  (cost=191581.37..214668.81 rows=1 width=8)
                     ->  Nested Loop  (cost=191581.37..214668.81 rows=1 width=8)
                           ->  Hash Join  (cost=191580.94..209040.31 rows=4897 width=44)
                                 Hash Cond: (lineitem.l_partkey = part.p_partkey)
                                 ->  HashAggregate  (cost=185573.43..201760.01 rows=484864 width=40)
                                       Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                       Planned Partitions: 4
                                       ->  Bitmap Heap Scan on lineitem  (cost=16394.16..142645.47 rows=912754 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..16165.97 rows=912754 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Hash  (cost=5982.26..5982.26 rows=2020 width=4)
                                       ->  Gather Merge  (cost=1000.46..5982.26 rows=2020 width=4)
                                             Workers Planned: 3
                                             ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.42..4744.87 rows=652 width=4)
                                                   Filter: ((p_name)::text ~~ 'olive%'::text)
                           ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.42..1.14 rows=1 width=12)
                                 Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                                 Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
 JIT:
   Functions: 28
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(32 rows)

query 20 run 2
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=215124.13..215124.14 rows=1 width=51)
   ->  Sort  (cost=215124.13..215124.14 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=191581.37..215124.12 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..449.31 rows=400 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=59)
               ->  Materialize  (cost=191581.37..214668.81 rows=1 width=8)
                     ->  Nested Loop  (cost=191581.37..214668.81 rows=1 width=8)
                           ->  Hash Join  (cost=191580.94..209040.31 rows=4897 width=44)
                                 Hash Cond: (lineitem.l_partkey = part.p_partkey)
                                 ->  HashAggregate  (cost=185573.43..201760.01 rows=484864 width=40)
                                       Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                       Planned Partitions: 4
                                       ->  Bitmap Heap Scan on lineitem  (cost=16394.16..142645.47 rows=912754 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..16165.97 rows=912754 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Hash  (cost=5982.26..5982.26 rows=2020 width=4)
                                       ->  Gather Merge  (cost=1000.46..5982.26 rows=2020 width=4)
                                             Workers Planned: 3
                                             ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.42..4744.87 rows=652 width=4)
                                                   Filter: ((p_name)::text ~~ 'olive%'::text)
                           ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.42..1.14 rows=1 width=12)
                                 Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                                 Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
 JIT:
   Functions: 28
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(32 rows)

query 20 run 3
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=215124.13..215124.14 rows=1 width=51)
   ->  Sort  (cost=215124.13..215124.14 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=191581.37..215124.12 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..449.31 rows=400 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=59)
               ->  Materialize  (cost=191581.37..214668.81 rows=1 width=8)
                     ->  Nested Loop  (cost=191581.37..214668.81 rows=1 width=8)
                           ->  Hash Join  (cost=191580.94..209040.31 rows=4897 width=44)
                                 Hash Cond: (lineitem.l_partkey = part.p_partkey)
                                 ->  HashAggregate  (cost=185573.43..201760.01 rows=484864 width=40)
                                       Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                       Planned Partitions: 4
                                       ->  Bitmap Heap Scan on lineitem  (cost=16394.16..142645.47 rows=912754 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..16165.97 rows=912754 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Hash  (cost=5982.26..5982.26 rows=2020 width=4)
                                       ->  Gather Merge  (cost=1000.46..5982.26 rows=2020 width=4)
                                             Workers Planned: 3
                                             ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.42..4744.87 rows=652 width=4)
                                                   Filter: ((p_name)::text ~~ 'olive%'::text)
                           ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.42..1.14 rows=1 width=12)
                                 Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                                 Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
 JIT:
   Functions: 28
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(32 rows)

query 20 run 4
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=215124.13..215124.14 rows=1 width=51)
   ->  Sort  (cost=215124.13..215124.14 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=191581.37..215124.12 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..449.31 rows=400 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=59)
               ->  Materialize  (cost=191581.37..214668.81 rows=1 width=8)
                     ->  Nested Loop  (cost=191581.37..214668.81 rows=1 width=8)
                           ->  Hash Join  (cost=191580.94..209040.31 rows=4897 width=44)
                                 Hash Cond: (lineitem.l_partkey = part.p_partkey)
                                 ->  HashAggregate  (cost=185573.43..201760.01 rows=484864 width=40)
                                       Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                       Planned Partitions: 4
                                       ->  Bitmap Heap Scan on lineitem  (cost=16394.16..142645.47 rows=912754 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..16165.97 rows=912754 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Hash  (cost=5982.26..5982.26 rows=2020 width=4)
                                       ->  Gather Merge  (cost=1000.46..5982.26 rows=2020 width=4)
                                             Workers Planned: 3
                                             ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.42..4744.87 rows=652 width=4)
                                                   Filter: ((p_name)::text ~~ 'olive%'::text)
                           ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.42..1.14 rows=1 width=12)
                                 Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                                 Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
 JIT:
   Functions: 28
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(32 rows)

query 20 run 5
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=215124.13..215124.14 rows=1 width=51)
   ->  Sort  (cost=215124.13..215124.14 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=191581.37..215124.12 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..449.31 rows=400 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=59)
               ->  Materialize  (cost=191581.37..214668.81 rows=1 width=8)
                     ->  Nested Loop  (cost=191581.37..214668.81 rows=1 width=8)
                           ->  Hash Join  (cost=191580.94..209040.31 rows=4897 width=44)
                                 Hash Cond: (lineitem.l_partkey = part.p_partkey)
                                 ->  HashAggregate  (cost=185573.43..201760.01 rows=484864 width=40)
                                       Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                       Planned Partitions: 4
                                       ->  Bitmap Heap Scan on lineitem  (cost=16394.16..142645.47 rows=912754 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..16165.97 rows=912754 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Hash  (cost=5982.26..5982.26 rows=2020 width=4)
                                       ->  Gather Merge  (cost=1000.46..5982.26 rows=2020 width=4)
                                             Workers Planned: 3
                                             ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.42..4744.87 rows=652 width=4)
                                                   Filter: ((p_name)::text ~~ 'olive%'::text)
                           ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.42..1.14 rows=1 width=12)
                                 Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                                 Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
 JIT:
   Functions: 28
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(32 rows)

query 21 run 1
SET
SET
SET
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=57566.95..57566.95 rows=1 width=34)
   ->  Sort  (cost=57566.95..57566.95 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=57566.92..57566.94 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=57566.92..57566.92 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=29584.40..57566.91 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=29583.97..57564.47 rows=1 width=38)
                                 ->  Gather  (cost=29583.54..57562.11 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Parallel Hash Right Anti Join  (cost=28583.54..56562.01 rows=1 width=34)
                                             Hash Cond: (l3.l_orderkey = l1.l_orderkey)
                                             Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                             ->  Parallel Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.43..26020.09 rows=500122 width=8)
                                             ->  Parallel Hash  (cost=28333.05..28333.05 rows=20005 width=34)
                                                   ->  Hash Join  (cost=237.88..28333.05 rows=20005 width=34)
                                                         Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                         ->  Parallel Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.43..26020.09 rows=500122 width=8)
                                                         ->  Hash  (cost=232.45..232.45 rows=400 width=30)
                                                               ->  Nested Loop  (cost=5.38..232.45 rows=400 width=30)
                                                                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                           Filter: (n_name = 'PERU'::bpchar)
                                                                     ->  Bitmap Heap Scan on supplier  (cost=5.38..227.14 rows=400 width=34)
                                                                           Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                           ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..5.29 rows=400 width=0)
                                                                                 Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.36 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.43..2.42 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(32 rows)

query 21 run 2
SET
SET
SET
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=57566.95..57566.95 rows=1 width=34)
   ->  Sort  (cost=57566.95..57566.95 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=57566.92..57566.94 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=57566.92..57566.92 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=29584.40..57566.91 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=29583.97..57564.47 rows=1 width=38)
                                 ->  Gather  (cost=29583.54..57562.11 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Parallel Hash Right Anti Join  (cost=28583.54..56562.01 rows=1 width=34)
                                             Hash Cond: (l3.l_orderkey = l1.l_orderkey)
                                             Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                             ->  Parallel Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.43..26020.09 rows=500122 width=8)
                                             ->  Parallel Hash  (cost=28333.05..28333.05 rows=20005 width=34)
                                                   ->  Hash Join  (cost=237.88..28333.05 rows=20005 width=34)
                                                         Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                         ->  Parallel Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.43..26020.09 rows=500122 width=8)
                                                         ->  Hash  (cost=232.45..232.45 rows=400 width=30)
                                                               ->  Nested Loop  (cost=5.38..232.45 rows=400 width=30)
                                                                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                           Filter: (n_name = 'PERU'::bpchar)
                                                                     ->  Bitmap Heap Scan on supplier  (cost=5.38..227.14 rows=400 width=34)
                                                                           Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                           ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..5.29 rows=400 width=0)
                                                                                 Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.36 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.43..2.42 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(32 rows)

query 21 run 3
SET
SET
SET
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=57566.95..57566.95 rows=1 width=34)
   ->  Sort  (cost=57566.95..57566.95 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=57566.92..57566.94 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=57566.92..57566.92 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=29584.40..57566.91 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=29583.97..57564.47 rows=1 width=38)
                                 ->  Gather  (cost=29583.54..57562.11 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Parallel Hash Right Anti Join  (cost=28583.54..56562.01 rows=1 width=34)
                                             Hash Cond: (l3.l_orderkey = l1.l_orderkey)
                                             Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                             ->  Parallel Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.43..26020.09 rows=500122 width=8)
                                             ->  Parallel Hash  (cost=28333.05..28333.05 rows=20005 width=34)
                                                   ->  Hash Join  (cost=237.88..28333.05 rows=20005 width=34)
                                                         Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                         ->  Parallel Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.43..26020.09 rows=500122 width=8)
                                                         ->  Hash  (cost=232.45..232.45 rows=400 width=30)
                                                               ->  Nested Loop  (cost=5.38..232.45 rows=400 width=30)
                                                                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                           Filter: (n_name = 'PERU'::bpchar)
                                                                     ->  Bitmap Heap Scan on supplier  (cost=5.38..227.14 rows=400 width=34)
                                                                           Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                           ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..5.29 rows=400 width=0)
                                                                                 Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.36 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.43..2.42 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(32 rows)

query 21 run 4
SET
SET
SET
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=57566.95..57566.95 rows=1 width=34)
   ->  Sort  (cost=57566.95..57566.95 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=57566.92..57566.94 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=57566.92..57566.92 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=29584.40..57566.91 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=29583.97..57564.47 rows=1 width=38)
                                 ->  Gather  (cost=29583.54..57562.11 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Parallel Hash Right Anti Join  (cost=28583.54..56562.01 rows=1 width=34)
                                             Hash Cond: (l3.l_orderkey = l1.l_orderkey)
                                             Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                             ->  Parallel Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.43..26020.09 rows=500122 width=8)
                                             ->  Parallel Hash  (cost=28333.05..28333.05 rows=20005 width=34)
                                                   ->  Hash Join  (cost=237.88..28333.05 rows=20005 width=34)
                                                         Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                         ->  Parallel Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.43..26020.09 rows=500122 width=8)
                                                         ->  Hash  (cost=232.45..232.45 rows=400 width=30)
                                                               ->  Nested Loop  (cost=5.38..232.45 rows=400 width=30)
                                                                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                           Filter: (n_name = 'PERU'::bpchar)
                                                                     ->  Bitmap Heap Scan on supplier  (cost=5.38..227.14 rows=400 width=34)
                                                                           Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                           ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..5.29 rows=400 width=0)
                                                                                 Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.36 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.43..2.42 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(32 rows)

query 21 run 5
SET
SET
SET
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=57566.95..57566.95 rows=1 width=34)
   ->  Sort  (cost=57566.95..57566.95 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=57566.92..57566.94 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=57566.92..57566.92 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=29584.40..57566.91 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=29583.97..57564.47 rows=1 width=38)
                                 ->  Gather  (cost=29583.54..57562.11 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Parallel Hash Right Anti Join  (cost=28583.54..56562.01 rows=1 width=34)
                                             Hash Cond: (l3.l_orderkey = l1.l_orderkey)
                                             Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                             ->  Parallel Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.43..26020.09 rows=500122 width=8)
                                             ->  Parallel Hash  (cost=28333.05..28333.05 rows=20005 width=34)
                                                   ->  Hash Join  (cost=237.88..28333.05 rows=20005 width=34)
                                                         Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                         ->  Parallel Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.43..26020.09 rows=500122 width=8)
                                                         ->  Hash  (cost=232.45..232.45 rows=400 width=30)
                                                               ->  Nested Loop  (cost=5.38..232.45 rows=400 width=30)
                                                                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                           Filter: (n_name = 'PERU'::bpchar)
                                                                     ->  Bitmap Heap Scan on supplier  (cost=5.38..227.14 rows=400 width=34)
                                                                           Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                           ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..5.29 rows=400 width=0)
                                                                                 Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.36 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.43..2.42 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(32 rows)

query 22 run 1
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=12515.56..12517.20 rows=1 width=72)
   InitPlan 1
     ->  Finalize Aggregate  (cost=6242.81..6242.82 rows=1 width=32)
           ->  Gather  (cost=6242.59..6242.80 rows=2 width=32)
                 Workers Planned: 2
                 ->  Partial Aggregate  (cost=5242.59..5242.60 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..5237.62 rows=1985 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=6272.74..7505.04 rows=750 width=72)
         Group Key: SUBSTRING(customer.c_phone FROM 1 FOR 2)
         ->  Nested Loop Anti Join  (cost=6272.74..7486.29 rows=750 width=38)
               ->  Gather Merge  (cost=6272.31..6476.13 rows=1750 width=26)
                     Workers Planned: 2
                     ->  Sort  (cost=5272.29..5274.11 rows=729 width=26)
                           Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                           ->  Parallel Seq Scan on customer  (cost=0.00..5237.62 rows=729 width=26)
                                 Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
               ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.02 rows=18 width=4)
                     Index Cond: (o_custkey = customer.c_custkey)
(19 rows)

query 22 run 2
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=12515.56..12517.20 rows=1 width=72)
   InitPlan 1
     ->  Finalize Aggregate  (cost=6242.81..6242.82 rows=1 width=32)
           ->  Gather  (cost=6242.59..6242.80 rows=2 width=32)
                 Workers Planned: 2
                 ->  Partial Aggregate  (cost=5242.59..5242.60 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..5237.62 rows=1985 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=6272.74..7505.04 rows=750 width=72)
         Group Key: SUBSTRING(customer.c_phone FROM 1 FOR 2)
         ->  Nested Loop Anti Join  (cost=6272.74..7486.29 rows=750 width=38)
               ->  Gather Merge  (cost=6272.31..6476.13 rows=1750 width=26)
                     Workers Planned: 2
                     ->  Sort  (cost=5272.29..5274.11 rows=729 width=26)
                           Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                           ->  Parallel Seq Scan on customer  (cost=0.00..5237.62 rows=729 width=26)
                                 Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
               ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.02 rows=18 width=4)
                     Index Cond: (o_custkey = customer.c_custkey)
(19 rows)

query 22 run 3
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=12515.56..12517.20 rows=1 width=72)
   InitPlan 1
     ->  Finalize Aggregate  (cost=6242.81..6242.82 rows=1 width=32)
           ->  Gather  (cost=6242.59..6242.80 rows=2 width=32)
                 Workers Planned: 2
                 ->  Partial Aggregate  (cost=5242.59..5242.60 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..5237.62 rows=1985 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=6272.74..7505.04 rows=750 width=72)
         Group Key: SUBSTRING(customer.c_phone FROM 1 FOR 2)
         ->  Nested Loop Anti Join  (cost=6272.74..7486.29 rows=750 width=38)
               ->  Gather Merge  (cost=6272.31..6476.13 rows=1750 width=26)
                     Workers Planned: 2
                     ->  Sort  (cost=5272.29..5274.11 rows=729 width=26)
                           Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                           ->  Parallel Seq Scan on customer  (cost=0.00..5237.62 rows=729 width=26)
                                 Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
               ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.02 rows=18 width=4)
                     Index Cond: (o_custkey = customer.c_custkey)
(19 rows)

query 22 run 4
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=12515.56..12517.20 rows=1 width=72)
   InitPlan 1
     ->  Finalize Aggregate  (cost=6242.81..6242.82 rows=1 width=32)
           ->  Gather  (cost=6242.59..6242.80 rows=2 width=32)
                 Workers Planned: 2
                 ->  Partial Aggregate  (cost=5242.59..5242.60 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..5237.62 rows=1985 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=6272.74..7505.04 rows=750 width=72)
         Group Key: SUBSTRING(customer.c_phone FROM 1 FOR 2)
         ->  Nested Loop Anti Join  (cost=6272.74..7486.29 rows=750 width=38)
               ->  Gather Merge  (cost=6272.31..6476.13 rows=1750 width=26)
                     Workers Planned: 2
                     ->  Sort  (cost=5272.29..5274.11 rows=729 width=26)
                           Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                           ->  Parallel Seq Scan on customer  (cost=0.00..5237.62 rows=729 width=26)
                                 Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
               ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.02 rows=18 width=4)
                     Index Cond: (o_custkey = customer.c_custkey)
(19 rows)

query 22 run 5
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=12515.56..12517.20 rows=1 width=72)
   InitPlan 1
     ->  Finalize Aggregate  (cost=6242.81..6242.82 rows=1 width=32)
           ->  Gather  (cost=6242.59..6242.80 rows=2 width=32)
                 Workers Planned: 2
                 ->  Partial Aggregate  (cost=5242.59..5242.60 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..5237.62 rows=1985 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=6272.74..7505.04 rows=750 width=72)
         Group Key: SUBSTRING(customer.c_phone FROM 1 FOR 2)
         ->  Nested Loop Anti Join  (cost=6272.74..7486.29 rows=750 width=38)
               ->  Gather Merge  (cost=6272.31..6476.13 rows=1750 width=26)
                     Workers Planned: 2
                     ->  Sort  (cost=5272.29..5274.11 rows=729 width=26)
                           Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                           ->  Parallel Seq Scan on customer  (cost=0.00..5237.62 rows=729 width=26)
                                 Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
               ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.02 rows=18 width=4)
                     Index Cond: (o_custkey = customer.c_custkey)
(19 rows)

