query 1 run 1
SET
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=394974.96..394974.97 rows=1 width=236)
   ->  Sort  (cost=394974.96..394974.98 rows=6 width=236)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=394974.77..394974.93 rows=6 width=236)
               Group Key: l_returnflag, l_linestatus
               ->  Seq Scan on lineitem  (cost=0.00..187574.67 rows=5925717 width=25)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(7 rows)

query 1 run 2
SET
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=394974.96..394974.97 rows=1 width=236)
   ->  Sort  (cost=394974.96..394974.98 rows=6 width=236)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=394974.77..394974.93 rows=6 width=236)
               Group Key: l_returnflag, l_linestatus
               ->  Seq Scan on lineitem  (cost=0.00..187574.67 rows=5925717 width=25)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(7 rows)

query 1 run 3
SET
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=394974.96..394974.97 rows=1 width=236)
   ->  Sort  (cost=394974.96..394974.98 rows=6 width=236)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=394974.77..394974.93 rows=6 width=236)
               Group Key: l_returnflag, l_linestatus
               ->  Seq Scan on lineitem  (cost=0.00..187574.67 rows=5925717 width=25)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(7 rows)

query 1 run 4
SET
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=394974.96..394974.97 rows=1 width=236)
   ->  Sort  (cost=394974.96..394974.98 rows=6 width=236)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=394974.77..394974.93 rows=6 width=236)
               Group Key: l_returnflag, l_linestatus
               ->  Seq Scan on lineitem  (cost=0.00..187574.67 rows=5925717 width=25)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(7 rows)

query 1 run 5
SET
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=394974.96..394974.97 rows=1 width=236)
   ->  Sort  (cost=394974.96..394974.98 rows=6 width=236)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=394974.77..394974.93 rows=6 width=236)
               Group Key: l_returnflag, l_linestatus
               ->  Seq Scan on lineitem  (cost=0.00..187574.67 rows=5925717 width=25)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(7 rows)

query 2 run 1
SET
SET
SET
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=18586.51..18586.52 rows=1 width=192)
   ->  Sort  (cost=18586.51..18586.52 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=14.58..18586.50 rows=1 width=192)
               Join Filter: (supplier.s_nationkey = nation.n_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=14.58..18583.80 rows=1 width=170)
                     ->  Nested Loop  (cost=14.58..18583.80 rows=1 width=170)
                           ->  Nested Loop  (cost=14.30..18582.53 rows=1 width=34)
                                 ->  Index Only Scan using q2_idx_1 on part  (cost=0.42..5441.42 rows=837 width=30)
                                       Index Cond: (p_size = 16)
                                       Filter: ((p_type)::text ~~ '%NICKEL'::text)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=13.88..15.69 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=13.44..13.45 rows=1 width=32)
                                               ->  Nested Loop  (cost=0.85..13.44 rows=1 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Nested Loop  (cost=0.85..12.33 rows=4 width=10)
                                                           ->  Nested Loop  (cost=0.71..11.71 rows=4 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.42..2.49 rows=4 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.29..2.30 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                                                 Index Cond: (n_nationkey = supplier_1.s_nationkey)
                           ->  Index Scan using supplier_pkey on supplier  (cost=0.29..1.27 rows=1 width=144)
                                 Index Cond: (s_suppkey = partsupp.ps_suppkey)
(34 rows)

query 2 run 2
SET
SET
SET
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=18586.51..18586.52 rows=1 width=192)
   ->  Sort  (cost=18586.51..18586.52 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=14.58..18586.50 rows=1 width=192)
               Join Filter: (supplier.s_nationkey = nation.n_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=14.58..18583.80 rows=1 width=170)
                     ->  Nested Loop  (cost=14.58..18583.80 rows=1 width=170)
                           ->  Nested Loop  (cost=14.30..18582.53 rows=1 width=34)
                                 ->  Index Only Scan using q2_idx_1 on part  (cost=0.42..5441.42 rows=837 width=30)
                                       Index Cond: (p_size = 16)
                                       Filter: ((p_type)::text ~~ '%NICKEL'::text)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=13.88..15.69 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=13.44..13.45 rows=1 width=32)
                                               ->  Nested Loop  (cost=0.85..13.44 rows=1 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Nested Loop  (cost=0.85..12.33 rows=4 width=10)
                                                           ->  Nested Loop  (cost=0.71..11.71 rows=4 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.42..2.49 rows=4 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.29..2.30 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                                                 Index Cond: (n_nationkey = supplier_1.s_nationkey)
                           ->  Index Scan using supplier_pkey on supplier  (cost=0.29..1.27 rows=1 width=144)
                                 Index Cond: (s_suppkey = partsupp.ps_suppkey)
(34 rows)

query 2 run 3
SET
SET
SET
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=18586.51..18586.52 rows=1 width=192)
   ->  Sort  (cost=18586.51..18586.52 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=14.58..18586.50 rows=1 width=192)
               Join Filter: (supplier.s_nationkey = nation.n_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=14.58..18583.80 rows=1 width=170)
                     ->  Nested Loop  (cost=14.58..18583.80 rows=1 width=170)
                           ->  Nested Loop  (cost=14.30..18582.53 rows=1 width=34)
                                 ->  Index Only Scan using q2_idx_1 on part  (cost=0.42..5441.42 rows=837 width=30)
                                       Index Cond: (p_size = 16)
                                       Filter: ((p_type)::text ~~ '%NICKEL'::text)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=13.88..15.69 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=13.44..13.45 rows=1 width=32)
                                               ->  Nested Loop  (cost=0.85..13.44 rows=1 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Nested Loop  (cost=0.85..12.33 rows=4 width=10)
                                                           ->  Nested Loop  (cost=0.71..11.71 rows=4 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.42..2.49 rows=4 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.29..2.30 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                                                 Index Cond: (n_nationkey = supplier_1.s_nationkey)
                           ->  Index Scan using supplier_pkey on supplier  (cost=0.29..1.27 rows=1 width=144)
                                 Index Cond: (s_suppkey = partsupp.ps_suppkey)
(34 rows)

query 2 run 4
SET
SET
SET
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=18586.51..18586.52 rows=1 width=192)
   ->  Sort  (cost=18586.51..18586.52 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=14.58..18586.50 rows=1 width=192)
               Join Filter: (supplier.s_nationkey = nation.n_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=14.58..18583.80 rows=1 width=170)
                     ->  Nested Loop  (cost=14.58..18583.80 rows=1 width=170)
                           ->  Nested Loop  (cost=14.30..18582.53 rows=1 width=34)
                                 ->  Index Only Scan using q2_idx_1 on part  (cost=0.42..5441.42 rows=837 width=30)
                                       Index Cond: (p_size = 16)
                                       Filter: ((p_type)::text ~~ '%NICKEL'::text)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=13.88..15.69 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=13.44..13.45 rows=1 width=32)
                                               ->  Nested Loop  (cost=0.85..13.44 rows=1 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Nested Loop  (cost=0.85..12.33 rows=4 width=10)
                                                           ->  Nested Loop  (cost=0.71..11.71 rows=4 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.42..2.49 rows=4 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.29..2.30 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                                                 Index Cond: (n_nationkey = supplier_1.s_nationkey)
                           ->  Index Scan using supplier_pkey on supplier  (cost=0.29..1.27 rows=1 width=144)
                                 Index Cond: (s_suppkey = partsupp.ps_suppkey)
(34 rows)

query 2 run 5
SET
SET
SET
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=18586.51..18586.52 rows=1 width=192)
   ->  Sort  (cost=18586.51..18586.52 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=14.58..18586.50 rows=1 width=192)
               Join Filter: (supplier.s_nationkey = nation.n_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=14.58..18583.80 rows=1 width=170)
                     ->  Nested Loop  (cost=14.58..18583.80 rows=1 width=170)
                           ->  Nested Loop  (cost=14.30..18582.53 rows=1 width=34)
                                 ->  Index Only Scan using q2_idx_1 on part  (cost=0.42..5441.42 rows=837 width=30)
                                       Index Cond: (p_size = 16)
                                       Filter: ((p_type)::text ~~ '%NICKEL'::text)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=13.88..15.69 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=13.44..13.45 rows=1 width=32)
                                               ->  Nested Loop  (cost=0.85..13.44 rows=1 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Nested Loop  (cost=0.85..12.33 rows=4 width=10)
                                                           ->  Nested Loop  (cost=0.71..11.71 rows=4 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.42..2.49 rows=4 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.29..2.30 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Index Scan using nation_pkey on nation nation_1  (cost=0.14..0.16 rows=1 width=8)
                                                                 Index Cond: (n_nationkey = supplier_1.s_nationkey)
                           ->  Index Scan using supplier_pkey on supplier  (cost=0.29..1.27 rows=1 width=144)
                                 Index Cond: (s_suppkey = partsupp.ps_suppkey)
(34 rows)

query 3 run 1
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=286579.99..286580.02 rows=10 width=44)
   ->  Sort  (cost=286579.99..287351.43 rows=308575 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  HashAggregate  (cost=272438.50..279911.80 rows=308575 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               Planned Partitions: 4
               ->  Hash Join  (cost=51669.88..254406.15 rows=308575 width=24)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     ->  Seq Scan on lineitem  (cost=0.00..187574.67 rows=3220385 width=16)
                           Filter: (l_shipdate > '1995-03-07'::date)
                     ->  Hash  (cost=49873.27..49873.27 rows=143729 width=12)
                           ->  Hash Join  (cost=12759.21..49873.27 rows=143729 width=12)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Bitmap Heap Scan on orders  (cost=6916.08..42123.94 rows=726149 width=16)
                                       Recheck Cond: (o_orderdate < '1995-03-07'::date)
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6734.54 rows=726149 width=0)
                                             Index Cond: (o_orderdate < '1995-03-07'::date)
                                 ->  Hash  (cost=5472.00..5472.00 rows=29690 width=4)
                                       ->  Seq Scan on customer  (cost=0.00..5472.00 rows=29690 width=4)
                                             Filter: (c_mktsegment = 'BUILDING'::bpchar)
(20 rows)

query 3 run 2
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=286579.99..286580.02 rows=10 width=44)
   ->  Sort  (cost=286579.99..287351.43 rows=308575 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  HashAggregate  (cost=272438.50..279911.80 rows=308575 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               Planned Partitions: 4
               ->  Hash Join  (cost=51669.88..254406.15 rows=308575 width=24)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     ->  Seq Scan on lineitem  (cost=0.00..187574.67 rows=3220385 width=16)
                           Filter: (l_shipdate > '1995-03-07'::date)
                     ->  Hash  (cost=49873.27..49873.27 rows=143729 width=12)
                           ->  Hash Join  (cost=12759.21..49873.27 rows=143729 width=12)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Bitmap Heap Scan on orders  (cost=6916.08..42123.94 rows=726149 width=16)
                                       Recheck Cond: (o_orderdate < '1995-03-07'::date)
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6734.54 rows=726149 width=0)
                                             Index Cond: (o_orderdate < '1995-03-07'::date)
                                 ->  Hash  (cost=5472.00..5472.00 rows=29690 width=4)
                                       ->  Seq Scan on customer  (cost=0.00..5472.00 rows=29690 width=4)
                                             Filter: (c_mktsegment = 'BUILDING'::bpchar)
(20 rows)

query 3 run 3
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=286579.99..286580.02 rows=10 width=44)
   ->  Sort  (cost=286579.99..287351.43 rows=308575 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  HashAggregate  (cost=272438.50..279911.80 rows=308575 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               Planned Partitions: 4
               ->  Hash Join  (cost=51669.88..254406.15 rows=308575 width=24)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     ->  Seq Scan on lineitem  (cost=0.00..187574.67 rows=3220385 width=16)
                           Filter: (l_shipdate > '1995-03-07'::date)
                     ->  Hash  (cost=49873.27..49873.27 rows=143729 width=12)
                           ->  Hash Join  (cost=12759.21..49873.27 rows=143729 width=12)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Bitmap Heap Scan on orders  (cost=6916.08..42123.94 rows=726149 width=16)
                                       Recheck Cond: (o_orderdate < '1995-03-07'::date)
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6734.54 rows=726149 width=0)
                                             Index Cond: (o_orderdate < '1995-03-07'::date)
                                 ->  Hash  (cost=5472.00..5472.00 rows=29690 width=4)
                                       ->  Seq Scan on customer  (cost=0.00..5472.00 rows=29690 width=4)
                                             Filter: (c_mktsegment = 'BUILDING'::bpchar)
(20 rows)

query 3 run 4
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=286579.99..286580.02 rows=10 width=44)
   ->  Sort  (cost=286579.99..287351.43 rows=308575 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  HashAggregate  (cost=272438.50..279911.80 rows=308575 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               Planned Partitions: 4
               ->  Hash Join  (cost=51669.88..254406.15 rows=308575 width=24)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     ->  Seq Scan on lineitem  (cost=0.00..187574.67 rows=3220385 width=16)
                           Filter: (l_shipdate > '1995-03-07'::date)
                     ->  Hash  (cost=49873.27..49873.27 rows=143729 width=12)
                           ->  Hash Join  (cost=12759.21..49873.27 rows=143729 width=12)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Bitmap Heap Scan on orders  (cost=6916.08..42123.94 rows=726149 width=16)
                                       Recheck Cond: (o_orderdate < '1995-03-07'::date)
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6734.54 rows=726149 width=0)
                                             Index Cond: (o_orderdate < '1995-03-07'::date)
                                 ->  Hash  (cost=5472.00..5472.00 rows=29690 width=4)
                                       ->  Seq Scan on customer  (cost=0.00..5472.00 rows=29690 width=4)
                                             Filter: (c_mktsegment = 'BUILDING'::bpchar)
(20 rows)

query 3 run 5
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=286579.99..286580.02 rows=10 width=44)
   ->  Sort  (cost=286579.99..287351.43 rows=308575 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  HashAggregate  (cost=272438.50..279911.80 rows=308575 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               Planned Partitions: 4
               ->  Hash Join  (cost=51669.88..254406.15 rows=308575 width=24)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     ->  Seq Scan on lineitem  (cost=0.00..187574.67 rows=3220385 width=16)
                           Filter: (l_shipdate > '1995-03-07'::date)
                     ->  Hash  (cost=49873.27..49873.27 rows=143729 width=12)
                           ->  Hash Join  (cost=12759.21..49873.27 rows=143729 width=12)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Bitmap Heap Scan on orders  (cost=6916.08..42123.94 rows=726149 width=16)
                                       Recheck Cond: (o_orderdate < '1995-03-07'::date)
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6734.54 rows=726149 width=0)
                                             Index Cond: (o_orderdate < '1995-03-07'::date)
                                 ->  Hash  (cost=5472.00..5472.00 rows=29690 width=4)
                                       ->  Seq Scan on customer  (cost=0.00..5472.00 rows=29690 width=4)
                                             Filter: (c_mktsegment = 'BUILDING'::bpchar)
(20 rows)

query 4 run 1
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=76086.14..76086.14 rows=1 width=24)
   ->  Sort  (cost=76086.14..76086.15 rows=5 width=24)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=76086.07..76086.12 rows=5 width=24)
               Group Key: orders.o_orderpriority
               ->  Merge Semi Join  (cost=32179.50..75800.94 rows=57026 width=16)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Sort  (cost=32178.20..32320.76 rows=57026 width=20)
                           Sort Key: orders.o_orderkey
                           ->  Bitmap Heap Scan on orders  (cost=686.94..27673.33 rows=57026 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..672.69 rows=57026 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Only Scan using q4_idx_1 on lineitem  (cost=0.43..37576.30 rows=2000391 width=4)
(14 rows)

query 4 run 2
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=76086.14..76086.14 rows=1 width=24)
   ->  Sort  (cost=76086.14..76086.15 rows=5 width=24)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=76086.07..76086.12 rows=5 width=24)
               Group Key: orders.o_orderpriority
               ->  Merge Semi Join  (cost=32179.50..75800.94 rows=57026 width=16)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Sort  (cost=32178.20..32320.76 rows=57026 width=20)
                           Sort Key: orders.o_orderkey
                           ->  Bitmap Heap Scan on orders  (cost=686.94..27673.33 rows=57026 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..672.69 rows=57026 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Only Scan using q4_idx_1 on lineitem  (cost=0.43..37576.30 rows=2000391 width=4)
(14 rows)

query 4 run 3
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=76086.14..76086.14 rows=1 width=24)
   ->  Sort  (cost=76086.14..76086.15 rows=5 width=24)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=76086.07..76086.12 rows=5 width=24)
               Group Key: orders.o_orderpriority
               ->  Merge Semi Join  (cost=32179.50..75800.94 rows=57026 width=16)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Sort  (cost=32178.20..32320.76 rows=57026 width=20)
                           Sort Key: orders.o_orderkey
                           ->  Bitmap Heap Scan on orders  (cost=686.94..27673.33 rows=57026 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..672.69 rows=57026 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Only Scan using q4_idx_1 on lineitem  (cost=0.43..37576.30 rows=2000391 width=4)
(14 rows)

query 4 run 4
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=76086.14..76086.14 rows=1 width=24)
   ->  Sort  (cost=76086.14..76086.15 rows=5 width=24)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=76086.07..76086.12 rows=5 width=24)
               Group Key: orders.o_orderpriority
               ->  Merge Semi Join  (cost=32179.50..75800.94 rows=57026 width=16)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Sort  (cost=32178.20..32320.76 rows=57026 width=20)
                           Sort Key: orders.o_orderkey
                           ->  Bitmap Heap Scan on orders  (cost=686.94..27673.33 rows=57026 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..672.69 rows=57026 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Only Scan using q4_idx_1 on lineitem  (cost=0.43..37576.30 rows=2000391 width=4)
(14 rows)

query 4 run 5
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=76086.14..76086.14 rows=1 width=24)
   ->  Sort  (cost=76086.14..76086.15 rows=5 width=24)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=76086.07..76086.12 rows=5 width=24)
               Group Key: orders.o_orderpriority
               ->  Merge Semi Join  (cost=32179.50..75800.94 rows=57026 width=16)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Sort  (cost=32178.20..32320.76 rows=57026 width=20)
                           Sort Key: orders.o_orderkey
                           ->  Bitmap Heap Scan on orders  (cost=686.94..27673.33 rows=57026 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..672.69 rows=57026 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Only Scan using q4_idx_1 on lineitem  (cost=0.43..37576.30 rows=2000391 width=4)
(14 rows)

query 5 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=148106.78..148106.79 rows=1 width=58)
   ->  Sort  (cost=148106.78..148106.85 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=148016.06..148106.66 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=148016.06..148034.12 rows=7223 width=38)
                     Sort Key: nation.n_name
                     ->  Hash Join  (cost=9526.94..147553.12 rows=7223 width=38)
                           Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                           ->  Nested Loop  (cost=9053.94..146131.72 rows=180646 width=50)
                                 ->  Hash Join  (cost=9053.51..39869.09 rows=45153 width=38)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=2716.50..32233.94 rows=225763 width=8)
                                             Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..2660.06 rows=225763 width=0)
                                                   Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Hash  (cost=5962.01..5962.01 rows=30000 width=38)
                                             ->  Hash Join  (cost=2.51..5962.01 rows=30000 width=38)
                                                   Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=8)
                                                   ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                         ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                               Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.43..2.31 rows=4 width=20)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
(31 rows)

query 5 run 2
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=148106.78..148106.79 rows=1 width=58)
   ->  Sort  (cost=148106.78..148106.85 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=148016.06..148106.66 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=148016.06..148034.12 rows=7223 width=38)
                     Sort Key: nation.n_name
                     ->  Hash Join  (cost=9526.94..147553.12 rows=7223 width=38)
                           Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                           ->  Nested Loop  (cost=9053.94..146131.72 rows=180646 width=50)
                                 ->  Hash Join  (cost=9053.51..39869.09 rows=45153 width=38)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=2716.50..32233.94 rows=225763 width=8)
                                             Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..2660.06 rows=225763 width=0)
                                                   Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Hash  (cost=5962.01..5962.01 rows=30000 width=38)
                                             ->  Hash Join  (cost=2.51..5962.01 rows=30000 width=38)
                                                   Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=8)
                                                   ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                         ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                               Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.43..2.31 rows=4 width=20)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
(31 rows)

query 5 run 3
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=148106.78..148106.79 rows=1 width=58)
   ->  Sort  (cost=148106.78..148106.85 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=148016.06..148106.66 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=148016.06..148034.12 rows=7223 width=38)
                     Sort Key: nation.n_name
                     ->  Hash Join  (cost=9526.94..147553.12 rows=7223 width=38)
                           Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                           ->  Nested Loop  (cost=9053.94..146131.72 rows=180646 width=50)
                                 ->  Hash Join  (cost=9053.51..39869.09 rows=45153 width=38)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=2716.50..32233.94 rows=225763 width=8)
                                             Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..2660.06 rows=225763 width=0)
                                                   Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Hash  (cost=5962.01..5962.01 rows=30000 width=38)
                                             ->  Hash Join  (cost=2.51..5962.01 rows=30000 width=38)
                                                   Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=8)
                                                   ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                         ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                               Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.43..2.31 rows=4 width=20)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
(31 rows)

query 5 run 4
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=148106.78..148106.79 rows=1 width=58)
   ->  Sort  (cost=148106.78..148106.85 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=148016.06..148106.66 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=148016.06..148034.12 rows=7223 width=38)
                     Sort Key: nation.n_name
                     ->  Hash Join  (cost=9526.94..147553.12 rows=7223 width=38)
                           Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                           ->  Nested Loop  (cost=9053.94..146131.72 rows=180646 width=50)
                                 ->  Hash Join  (cost=9053.51..39869.09 rows=45153 width=38)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=2716.50..32233.94 rows=225763 width=8)
                                             Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..2660.06 rows=225763 width=0)
                                                   Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Hash  (cost=5962.01..5962.01 rows=30000 width=38)
                                             ->  Hash Join  (cost=2.51..5962.01 rows=30000 width=38)
                                                   Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=8)
                                                   ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                         ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                               Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.43..2.31 rows=4 width=20)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
(31 rows)

query 5 run 5
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=148106.78..148106.79 rows=1 width=58)
   ->  Sort  (cost=148106.78..148106.85 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=148016.06..148106.66 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=148016.06..148034.12 rows=7223 width=38)
                     Sort Key: nation.n_name
                     ->  Hash Join  (cost=9526.94..147553.12 rows=7223 width=38)
                           Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                           ->  Nested Loop  (cost=9053.94..146131.72 rows=180646 width=50)
                                 ->  Hash Join  (cost=9053.51..39869.09 rows=45153 width=38)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=2716.50..32233.94 rows=225763 width=8)
                                             Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..2660.06 rows=225763 width=0)
                                                   Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Hash  (cost=5962.01..5962.01 rows=30000 width=38)
                                             ->  Hash Join  (cost=2.51..5962.01 rows=30000 width=38)
                                                   Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=8)
                                                   ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                         ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                               Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.43..2.31 rows=4 width=20)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
(31 rows)

query 6 run 1
SET
SET
SET
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=116590.84..116590.85 rows=1 width=32)
   ->  Aggregate  (cost=116590.84..116590.85 rows=1 width=32)
         ->  Bitmap Heap Scan on lineitem  (cost=22551.44..115998.53 rows=118460 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..22521.83 rows=118460 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(6 rows)

query 6 run 2
SET
SET
SET
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=116590.84..116590.85 rows=1 width=32)
   ->  Aggregate  (cost=116590.84..116590.85 rows=1 width=32)
         ->  Bitmap Heap Scan on lineitem  (cost=22551.44..115998.53 rows=118460 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..22521.83 rows=118460 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(6 rows)

query 6 run 3
SET
SET
SET
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=116590.84..116590.85 rows=1 width=32)
   ->  Aggregate  (cost=116590.84..116590.85 rows=1 width=32)
         ->  Bitmap Heap Scan on lineitem  (cost=22551.44..115998.53 rows=118460 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..22521.83 rows=118460 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(6 rows)

query 6 run 4
SET
SET
SET
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=116590.84..116590.85 rows=1 width=32)
   ->  Aggregate  (cost=116590.84..116590.85 rows=1 width=32)
         ->  Bitmap Heap Scan on lineitem  (cost=22551.44..115998.53 rows=118460 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..22521.83 rows=118460 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(6 rows)

query 6 run 5
SET
SET
SET
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=116590.84..116590.85 rows=1 width=32)
   ->  Aggregate  (cost=116590.84..116590.85 rows=1 width=32)
         ->  Bitmap Heap Scan on lineitem  (cost=22551.44..115998.53 rows=118460 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..22521.83 rows=118460 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(6 rows)

query 7 run 1
SET
SET
SET
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=237597.12..237597.15 rows=1 width=116)
   ->  GroupAggregate  (cost=237597.12..237794.20 rows=6064 width=116)
         Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
         ->  Sort  (cost=237597.12..237612.28 rows=6064 width=96)
               Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
               ->  Hash Join  (cost=88248.41..237216.11 rows=6064 width=96)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     ->  Hash Join  (cost=33083.51..181256.59 rows=145703 width=46)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Bitmap Heap Scan on lineitem  (cost=32718.41..172603.25 rows=1821656 width=24)
                                 Recheck Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..32262.99 rows=1821656 width=0)
                                       Index Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=355.10..355.10 rows=800 width=30)
                                 ->  Hash Join  (cost=1.40..355.10 rows=800 width=30)
                                       Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                       ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                             ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                   Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                     ->  Hash  (cost=53664.90..53664.90 rows=120000 width=30)
                           ->  Hash Join  (cost=5708.90..53664.90 rows=120000 width=30)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=8)
                                 ->  Hash  (cost=5558.90..5558.90 rows=12000 width=30)
                                       ->  Hash Join  (cost=1.40..5558.90 rows=12000 width=30)
                                             Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
(32 rows)

query 7 run 2
SET
SET
SET
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=237597.12..237597.15 rows=1 width=116)
   ->  GroupAggregate  (cost=237597.12..237794.20 rows=6064 width=116)
         Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
         ->  Sort  (cost=237597.12..237612.28 rows=6064 width=96)
               Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
               ->  Hash Join  (cost=88248.41..237216.11 rows=6064 width=96)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     ->  Hash Join  (cost=33083.51..181256.59 rows=145703 width=46)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Bitmap Heap Scan on lineitem  (cost=32718.41..172603.25 rows=1821656 width=24)
                                 Recheck Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..32262.99 rows=1821656 width=0)
                                       Index Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=355.10..355.10 rows=800 width=30)
                                 ->  Hash Join  (cost=1.40..355.10 rows=800 width=30)
                                       Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                       ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                             ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                   Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                     ->  Hash  (cost=53664.90..53664.90 rows=120000 width=30)
                           ->  Hash Join  (cost=5708.90..53664.90 rows=120000 width=30)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=8)
                                 ->  Hash  (cost=5558.90..5558.90 rows=12000 width=30)
                                       ->  Hash Join  (cost=1.40..5558.90 rows=12000 width=30)
                                             Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
(32 rows)

query 7 run 3
SET
SET
SET
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=237597.12..237597.15 rows=1 width=116)
   ->  GroupAggregate  (cost=237597.12..237794.20 rows=6064 width=116)
         Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
         ->  Sort  (cost=237597.12..237612.28 rows=6064 width=96)
               Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
               ->  Hash Join  (cost=88248.41..237216.11 rows=6064 width=96)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     ->  Hash Join  (cost=33083.51..181256.59 rows=145703 width=46)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Bitmap Heap Scan on lineitem  (cost=32718.41..172603.25 rows=1821656 width=24)
                                 Recheck Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..32262.99 rows=1821656 width=0)
                                       Index Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=355.10..355.10 rows=800 width=30)
                                 ->  Hash Join  (cost=1.40..355.10 rows=800 width=30)
                                       Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                       ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                             ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                   Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                     ->  Hash  (cost=53664.90..53664.90 rows=120000 width=30)
                           ->  Hash Join  (cost=5708.90..53664.90 rows=120000 width=30)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=8)
                                 ->  Hash  (cost=5558.90..5558.90 rows=12000 width=30)
                                       ->  Hash Join  (cost=1.40..5558.90 rows=12000 width=30)
                                             Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
(32 rows)

query 7 run 4
SET
SET
SET
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=237597.12..237597.15 rows=1 width=116)
   ->  GroupAggregate  (cost=237597.12..237794.20 rows=6064 width=116)
         Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
         ->  Sort  (cost=237597.12..237612.28 rows=6064 width=96)
               Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
               ->  Hash Join  (cost=88248.41..237216.11 rows=6064 width=96)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     ->  Hash Join  (cost=33083.51..181256.59 rows=145703 width=46)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Bitmap Heap Scan on lineitem  (cost=32718.41..172603.25 rows=1821656 width=24)
                                 Recheck Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..32262.99 rows=1821656 width=0)
                                       Index Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=355.10..355.10 rows=800 width=30)
                                 ->  Hash Join  (cost=1.40..355.10 rows=800 width=30)
                                       Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                       ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                             ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                   Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                     ->  Hash  (cost=53664.90..53664.90 rows=120000 width=30)
                           ->  Hash Join  (cost=5708.90..53664.90 rows=120000 width=30)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=8)
                                 ->  Hash  (cost=5558.90..5558.90 rows=12000 width=30)
                                       ->  Hash Join  (cost=1.40..5558.90 rows=12000 width=30)
                                             Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
(32 rows)

query 7 run 5
SET
SET
SET
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=237597.12..237597.15 rows=1 width=116)
   ->  GroupAggregate  (cost=237597.12..237794.20 rows=6064 width=116)
         Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
         ->  Sort  (cost=237597.12..237612.28 rows=6064 width=96)
               Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
               ->  Hash Join  (cost=88248.41..237216.11 rows=6064 width=96)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     ->  Hash Join  (cost=33083.51..181256.59 rows=145703 width=46)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Bitmap Heap Scan on lineitem  (cost=32718.41..172603.25 rows=1821656 width=24)
                                 Recheck Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..32262.99 rows=1821656 width=0)
                                       Index Cond: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=355.10..355.10 rows=800 width=30)
                                 ->  Hash Join  (cost=1.40..355.10 rows=800 width=30)
                                       Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                                       ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                             ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                   Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                     ->  Hash  (cost=53664.90..53664.90 rows=120000 width=30)
                           ->  Hash Join  (cost=5708.90..53664.90 rows=120000 width=30)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=8)
                                 ->  Hash  (cost=5558.90..5558.90 rows=12000 width=30)
                                       ->  Hash Join  (cost=1.40..5558.90 rows=12000 width=30)
                                             Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
(32 rows)

query 8 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=57711.67..57711.72 rows=1 width=64)
   ->  GroupAggregate  (cost=57711.67..57814.78 rows=2406 width=64)
         Group Key: (EXTRACT(year FROM orders.o_orderdate))
         ->  Sort  (cost=57711.67..57717.78 rows=2444 width=70)
               Sort Key: (EXTRACT(year FROM orders.o_orderdate))
               ->  Nested Loop  (cost=22529.68..57574.14 rows=2444 width=70)
                     ->  Hash Join  (cost=22529.54..57479.20 rows=2444 width=20)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=22081.54..57024.79 rows=2444 width=20)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=15744.53..50617.51 rows=12222 width=24)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Bitmap Heap Scan on orders  (cost=5528.58..38555.41 rows=459722 width=12)
                                             Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..5413.65 rows=459722 width=0)
                                                   Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=9717.48..9717.48 rows=39878 width=20)
                                             ->  Nested Loop  (cost=0.85..9717.48 rows=39878 width=20)
                                                   ->  Index Only Scan using q2_idx_1 on part  (cost=0.42..5401.71 rows=1329 width=4)
                                                         Index Cond: (p_type = 'LARGE POLISHED BRASS'::text)
                                                   ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.43..2.94 rows=31 width=24)
                                                         Index Cond: (l_partkey = part.p_partkey)
                                 ->  Hash  (cost=5962.01..5962.01 rows=30000 width=4)
                                       ->  Hash Join  (cost=2.51..5962.01 rows=30000 width=4)
                                             Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=8)
                                             ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                   ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                         Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                     ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                           Cache Key: supplier.s_nationkey
                           Cache Mode: logical
                           ->  Index Scan using nation_pkey on nation n2  (cost=0.14..1.16 rows=1 width=30)
                                 Index Cond: (n_nationkey = supplier.s_nationkey)
(40 rows)

query 8 run 2
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=57711.67..57711.72 rows=1 width=64)
   ->  GroupAggregate  (cost=57711.67..57814.78 rows=2406 width=64)
         Group Key: (EXTRACT(year FROM orders.o_orderdate))
         ->  Sort  (cost=57711.67..57717.78 rows=2444 width=70)
               Sort Key: (EXTRACT(year FROM orders.o_orderdate))
               ->  Nested Loop  (cost=22529.68..57574.14 rows=2444 width=70)
                     ->  Hash Join  (cost=22529.54..57479.20 rows=2444 width=20)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=22081.54..57024.79 rows=2444 width=20)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=15744.53..50617.51 rows=12222 width=24)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Bitmap Heap Scan on orders  (cost=5528.58..38555.41 rows=459722 width=12)
                                             Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..5413.65 rows=459722 width=0)
                                                   Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=9717.48..9717.48 rows=39878 width=20)
                                             ->  Nested Loop  (cost=0.85..9717.48 rows=39878 width=20)
                                                   ->  Index Only Scan using q2_idx_1 on part  (cost=0.42..5401.71 rows=1329 width=4)
                                                         Index Cond: (p_type = 'LARGE POLISHED BRASS'::text)
                                                   ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.43..2.94 rows=31 width=24)
                                                         Index Cond: (l_partkey = part.p_partkey)
                                 ->  Hash  (cost=5962.01..5962.01 rows=30000 width=4)
                                       ->  Hash Join  (cost=2.51..5962.01 rows=30000 width=4)
                                             Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=8)
                                             ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                   ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                         Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                     ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                           Cache Key: supplier.s_nationkey
                           Cache Mode: logical
                           ->  Index Scan using nation_pkey on nation n2  (cost=0.14..1.16 rows=1 width=30)
                                 Index Cond: (n_nationkey = supplier.s_nationkey)
(40 rows)

query 8 run 3
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=57711.67..57711.72 rows=1 width=64)
   ->  GroupAggregate  (cost=57711.67..57814.78 rows=2406 width=64)
         Group Key: (EXTRACT(year FROM orders.o_orderdate))
         ->  Sort  (cost=57711.67..57717.78 rows=2444 width=70)
               Sort Key: (EXTRACT(year FROM orders.o_orderdate))
               ->  Nested Loop  (cost=22529.68..57574.14 rows=2444 width=70)
                     ->  Hash Join  (cost=22529.54..57479.20 rows=2444 width=20)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=22081.54..57024.79 rows=2444 width=20)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=15744.53..50617.51 rows=12222 width=24)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Bitmap Heap Scan on orders  (cost=5528.58..38555.41 rows=459722 width=12)
                                             Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..5413.65 rows=459722 width=0)
                                                   Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=9717.48..9717.48 rows=39878 width=20)
                                             ->  Nested Loop  (cost=0.85..9717.48 rows=39878 width=20)
                                                   ->  Index Only Scan using q2_idx_1 on part  (cost=0.42..5401.71 rows=1329 width=4)
                                                         Index Cond: (p_type = 'LARGE POLISHED BRASS'::text)
                                                   ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.43..2.94 rows=31 width=24)
                                                         Index Cond: (l_partkey = part.p_partkey)
                                 ->  Hash  (cost=5962.01..5962.01 rows=30000 width=4)
                                       ->  Hash Join  (cost=2.51..5962.01 rows=30000 width=4)
                                             Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=8)
                                             ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                   ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                         Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                     ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                           Cache Key: supplier.s_nationkey
                           Cache Mode: logical
                           ->  Index Scan using nation_pkey on nation n2  (cost=0.14..1.16 rows=1 width=30)
                                 Index Cond: (n_nationkey = supplier.s_nationkey)
(40 rows)

query 8 run 4
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=57711.67..57711.72 rows=1 width=64)
   ->  GroupAggregate  (cost=57711.67..57814.78 rows=2406 width=64)
         Group Key: (EXTRACT(year FROM orders.o_orderdate))
         ->  Sort  (cost=57711.67..57717.78 rows=2444 width=70)
               Sort Key: (EXTRACT(year FROM orders.o_orderdate))
               ->  Nested Loop  (cost=22529.68..57574.14 rows=2444 width=70)
                     ->  Hash Join  (cost=22529.54..57479.20 rows=2444 width=20)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=22081.54..57024.79 rows=2444 width=20)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=15744.53..50617.51 rows=12222 width=24)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Bitmap Heap Scan on orders  (cost=5528.58..38555.41 rows=459722 width=12)
                                             Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..5413.65 rows=459722 width=0)
                                                   Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=9717.48..9717.48 rows=39878 width=20)
                                             ->  Nested Loop  (cost=0.85..9717.48 rows=39878 width=20)
                                                   ->  Index Only Scan using q2_idx_1 on part  (cost=0.42..5401.71 rows=1329 width=4)
                                                         Index Cond: (p_type = 'LARGE POLISHED BRASS'::text)
                                                   ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.43..2.94 rows=31 width=24)
                                                         Index Cond: (l_partkey = part.p_partkey)
                                 ->  Hash  (cost=5962.01..5962.01 rows=30000 width=4)
                                       ->  Hash Join  (cost=2.51..5962.01 rows=30000 width=4)
                                             Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=8)
                                             ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                   ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                         Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                     ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                           Cache Key: supplier.s_nationkey
                           Cache Mode: logical
                           ->  Index Scan using nation_pkey on nation n2  (cost=0.14..1.16 rows=1 width=30)
                                 Index Cond: (n_nationkey = supplier.s_nationkey)
(40 rows)

query 8 run 5
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=57711.67..57711.72 rows=1 width=64)
   ->  GroupAggregate  (cost=57711.67..57814.78 rows=2406 width=64)
         Group Key: (EXTRACT(year FROM orders.o_orderdate))
         ->  Sort  (cost=57711.67..57717.78 rows=2444 width=70)
               Sort Key: (EXTRACT(year FROM orders.o_orderdate))
               ->  Nested Loop  (cost=22529.68..57574.14 rows=2444 width=70)
                     ->  Hash Join  (cost=22529.54..57479.20 rows=2444 width=20)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=22081.54..57024.79 rows=2444 width=20)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=15744.53..50617.51 rows=12222 width=24)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Bitmap Heap Scan on orders  (cost=5528.58..38555.41 rows=459722 width=12)
                                             Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..5413.65 rows=459722 width=0)
                                                   Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=9717.48..9717.48 rows=39878 width=20)
                                             ->  Nested Loop  (cost=0.85..9717.48 rows=39878 width=20)
                                                   ->  Index Only Scan using q2_idx_1 on part  (cost=0.42..5401.71 rows=1329 width=4)
                                                         Index Cond: (p_type = 'LARGE POLISHED BRASS'::text)
                                                   ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.43..2.94 rows=31 width=24)
                                                         Index Cond: (l_partkey = part.p_partkey)
                                 ->  Hash  (cost=5962.01..5962.01 rows=30000 width=4)
                                       ->  Hash Join  (cost=2.51..5962.01 rows=30000 width=4)
                                             Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=8)
                                             ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                   ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                         Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                     ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                           Cache Key: supplier.s_nationkey
                           Cache Mode: logical
                           ->  Index Scan using nation_pkey on nation n2  (cost=0.14..1.16 rows=1 width=30)
                                 Index Cond: (n_nationkey = supplier.s_nationkey)
(40 rows)

query 9 run 1
SET
SET
SET
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=152043.23..152043.23 rows=1 width=90)
   ->  Sort  (cost=152043.23..152193.60 rows=60150 width=90)
         Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
         ->  HashAggregate  (cost=150840.23..151742.48 rows=60150 width=90)
               Group Key: nation.n_name, EXTRACT(year FROM orders.o_orderdate)
               ->  Hash Join  (cost=86713.50..143416.24 rows=424228 width=81)
                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Hash Join  (cost=86711.94..141051.73 rows=424228 width=31)
                           Hash Cond: ((supplier.s_suppkey = partsupp.ps_suppkey) AND (lineitem.l_partkey = partsupp.ps_partkey))
                           ->  Hash Join  (cost=56553.52..108666.11 rows=424228 width=41)
                                 Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                 ->  Hash Join  (cost=56105.52..107103.82 rows=424313 width=33)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=8)
                                       ->  Hash  (cost=50801.60..50801.60 rows=424313 width=33)
                                             ->  Nested Loop  (cost=0.85..50801.60 rows=424313 width=33)
                                                   ->  Index Only Scan using q20_idx_2 on part  (cost=0.42..6438.42 rows=14141 width=4)
                                                         Filter: ((p_name)::text ~~ '%navy%'::text)
                                                   ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.43..2.83 rows=31 width=29)
                                                         Index Cond: (l_partkey = part.p_partkey)
                                 ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                       ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                           ->  Hash  (cost=18158.42..18158.42 rows=800000 width=14)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.42..18158.42 rows=800000 width=14)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(26 rows)

query 9 run 2
SET
SET
SET
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=152043.23..152043.23 rows=1 width=90)
   ->  Sort  (cost=152043.23..152193.60 rows=60150 width=90)
         Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
         ->  HashAggregate  (cost=150840.23..151742.48 rows=60150 width=90)
               Group Key: nation.n_name, EXTRACT(year FROM orders.o_orderdate)
               ->  Hash Join  (cost=86713.50..143416.24 rows=424228 width=81)
                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Hash Join  (cost=86711.94..141051.73 rows=424228 width=31)
                           Hash Cond: ((supplier.s_suppkey = partsupp.ps_suppkey) AND (lineitem.l_partkey = partsupp.ps_partkey))
                           ->  Hash Join  (cost=56553.52..108666.11 rows=424228 width=41)
                                 Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                 ->  Hash Join  (cost=56105.52..107103.82 rows=424313 width=33)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=8)
                                       ->  Hash  (cost=50801.60..50801.60 rows=424313 width=33)
                                             ->  Nested Loop  (cost=0.85..50801.60 rows=424313 width=33)
                                                   ->  Index Only Scan using q20_idx_2 on part  (cost=0.42..6438.42 rows=14141 width=4)
                                                         Filter: ((p_name)::text ~~ '%navy%'::text)
                                                   ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.43..2.83 rows=31 width=29)
                                                         Index Cond: (l_partkey = part.p_partkey)
                                 ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                       ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                           ->  Hash  (cost=18158.42..18158.42 rows=800000 width=14)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.42..18158.42 rows=800000 width=14)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(26 rows)

query 9 run 3
SET
SET
SET
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=152043.23..152043.23 rows=1 width=90)
   ->  Sort  (cost=152043.23..152193.60 rows=60150 width=90)
         Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
         ->  HashAggregate  (cost=150840.23..151742.48 rows=60150 width=90)
               Group Key: nation.n_name, EXTRACT(year FROM orders.o_orderdate)
               ->  Hash Join  (cost=86713.50..143416.24 rows=424228 width=81)
                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Hash Join  (cost=86711.94..141051.73 rows=424228 width=31)
                           Hash Cond: ((supplier.s_suppkey = partsupp.ps_suppkey) AND (lineitem.l_partkey = partsupp.ps_partkey))
                           ->  Hash Join  (cost=56553.52..108666.11 rows=424228 width=41)
                                 Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                 ->  Hash Join  (cost=56105.52..107103.82 rows=424313 width=33)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=8)
                                       ->  Hash  (cost=50801.60..50801.60 rows=424313 width=33)
                                             ->  Nested Loop  (cost=0.85..50801.60 rows=424313 width=33)
                                                   ->  Index Only Scan using q20_idx_2 on part  (cost=0.42..6438.42 rows=14141 width=4)
                                                         Filter: ((p_name)::text ~~ '%navy%'::text)
                                                   ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.43..2.83 rows=31 width=29)
                                                         Index Cond: (l_partkey = part.p_partkey)
                                 ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                       ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                           ->  Hash  (cost=18158.42..18158.42 rows=800000 width=14)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.42..18158.42 rows=800000 width=14)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(26 rows)

query 9 run 4
SET
SET
SET
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=152043.23..152043.23 rows=1 width=90)
   ->  Sort  (cost=152043.23..152193.60 rows=60150 width=90)
         Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
         ->  HashAggregate  (cost=150840.23..151742.48 rows=60150 width=90)
               Group Key: nation.n_name, EXTRACT(year FROM orders.o_orderdate)
               ->  Hash Join  (cost=86713.50..143416.24 rows=424228 width=81)
                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Hash Join  (cost=86711.94..141051.73 rows=424228 width=31)
                           Hash Cond: ((supplier.s_suppkey = partsupp.ps_suppkey) AND (lineitem.l_partkey = partsupp.ps_partkey))
                           ->  Hash Join  (cost=56553.52..108666.11 rows=424228 width=41)
                                 Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                 ->  Hash Join  (cost=56105.52..107103.82 rows=424313 width=33)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=8)
                                       ->  Hash  (cost=50801.60..50801.60 rows=424313 width=33)
                                             ->  Nested Loop  (cost=0.85..50801.60 rows=424313 width=33)
                                                   ->  Index Only Scan using q20_idx_2 on part  (cost=0.42..6438.42 rows=14141 width=4)
                                                         Filter: ((p_name)::text ~~ '%navy%'::text)
                                                   ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.43..2.83 rows=31 width=29)
                                                         Index Cond: (l_partkey = part.p_partkey)
                                 ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                       ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                           ->  Hash  (cost=18158.42..18158.42 rows=800000 width=14)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.42..18158.42 rows=800000 width=14)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(26 rows)

query 9 run 5
SET
SET
SET
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=152043.23..152043.23 rows=1 width=90)
   ->  Sort  (cost=152043.23..152193.60 rows=60150 width=90)
         Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
         ->  HashAggregate  (cost=150840.23..151742.48 rows=60150 width=90)
               Group Key: nation.n_name, EXTRACT(year FROM orders.o_orderdate)
               ->  Hash Join  (cost=86713.50..143416.24 rows=424228 width=81)
                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Hash Join  (cost=86711.94..141051.73 rows=424228 width=31)
                           Hash Cond: ((supplier.s_suppkey = partsupp.ps_suppkey) AND (lineitem.l_partkey = partsupp.ps_partkey))
                           ->  Hash Join  (cost=56553.52..108666.11 rows=424228 width=41)
                                 Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                 ->  Hash Join  (cost=56105.52..107103.82 rows=424313 width=33)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=8)
                                       ->  Hash  (cost=50801.60..50801.60 rows=424313 width=33)
                                             ->  Nested Loop  (cost=0.85..50801.60 rows=424313 width=33)
                                                   ->  Index Only Scan using q20_idx_2 on part  (cost=0.42..6438.42 rows=14141 width=4)
                                                         Filter: ((p_name)::text ~~ '%navy%'::text)
                                                   ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.43..2.83 rows=31 width=29)
                                                         Index Cond: (l_partkey = part.p_partkey)
                                 ->  Hash  (cost=323.00..323.00 rows=10000 width=8)
                                       ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=8)
                           ->  Hash  (cost=18158.42..18158.42 rows=800000 width=14)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.42..18158.42 rows=800000 width=14)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(26 rows)

query 10 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=162433.15..162433.20 rows=20 width=202)
   ->  Sort  (cost=162433.15..162572.98 rows=55932 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  HashAggregate  (cost=160245.66..160944.81 rows=55932 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Nested Loop  (cost=35370.10..159546.51 rows=55932 width=182)
                     ->  Hash Join  (cost=35369.95..158150.10 rows=55932 width=160)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Hash Join  (cost=28397.95..151031.28 rows=55932 width=16)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.43..118792.10 rows=1463486 width=16)
                                       Index Cond: (l_returnflag = 'R'::bpchar)
                                 ->  Hash  (cost=27680.93..27680.93 rows=57327 width=8)
                                       ->  Bitmap Heap Scan on orders  (cost=690.03..27680.93 rows=57327 width=8)
                                             Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..675.70 rows=57327 width=0)
                                                   Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                           ->  Hash  (cost=5097.00..5097.00 rows=150000 width=148)
                                 ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=148)
                     ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                           Cache Key: customer.c_nationkey
                           Cache Mode: logical
                           ->  Index Scan using nation_pkey on nation  (cost=0.14..1.16 rows=1 width=30)
                                 Index Cond: (n_nationkey = customer.c_nationkey)
(24 rows)

query 10 run 2
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=162433.15..162433.20 rows=20 width=202)
   ->  Sort  (cost=162433.15..162572.98 rows=55932 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  HashAggregate  (cost=160245.66..160944.81 rows=55932 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Nested Loop  (cost=35370.10..159546.51 rows=55932 width=182)
                     ->  Hash Join  (cost=35369.95..158150.10 rows=55932 width=160)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Hash Join  (cost=28397.95..151031.28 rows=55932 width=16)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.43..118792.10 rows=1463486 width=16)
                                       Index Cond: (l_returnflag = 'R'::bpchar)
                                 ->  Hash  (cost=27680.93..27680.93 rows=57327 width=8)
                                       ->  Bitmap Heap Scan on orders  (cost=690.03..27680.93 rows=57327 width=8)
                                             Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..675.70 rows=57327 width=0)
                                                   Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                           ->  Hash  (cost=5097.00..5097.00 rows=150000 width=148)
                                 ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=148)
                     ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                           Cache Key: customer.c_nationkey
                           Cache Mode: logical
                           ->  Index Scan using nation_pkey on nation  (cost=0.14..1.16 rows=1 width=30)
                                 Index Cond: (n_nationkey = customer.c_nationkey)
(24 rows)

query 10 run 3
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=162433.15..162433.20 rows=20 width=202)
   ->  Sort  (cost=162433.15..162572.98 rows=55932 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  HashAggregate  (cost=160245.66..160944.81 rows=55932 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Nested Loop  (cost=35370.10..159546.51 rows=55932 width=182)
                     ->  Hash Join  (cost=35369.95..158150.10 rows=55932 width=160)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Hash Join  (cost=28397.95..151031.28 rows=55932 width=16)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.43..118792.10 rows=1463486 width=16)
                                       Index Cond: (l_returnflag = 'R'::bpchar)
                                 ->  Hash  (cost=27680.93..27680.93 rows=57327 width=8)
                                       ->  Bitmap Heap Scan on orders  (cost=690.03..27680.93 rows=57327 width=8)
                                             Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..675.70 rows=57327 width=0)
                                                   Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                           ->  Hash  (cost=5097.00..5097.00 rows=150000 width=148)
                                 ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=148)
                     ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                           Cache Key: customer.c_nationkey
                           Cache Mode: logical
                           ->  Index Scan using nation_pkey on nation  (cost=0.14..1.16 rows=1 width=30)
                                 Index Cond: (n_nationkey = customer.c_nationkey)
(24 rows)

query 10 run 4
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=162433.15..162433.20 rows=20 width=202)
   ->  Sort  (cost=162433.15..162572.98 rows=55932 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  HashAggregate  (cost=160245.66..160944.81 rows=55932 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Nested Loop  (cost=35370.10..159546.51 rows=55932 width=182)
                     ->  Hash Join  (cost=35369.95..158150.10 rows=55932 width=160)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Hash Join  (cost=28397.95..151031.28 rows=55932 width=16)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.43..118792.10 rows=1463486 width=16)
                                       Index Cond: (l_returnflag = 'R'::bpchar)
                                 ->  Hash  (cost=27680.93..27680.93 rows=57327 width=8)
                                       ->  Bitmap Heap Scan on orders  (cost=690.03..27680.93 rows=57327 width=8)
                                             Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..675.70 rows=57327 width=0)
                                                   Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                           ->  Hash  (cost=5097.00..5097.00 rows=150000 width=148)
                                 ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=148)
                     ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                           Cache Key: customer.c_nationkey
                           Cache Mode: logical
                           ->  Index Scan using nation_pkey on nation  (cost=0.14..1.16 rows=1 width=30)
                                 Index Cond: (n_nationkey = customer.c_nationkey)
(24 rows)

query 10 run 5
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=162433.15..162433.20 rows=20 width=202)
   ->  Sort  (cost=162433.15..162572.98 rows=55932 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  HashAggregate  (cost=160245.66..160944.81 rows=55932 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Nested Loop  (cost=35370.10..159546.51 rows=55932 width=182)
                     ->  Hash Join  (cost=35369.95..158150.10 rows=55932 width=160)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Hash Join  (cost=28397.95..151031.28 rows=55932 width=16)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.43..118792.10 rows=1463486 width=16)
                                       Index Cond: (l_returnflag = 'R'::bpchar)
                                 ->  Hash  (cost=27680.93..27680.93 rows=57327 width=8)
                                       ->  Bitmap Heap Scan on orders  (cost=690.03..27680.93 rows=57327 width=8)
                                             Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..675.70 rows=57327 width=0)
                                                   Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                           ->  Hash  (cost=5097.00..5097.00 rows=150000 width=148)
                                 ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=148)
                     ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                           Cache Key: customer.c_nationkey
                           Cache Mode: logical
                           ->  Index Scan using nation_pkey on nation  (cost=0.14..1.16 rows=1 width=30)
                                 Index Cond: (n_nationkey = customer.c_nationkey)
(24 rows)

query 11 run 1
SET
SET
SET
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Limit  (cost=20113.03..20113.03 rows=1 width=36)
   InitPlan 1
     ->  Aggregate  (cost=9749.84..9749.85 rows=1 width=32)
           ->  Nested Loop  (cost=5.81..9509.84 rows=32000 width=10)
                 ->  Nested Loop  (cost=5.38..232.45 rows=400 width=4)
                       ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                       ->  Bitmap Heap Scan on supplier supplier_1  (cost=5.38..227.14 rows=400 width=8)
                             Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..5.29 rows=400 width=0)
                                   Index Cond: (s_nationkey = nation_1.n_nationkey)
                 ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.42..22.39 rows=80 width=14)
                       Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=10363.17..10389.84 rows=10667 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=9829.84..10309.84 rows=10667 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               ->  Nested Loop  (cost=5.81..9509.84 rows=32000 width=14)
                     ->  Nested Loop  (cost=5.38..232.45 rows=400 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=5.38..227.14 rows=400 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..5.29 rows=400 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..22.39 rows=80 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(28 rows)

query 11 run 2
SET
SET
SET
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Limit  (cost=20113.03..20113.03 rows=1 width=36)
   InitPlan 1
     ->  Aggregate  (cost=9749.84..9749.85 rows=1 width=32)
           ->  Nested Loop  (cost=5.81..9509.84 rows=32000 width=10)
                 ->  Nested Loop  (cost=5.38..232.45 rows=400 width=4)
                       ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                       ->  Bitmap Heap Scan on supplier supplier_1  (cost=5.38..227.14 rows=400 width=8)
                             Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..5.29 rows=400 width=0)
                                   Index Cond: (s_nationkey = nation_1.n_nationkey)
                 ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.42..22.39 rows=80 width=14)
                       Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=10363.17..10389.84 rows=10667 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=9829.84..10309.84 rows=10667 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               ->  Nested Loop  (cost=5.81..9509.84 rows=32000 width=14)
                     ->  Nested Loop  (cost=5.38..232.45 rows=400 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=5.38..227.14 rows=400 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..5.29 rows=400 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..22.39 rows=80 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(28 rows)

query 11 run 3
SET
SET
SET
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Limit  (cost=20113.03..20113.03 rows=1 width=36)
   InitPlan 1
     ->  Aggregate  (cost=9749.84..9749.85 rows=1 width=32)
           ->  Nested Loop  (cost=5.81..9509.84 rows=32000 width=10)
                 ->  Nested Loop  (cost=5.38..232.45 rows=400 width=4)
                       ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                       ->  Bitmap Heap Scan on supplier supplier_1  (cost=5.38..227.14 rows=400 width=8)
                             Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..5.29 rows=400 width=0)
                                   Index Cond: (s_nationkey = nation_1.n_nationkey)
                 ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.42..22.39 rows=80 width=14)
                       Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=10363.17..10389.84 rows=10667 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=9829.84..10309.84 rows=10667 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               ->  Nested Loop  (cost=5.81..9509.84 rows=32000 width=14)
                     ->  Nested Loop  (cost=5.38..232.45 rows=400 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=5.38..227.14 rows=400 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..5.29 rows=400 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..22.39 rows=80 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(28 rows)

query 11 run 4
SET
SET
SET
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Limit  (cost=20113.03..20113.03 rows=1 width=36)
   InitPlan 1
     ->  Aggregate  (cost=9749.84..9749.85 rows=1 width=32)
           ->  Nested Loop  (cost=5.81..9509.84 rows=32000 width=10)
                 ->  Nested Loop  (cost=5.38..232.45 rows=400 width=4)
                       ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                       ->  Bitmap Heap Scan on supplier supplier_1  (cost=5.38..227.14 rows=400 width=8)
                             Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..5.29 rows=400 width=0)
                                   Index Cond: (s_nationkey = nation_1.n_nationkey)
                 ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.42..22.39 rows=80 width=14)
                       Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=10363.17..10389.84 rows=10667 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=9829.84..10309.84 rows=10667 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               ->  Nested Loop  (cost=5.81..9509.84 rows=32000 width=14)
                     ->  Nested Loop  (cost=5.38..232.45 rows=400 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=5.38..227.14 rows=400 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..5.29 rows=400 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..22.39 rows=80 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(28 rows)

query 11 run 5
SET
SET
SET
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Limit  (cost=20113.03..20113.03 rows=1 width=36)
   InitPlan 1
     ->  Aggregate  (cost=9749.84..9749.85 rows=1 width=32)
           ->  Nested Loop  (cost=5.81..9509.84 rows=32000 width=10)
                 ->  Nested Loop  (cost=5.38..232.45 rows=400 width=4)
                       ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                             Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                       ->  Bitmap Heap Scan on supplier supplier_1  (cost=5.38..227.14 rows=400 width=8)
                             Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                             ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..5.29 rows=400 width=0)
                                   Index Cond: (s_nationkey = nation_1.n_nationkey)
                 ->  Index Scan using idx_partsupp_suppkey on partsupp partsupp_1  (cost=0.42..22.39 rows=80 width=14)
                       Index Cond: (ps_suppkey = supplier_1.s_suppkey)
   ->  Sort  (cost=10363.17..10389.84 rows=10667 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=9829.84..10309.84 rows=10667 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               ->  Nested Loop  (cost=5.81..9509.84 rows=32000 width=14)
                     ->  Nested Loop  (cost=5.38..232.45 rows=400 width=4)
                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                           ->  Bitmap Heap Scan on supplier  (cost=5.38..227.14 rows=400 width=8)
                                 Recheck Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..5.29 rows=400 width=0)
                                       Index Cond: (s_nationkey = nation.n_nationkey)
                     ->  Index Scan using idx_partsupp_suppkey on partsupp  (cost=0.42..22.39 rows=80 width=18)
                           Index Cond: (ps_suppkey = supplier.s_suppkey)
(28 rows)

query 12 run 1
SET
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=68708.63..68708.64 rows=1 width=27)
   ->  Sort  (cost=68708.63..68708.65 rows=7 width=27)
         Sort Key: lineitem.l_shipmode
         ->  HashAggregate  (cost=68708.53..68708.60 rows=7 width=27)
               Group Key: lineitem.l_shipmode
               ->  Hash Join  (cost=15500.28..68182.06 rows=30084 width=27)
                     Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=20)
                     ->  Hash  (cost=15124.23..15124.23 rows=30084 width=15)
                           ->  Index Only Scan using q12_idx_1 on lineitem  (cost=0.42..15124.23 rows=30084 width=15)
                                 Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
(11 rows)

query 12 run 2
SET
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=68708.63..68708.64 rows=1 width=27)
   ->  Sort  (cost=68708.63..68708.65 rows=7 width=27)
         Sort Key: lineitem.l_shipmode
         ->  HashAggregate  (cost=68708.53..68708.60 rows=7 width=27)
               Group Key: lineitem.l_shipmode
               ->  Hash Join  (cost=15500.28..68182.06 rows=30084 width=27)
                     Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=20)
                     ->  Hash  (cost=15124.23..15124.23 rows=30084 width=15)
                           ->  Index Only Scan using q12_idx_1 on lineitem  (cost=0.42..15124.23 rows=30084 width=15)
                                 Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
(11 rows)

query 12 run 3
SET
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=68708.63..68708.64 rows=1 width=27)
   ->  Sort  (cost=68708.63..68708.65 rows=7 width=27)
         Sort Key: lineitem.l_shipmode
         ->  HashAggregate  (cost=68708.53..68708.60 rows=7 width=27)
               Group Key: lineitem.l_shipmode
               ->  Hash Join  (cost=15500.28..68182.06 rows=30084 width=27)
                     Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=20)
                     ->  Hash  (cost=15124.23..15124.23 rows=30084 width=15)
                           ->  Index Only Scan using q12_idx_1 on lineitem  (cost=0.42..15124.23 rows=30084 width=15)
                                 Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
(11 rows)

query 12 run 4
SET
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=68708.63..68708.64 rows=1 width=27)
   ->  Sort  (cost=68708.63..68708.65 rows=7 width=27)
         Sort Key: lineitem.l_shipmode
         ->  HashAggregate  (cost=68708.53..68708.60 rows=7 width=27)
               Group Key: lineitem.l_shipmode
               ->  Hash Join  (cost=15500.28..68182.06 rows=30084 width=27)
                     Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=20)
                     ->  Hash  (cost=15124.23..15124.23 rows=30084 width=15)
                           ->  Index Only Scan using q12_idx_1 on lineitem  (cost=0.42..15124.23 rows=30084 width=15)
                                 Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
(11 rows)

query 12 run 5
SET
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=68708.63..68708.64 rows=1 width=27)
   ->  Sort  (cost=68708.63..68708.65 rows=7 width=27)
         Sort Key: lineitem.l_shipmode
         ->  HashAggregate  (cost=68708.53..68708.60 rows=7 width=27)
               Group Key: lineitem.l_shipmode
               ->  Hash Join  (cost=15500.28..68182.06 rows=30084 width=27)
                     Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=20)
                     ->  Hash  (cost=15124.23..15124.23 rows=30084 width=15)
                           ->  Index Only Scan using q12_idx_1 on lineitem  (cost=0.42..15124.23 rows=30084 width=15)
                                 Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
(11 rows)

query 13 run 1
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=65023.89..65023.89 rows=1 width=16)
   ->  Sort  (cost=65023.89..65024.39 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=65020.89..65022.89 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=61270.89..62770.89 rows=150000 width=12)
                     Group Key: customer.c_custkey
                     ->  Hash Right Join  (cost=4953.42..53771.64 rows=1499850 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..44881.00 rows=1499850 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=3078.42..3078.42 rows=150000 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.42..3078.42 rows=150000 width=4)
(13 rows)

query 13 run 2
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=65023.89..65023.89 rows=1 width=16)
   ->  Sort  (cost=65023.89..65024.39 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=65020.89..65022.89 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=61270.89..62770.89 rows=150000 width=12)
                     Group Key: customer.c_custkey
                     ->  Hash Right Join  (cost=4953.42..53771.64 rows=1499850 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..44881.00 rows=1499850 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=3078.42..3078.42 rows=150000 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.42..3078.42 rows=150000 width=4)
(13 rows)

query 13 run 3
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=65023.89..65023.89 rows=1 width=16)
   ->  Sort  (cost=65023.89..65024.39 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=65020.89..65022.89 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=61270.89..62770.89 rows=150000 width=12)
                     Group Key: customer.c_custkey
                     ->  Hash Right Join  (cost=4953.42..53771.64 rows=1499850 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..44881.00 rows=1499850 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=3078.42..3078.42 rows=150000 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.42..3078.42 rows=150000 width=4)
(13 rows)

query 13 run 4
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=65023.89..65023.89 rows=1 width=16)
   ->  Sort  (cost=65023.89..65024.39 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=65020.89..65022.89 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=61270.89..62770.89 rows=150000 width=12)
                     Group Key: customer.c_custkey
                     ->  Hash Right Join  (cost=4953.42..53771.64 rows=1499850 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..44881.00 rows=1499850 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=3078.42..3078.42 rows=150000 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.42..3078.42 rows=150000 width=4)
(13 rows)

query 13 run 5
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=65023.89..65023.89 rows=1 width=16)
   ->  Sort  (cost=65023.89..65024.39 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=65020.89..65022.89 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=61270.89..62770.89 rows=150000 width=12)
                     Group Key: customer.c_custkey
                     ->  Hash Right Join  (cost=4953.42..53771.64 rows=1499850 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..44881.00 rows=1499850 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=3078.42..3078.42 rows=150000 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.42..3078.42 rows=150000 width=4)
(13 rows)

query 14 run 1
SET
SET
SET
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Limit  (cost=90728.48..90728.49 rows=1 width=32)
   ->  Aggregate  (cost=90728.48..90728.49 rows=1 width=32)
         ->  Hash Join  (cost=10122.61..89244.51 rows=84798 width=33)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Bitmap Heap Scan on lineitem  (cost=1523.61..80422.91 rows=84798 width=16)
                     Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                     ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..1502.41 rows=84798 width=0)
                           Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=6099.00..6099.00 rows=200000 width=25)
                     ->  Seq Scan on part  (cost=0.00..6099.00 rows=200000 width=25)
(10 rows)

query 14 run 2
SET
SET
SET
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Limit  (cost=90728.48..90728.49 rows=1 width=32)
   ->  Aggregate  (cost=90728.48..90728.49 rows=1 width=32)
         ->  Hash Join  (cost=10122.61..89244.51 rows=84798 width=33)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Bitmap Heap Scan on lineitem  (cost=1523.61..80422.91 rows=84798 width=16)
                     Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                     ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..1502.41 rows=84798 width=0)
                           Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=6099.00..6099.00 rows=200000 width=25)
                     ->  Seq Scan on part  (cost=0.00..6099.00 rows=200000 width=25)
(10 rows)

query 14 run 3
SET
SET
SET
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Limit  (cost=90728.48..90728.49 rows=1 width=32)
   ->  Aggregate  (cost=90728.48..90728.49 rows=1 width=32)
         ->  Hash Join  (cost=10122.61..89244.51 rows=84798 width=33)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Bitmap Heap Scan on lineitem  (cost=1523.61..80422.91 rows=84798 width=16)
                     Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                     ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..1502.41 rows=84798 width=0)
                           Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=6099.00..6099.00 rows=200000 width=25)
                     ->  Seq Scan on part  (cost=0.00..6099.00 rows=200000 width=25)
(10 rows)

query 14 run 4
SET
SET
SET
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Limit  (cost=90728.48..90728.49 rows=1 width=32)
   ->  Aggregate  (cost=90728.48..90728.49 rows=1 width=32)
         ->  Hash Join  (cost=10122.61..89244.51 rows=84798 width=33)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Bitmap Heap Scan on lineitem  (cost=1523.61..80422.91 rows=84798 width=16)
                     Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                     ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..1502.41 rows=84798 width=0)
                           Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=6099.00..6099.00 rows=200000 width=25)
                     ->  Seq Scan on part  (cost=0.00..6099.00 rows=200000 width=25)
(10 rows)

query 14 run 5
SET
SET
SET
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Limit  (cost=90728.48..90728.49 rows=1 width=32)
   ->  Aggregate  (cost=90728.48..90728.49 rows=1 width=32)
         ->  Hash Join  (cost=10122.61..89244.51 rows=84798 width=33)
               Hash Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Bitmap Heap Scan on lineitem  (cost=1523.61..80422.91 rows=84798 width=16)
                     Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                     ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..1502.41 rows=84798 width=0)
                           Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Hash  (cost=6099.00..6099.00 rows=200000 width=25)
                     ->  Seq Scan on part  (cost=0.00..6099.00 rows=200000 width=25)
(10 rows)

query 15 run 1
SET
SET
SET
CREATE VIEW
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=245066.31..245075.50 rows=1 width=103)
   InitPlan 1
     ->  Aggregate  (cost=122582.06..122582.07 rows=1 width=32)
           ->  HashAggregate  (cost=122332.01..122457.03 rows=10002 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=4085.78..120057.52 rows=227449 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..4028.92 rows=227449 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=122484.24..122943.99 rows=50 width=103)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..434.29 rows=10000 width=71)
         ->  Sort  (cost=122483.95..122484.08 rows=50 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=122332.01..122482.54 rows=50 width=36)
                     ->  HashAggregate  (cost=122332.01..122482.04 rows=50 width=36)
                           Group Key: lineitem.l_suppkey
                           Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
                           ->  Bitmap Heap Scan on lineitem  (cost=4085.78..120057.52 rows=227449 width=16)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..4028.92 rows=227449 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(22 rows)

DROP VIEW
query 15 run 2
SET
SET
SET
CREATE VIEW
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=245066.31..245075.50 rows=1 width=103)
   InitPlan 1
     ->  Aggregate  (cost=122582.06..122582.07 rows=1 width=32)
           ->  HashAggregate  (cost=122332.01..122457.03 rows=10002 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=4085.78..120057.52 rows=227449 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..4028.92 rows=227449 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=122484.24..122943.99 rows=50 width=103)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..434.29 rows=10000 width=71)
         ->  Sort  (cost=122483.95..122484.08 rows=50 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=122332.01..122482.54 rows=50 width=36)
                     ->  HashAggregate  (cost=122332.01..122482.04 rows=50 width=36)
                           Group Key: lineitem.l_suppkey
                           Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
                           ->  Bitmap Heap Scan on lineitem  (cost=4085.78..120057.52 rows=227449 width=16)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..4028.92 rows=227449 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(22 rows)

DROP VIEW
query 15 run 3
SET
SET
SET
CREATE VIEW
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=245066.31..245075.50 rows=1 width=103)
   InitPlan 1
     ->  Aggregate  (cost=122582.06..122582.07 rows=1 width=32)
           ->  HashAggregate  (cost=122332.01..122457.03 rows=10002 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=4085.78..120057.52 rows=227449 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..4028.92 rows=227449 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=122484.24..122943.99 rows=50 width=103)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..434.29 rows=10000 width=71)
         ->  Sort  (cost=122483.95..122484.08 rows=50 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=122332.01..122482.54 rows=50 width=36)
                     ->  HashAggregate  (cost=122332.01..122482.04 rows=50 width=36)
                           Group Key: lineitem.l_suppkey
                           Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
                           ->  Bitmap Heap Scan on lineitem  (cost=4085.78..120057.52 rows=227449 width=16)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..4028.92 rows=227449 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(22 rows)

DROP VIEW
query 15 run 4
SET
SET
SET
CREATE VIEW
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=245066.31..245075.50 rows=1 width=103)
   InitPlan 1
     ->  Aggregate  (cost=122582.06..122582.07 rows=1 width=32)
           ->  HashAggregate  (cost=122332.01..122457.03 rows=10002 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=4085.78..120057.52 rows=227449 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..4028.92 rows=227449 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=122484.24..122943.99 rows=50 width=103)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..434.29 rows=10000 width=71)
         ->  Sort  (cost=122483.95..122484.08 rows=50 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=122332.01..122482.54 rows=50 width=36)
                     ->  HashAggregate  (cost=122332.01..122482.04 rows=50 width=36)
                           Group Key: lineitem.l_suppkey
                           Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
                           ->  Bitmap Heap Scan on lineitem  (cost=4085.78..120057.52 rows=227449 width=16)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..4028.92 rows=227449 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(22 rows)

DROP VIEW
query 15 run 5
SET
SET
SET
CREATE VIEW
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=245066.31..245075.50 rows=1 width=103)
   InitPlan 1
     ->  Aggregate  (cost=122582.06..122582.07 rows=1 width=32)
           ->  HashAggregate  (cost=122332.01..122457.03 rows=10002 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=4085.78..120057.52 rows=227449 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..4028.92 rows=227449 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=122484.24..122943.99 rows=50 width=103)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..434.29 rows=10000 width=71)
         ->  Sort  (cost=122483.95..122484.08 rows=50 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=122332.01..122482.54 rows=50 width=36)
                     ->  HashAggregate  (cost=122332.01..122482.04 rows=50 width=36)
                           Group Key: lineitem.l_suppkey
                           Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
                           ->  Bitmap Heap Scan on lineitem  (cost=4085.78..120057.52 rows=227449 width=16)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..4028.92 rows=227449 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(22 rows)

DROP VIEW
query 16 run 1
SET
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=35023.40..35023.40 rows=1 width=44)
   ->  Sort  (cost=35023.40..35063.57 rows=16069 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=34031.64..34943.05 rows=16069 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=34031.64..34181.78 rows=60058 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                     ->  Hash Join  (cost=9822.79..29264.81 rows=60058 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=348.43..18740.43 rows=400000 width=8)
                                 Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..348.00 rows=1 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=9099.00..9099.00 rows=30029 width=40)
                                 ->  Seq Scan on part  (cost=0.00..9099.00 rows=30029 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(17 rows)

query 16 run 2
SET
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=35023.40..35023.40 rows=1 width=44)
   ->  Sort  (cost=35023.40..35063.57 rows=16069 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=34031.64..34943.05 rows=16069 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=34031.64..34181.78 rows=60058 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                     ->  Hash Join  (cost=9822.79..29264.81 rows=60058 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=348.43..18740.43 rows=400000 width=8)
                                 Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..348.00 rows=1 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=9099.00..9099.00 rows=30029 width=40)
                                 ->  Seq Scan on part  (cost=0.00..9099.00 rows=30029 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(17 rows)

query 16 run 3
SET
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=35023.40..35023.40 rows=1 width=44)
   ->  Sort  (cost=35023.40..35063.57 rows=16069 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=34031.64..34943.05 rows=16069 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=34031.64..34181.78 rows=60058 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                     ->  Hash Join  (cost=9822.79..29264.81 rows=60058 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=348.43..18740.43 rows=400000 width=8)
                                 Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..348.00 rows=1 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=9099.00..9099.00 rows=30029 width=40)
                                 ->  Seq Scan on part  (cost=0.00..9099.00 rows=30029 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(17 rows)

query 16 run 4
SET
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=35023.40..35023.40 rows=1 width=44)
   ->  Sort  (cost=35023.40..35063.57 rows=16069 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=34031.64..34943.05 rows=16069 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=34031.64..34181.78 rows=60058 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                     ->  Hash Join  (cost=9822.79..29264.81 rows=60058 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=348.43..18740.43 rows=400000 width=8)
                                 Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..348.00 rows=1 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=9099.00..9099.00 rows=30029 width=40)
                                 ->  Seq Scan on part  (cost=0.00..9099.00 rows=30029 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(17 rows)

query 16 run 5
SET
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=35023.40..35023.40 rows=1 width=44)
   ->  Sort  (cost=35023.40..35063.57 rows=16069 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=34031.64..34943.05 rows=16069 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=34031.64..34181.78 rows=60058 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                     ->  Hash Join  (cost=9822.79..29264.81 rows=60058 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=348.43..18740.43 rows=400000 width=8)
                                 Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..348.00 rows=1 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=9099.00..9099.00 rows=30029 width=40)
                                 ->  Seq Scan on part  (cost=0.00..9099.00 rows=30029 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(17 rows)

query 17 run 1
SET
SET
SET
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=177284.51..177284.52 rows=1 width=32)
   ->  Aggregate  (cost=177284.51..177284.52 rows=1 width=32)
         ->  Nested Loop  (cost=7106.97..177279.93 rows=1831 width=8)
               Join Filter: (part.p_partkey = lineitem.l_partkey)
               ->  Merge Join  (cost=7106.53..176775.66 rows=183 width=40)
                     Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                     ->  Sort  (cost=7106.10..7106.57 rows=188 width=4)
                           Sort Key: part.p_partkey
                           ->  Seq Scan on part  (cost=0.00..7099.00 rows=188 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                     ->  GroupAggregate  (cost=0.43..169179.81 rows=194793 width=36)
                           Group Key: lineitem_1.l_partkey
                           ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.43..136252.04 rows=6001174 width=9)
               ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.43..2.63 rows=10 width=17)
                     Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
(15 rows)

query 17 run 2
SET
SET
SET
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=177284.51..177284.52 rows=1 width=32)
   ->  Aggregate  (cost=177284.51..177284.52 rows=1 width=32)
         ->  Nested Loop  (cost=7106.97..177279.93 rows=1831 width=8)
               Join Filter: (part.p_partkey = lineitem.l_partkey)
               ->  Merge Join  (cost=7106.53..176775.66 rows=183 width=40)
                     Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                     ->  Sort  (cost=7106.10..7106.57 rows=188 width=4)
                           Sort Key: part.p_partkey
                           ->  Seq Scan on part  (cost=0.00..7099.00 rows=188 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                     ->  GroupAggregate  (cost=0.43..169179.81 rows=194793 width=36)
                           Group Key: lineitem_1.l_partkey
                           ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.43..136252.04 rows=6001174 width=9)
               ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.43..2.63 rows=10 width=17)
                     Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
(15 rows)

query 17 run 3
SET
SET
SET
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=177284.51..177284.52 rows=1 width=32)
   ->  Aggregate  (cost=177284.51..177284.52 rows=1 width=32)
         ->  Nested Loop  (cost=7106.97..177279.93 rows=1831 width=8)
               Join Filter: (part.p_partkey = lineitem.l_partkey)
               ->  Merge Join  (cost=7106.53..176775.66 rows=183 width=40)
                     Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                     ->  Sort  (cost=7106.10..7106.57 rows=188 width=4)
                           Sort Key: part.p_partkey
                           ->  Seq Scan on part  (cost=0.00..7099.00 rows=188 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                     ->  GroupAggregate  (cost=0.43..169179.81 rows=194793 width=36)
                           Group Key: lineitem_1.l_partkey
                           ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.43..136252.04 rows=6001174 width=9)
               ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.43..2.63 rows=10 width=17)
                     Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
(15 rows)

query 17 run 4
SET
SET
SET
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=177284.51..177284.52 rows=1 width=32)
   ->  Aggregate  (cost=177284.51..177284.52 rows=1 width=32)
         ->  Nested Loop  (cost=7106.97..177279.93 rows=1831 width=8)
               Join Filter: (part.p_partkey = lineitem.l_partkey)
               ->  Merge Join  (cost=7106.53..176775.66 rows=183 width=40)
                     Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                     ->  Sort  (cost=7106.10..7106.57 rows=188 width=4)
                           Sort Key: part.p_partkey
                           ->  Seq Scan on part  (cost=0.00..7099.00 rows=188 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                     ->  GroupAggregate  (cost=0.43..169179.81 rows=194793 width=36)
                           Group Key: lineitem_1.l_partkey
                           ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.43..136252.04 rows=6001174 width=9)
               ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.43..2.63 rows=10 width=17)
                     Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
(15 rows)

query 17 run 5
SET
SET
SET
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=177284.51..177284.52 rows=1 width=32)
   ->  Aggregate  (cost=177284.51..177284.52 rows=1 width=32)
         ->  Nested Loop  (cost=7106.97..177279.93 rows=1831 width=8)
               Join Filter: (part.p_partkey = lineitem.l_partkey)
               ->  Merge Join  (cost=7106.53..176775.66 rows=183 width=40)
                     Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                     ->  Sort  (cost=7106.10..7106.57 rows=188 width=4)
                           Sort Key: part.p_partkey
                           ->  Seq Scan on part  (cost=0.00..7099.00 rows=188 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                     ->  GroupAggregate  (cost=0.43..169179.81 rows=194793 width=36)
                           Group Key: lineitem_1.l_partkey
                           ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.43..136252.04 rows=6001174 width=9)
               ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.43..2.63 rows=10 width=17)
                     Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
(15 rows)

query 18 run 1
SET
SET
SET
                                                                           QUERY PLAN                                                                            
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=669390.98..669391.23 rows=100 width=71)
   ->  Sort  (cost=669390.98..674392.94 rows=2000783 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=306671.44..592922.49 rows=2000783 width=71)
               Group Key: orders.o_orderkey, customer.c_custkey
               ->  Incremental Sort  (cost=306671.44..552906.83 rows=2000783 width=44)
                     Sort Key: orders.o_orderkey, customer.c_custkey
                     Presorted Key: orders.o_orderkey
                     ->  Merge Join  (cost=306671.31..480399.00 rows=2000783 width=44)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Sort  (cost=306667.75..307918.00 rows=500098 width=43)
                                 Sort Key: orders.o_orderkey
                                 ->  Hash Join  (cost=201957.55..248338.85 rows=500098 width=43)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Hash Join  (cost=194985.55..240054.06 rows=500098 width=24)
                                             Hash Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                             ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=20)
                                             ->  Hash  (cost=188734.32..188734.32 rows=500098 width=4)
                                                   ->  GroupAggregate  (cost=0.43..188734.32 rows=500098 width=4)
                                                         Group Key: lineitem_1.l_orderkey
                                                         Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                         ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.43..136224.04 rows=6001174 width=9)
                                       ->  Hash  (cost=5097.00..5097.00 rows=150000 width=23)
                                             ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=23)
                           ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.43..136224.04 rows=6001174 width=9)
(25 rows)

query 18 run 2
SET
SET
SET
                                                                           QUERY PLAN                                                                            
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=669390.98..669391.23 rows=100 width=71)
   ->  Sort  (cost=669390.98..674392.94 rows=2000783 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=306671.44..592922.49 rows=2000783 width=71)
               Group Key: orders.o_orderkey, customer.c_custkey
               ->  Incremental Sort  (cost=306671.44..552906.83 rows=2000783 width=44)
                     Sort Key: orders.o_orderkey, customer.c_custkey
                     Presorted Key: orders.o_orderkey
                     ->  Merge Join  (cost=306671.31..480399.00 rows=2000783 width=44)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Sort  (cost=306667.75..307918.00 rows=500098 width=43)
                                 Sort Key: orders.o_orderkey
                                 ->  Hash Join  (cost=201957.55..248338.85 rows=500098 width=43)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Hash Join  (cost=194985.55..240054.06 rows=500098 width=24)
                                             Hash Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                             ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=20)
                                             ->  Hash  (cost=188734.32..188734.32 rows=500098 width=4)
                                                   ->  GroupAggregate  (cost=0.43..188734.32 rows=500098 width=4)
                                                         Group Key: lineitem_1.l_orderkey
                                                         Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                         ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.43..136224.04 rows=6001174 width=9)
                                       ->  Hash  (cost=5097.00..5097.00 rows=150000 width=23)
                                             ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=23)
                           ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.43..136224.04 rows=6001174 width=9)
(25 rows)

query 18 run 3
SET
SET
SET
                                                                           QUERY PLAN                                                                            
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=669390.98..669391.23 rows=100 width=71)
   ->  Sort  (cost=669390.98..674392.94 rows=2000783 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=306671.44..592922.49 rows=2000783 width=71)
               Group Key: orders.o_orderkey, customer.c_custkey
               ->  Incremental Sort  (cost=306671.44..552906.83 rows=2000783 width=44)
                     Sort Key: orders.o_orderkey, customer.c_custkey
                     Presorted Key: orders.o_orderkey
                     ->  Merge Join  (cost=306671.31..480399.00 rows=2000783 width=44)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Sort  (cost=306667.75..307918.00 rows=500098 width=43)
                                 Sort Key: orders.o_orderkey
                                 ->  Hash Join  (cost=201957.55..248338.85 rows=500098 width=43)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Hash Join  (cost=194985.55..240054.06 rows=500098 width=24)
                                             Hash Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                             ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=20)
                                             ->  Hash  (cost=188734.32..188734.32 rows=500098 width=4)
                                                   ->  GroupAggregate  (cost=0.43..188734.32 rows=500098 width=4)
                                                         Group Key: lineitem_1.l_orderkey
                                                         Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                         ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.43..136224.04 rows=6001174 width=9)
                                       ->  Hash  (cost=5097.00..5097.00 rows=150000 width=23)
                                             ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=23)
                           ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.43..136224.04 rows=6001174 width=9)
(25 rows)

query 18 run 4
SET
SET
SET
                                                                           QUERY PLAN                                                                            
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=669390.98..669391.23 rows=100 width=71)
   ->  Sort  (cost=669390.98..674392.94 rows=2000783 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=306671.44..592922.49 rows=2000783 width=71)
               Group Key: orders.o_orderkey, customer.c_custkey
               ->  Incremental Sort  (cost=306671.44..552906.83 rows=2000783 width=44)
                     Sort Key: orders.o_orderkey, customer.c_custkey
                     Presorted Key: orders.o_orderkey
                     ->  Merge Join  (cost=306671.31..480399.00 rows=2000783 width=44)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Sort  (cost=306667.75..307918.00 rows=500098 width=43)
                                 Sort Key: orders.o_orderkey
                                 ->  Hash Join  (cost=201957.55..248338.85 rows=500098 width=43)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Hash Join  (cost=194985.55..240054.06 rows=500098 width=24)
                                             Hash Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                             ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=20)
                                             ->  Hash  (cost=188734.32..188734.32 rows=500098 width=4)
                                                   ->  GroupAggregate  (cost=0.43..188734.32 rows=500098 width=4)
                                                         Group Key: lineitem_1.l_orderkey
                                                         Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                         ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.43..136224.04 rows=6001174 width=9)
                                       ->  Hash  (cost=5097.00..5097.00 rows=150000 width=23)
                                             ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=23)
                           ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.43..136224.04 rows=6001174 width=9)
(25 rows)

query 18 run 5
SET
SET
SET
                                                                           QUERY PLAN                                                                            
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=669390.98..669391.23 rows=100 width=71)
   ->  Sort  (cost=669390.98..674392.94 rows=2000783 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=306671.44..592922.49 rows=2000783 width=71)
               Group Key: orders.o_orderkey, customer.c_custkey
               ->  Incremental Sort  (cost=306671.44..552906.83 rows=2000783 width=44)
                     Sort Key: orders.o_orderkey, customer.c_custkey
                     Presorted Key: orders.o_orderkey
                     ->  Merge Join  (cost=306671.31..480399.00 rows=2000783 width=44)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Sort  (cost=306667.75..307918.00 rows=500098 width=43)
                                 Sort Key: orders.o_orderkey
                                 ->  Hash Join  (cost=201957.55..248338.85 rows=500098 width=43)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Hash Join  (cost=194985.55..240054.06 rows=500098 width=24)
                                             Hash Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                             ->  Seq Scan on orders  (cost=0.00..41131.00 rows=1500000 width=20)
                                             ->  Hash  (cost=188734.32..188734.32 rows=500098 width=4)
                                                   ->  GroupAggregate  (cost=0.43..188734.32 rows=500098 width=4)
                                                         Group Key: lineitem_1.l_orderkey
                                                         Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                         ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.43..136224.04 rows=6001174 width=9)
                                       ->  Hash  (cost=5097.00..5097.00 rows=150000 width=23)
                                             ->  Seq Scan on customer  (cost=0.00..5097.00 rows=150000 width=23)
                           ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.43..136224.04 rows=6001174 width=9)
(25 rows)

query 19 run 1
SET
SET
SET


 Limit  (cost=15096.65..15096.66 rows=1 width=32)
   ->  Aggregate  (cost=15096.65..15096.66 rows=1 width=32)
         ->  Nested Loop  (cost=0.56..15095.82 rows=110 width=12)
               ->  Seq Scan on part  (cost=0.00..12599.00 rows=481 width=30)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
               ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..5.18 rows=1 width=21)
                     Index Cond: ((l_partkey = part.p_partkey) AND (l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                     Filter: ((((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(8 rows)

query 19 run 2
SET
SET
SET


 Limit  (cost=15096.65..15096.66 rows=1 width=32)
   ->  Aggregate  (cost=15096.65..15096.66 rows=1 width=32)
         ->  Nested Loop  (cost=0.56..15095.82 rows=110 width=12)
               ->  Seq Scan on part  (cost=0.00..12599.00 rows=481 width=30)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
               ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..5.18 rows=1 width=21)
                     Index Cond: ((l_partkey = part.p_partkey) AND (l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                     Filter: ((((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(8 rows)

query 19 run 3
SET
SET
SET


 Limit  (cost=15096.65..15096.66 rows=1 width=32)
   ->  Aggregate  (cost=15096.65..15096.66 rows=1 width=32)
         ->  Nested Loop  (cost=0.56..15095.82 rows=110 width=12)
               ->  Seq Scan on part  (cost=0.00..12599.00 rows=481 width=30)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
               ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..5.18 rows=1 width=21)
                     Index Cond: ((l_partkey = part.p_partkey) AND (l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                     Filter: ((((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(8 rows)

query 19 run 4
SET
SET
SET


 Limit  (cost=15096.65..15096.66 rows=1 width=32)
   ->  Aggregate  (cost=15096.65..15096.66 rows=1 width=32)
         ->  Nested Loop  (cost=0.56..15095.82 rows=110 width=12)
               ->  Seq Scan on part  (cost=0.00..12599.00 rows=481 width=30)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
               ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..5.18 rows=1 width=21)
                     Index Cond: ((l_partkey = part.p_partkey) AND (l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                     Filter: ((((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(8 rows)

query 19 run 5
SET
SET
SET


 Limit  (cost=15096.65..15096.66 rows=1 width=32)
   ->  Aggregate  (cost=15096.65..15096.66 rows=1 width=32)
         ->  Nested Loop  (cost=0.56..15095.82 rows=110 width=12)
               ->  Seq Scan on part  (cost=0.00..12599.00 rows=481 width=30)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
               ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..5.18 rows=1 width=21)
                     Index Cond: ((l_partkey = part.p_partkey) AND (l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                     Filter: ((((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(8 rows)

query 20 run 1
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=215029.51..215029.52 rows=1 width=51)
   ->  Sort  (cost=215029.51..215029.52 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=191580.58..215029.50 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..449.31 rows=400 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=59)
               ->  Materialize  (cost=191580.58..214574.19 rows=1 width=8)
                     ->  Nested Loop  (cost=191580.58..214574.19 rows=1 width=8)
                           ->  Hash Join  (cost=191580.16..208960.57 rows=4884 width=44)
                                 Hash Cond: (lineitem.l_partkey = part.p_partkey)
                                 ->  HashAggregate  (cost=185116.49..201227.56 rows=483550 width=40)
                                       Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                       Planned Partitions: 4
                                       ->  Bitmap Heap Scan on lineitem  (cost=16291.60..142457.22 rows=907041 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..16064.84 rows=907041 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Hash  (cost=6438.42..6438.42 rows=2020 width=4)
                                       ->  Index Only Scan using q20_idx_2 on part  (cost=0.42..6438.42 rows=2020 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                           ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.42..1.14 rows=1 width=12)
                                 Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                                 Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
(27 rows)

query 20 run 2
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=215029.51..215029.52 rows=1 width=51)
   ->  Sort  (cost=215029.51..215029.52 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=191580.58..215029.50 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..449.31 rows=400 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=59)
               ->  Materialize  (cost=191580.58..214574.19 rows=1 width=8)
                     ->  Nested Loop  (cost=191580.58..214574.19 rows=1 width=8)
                           ->  Hash Join  (cost=191580.16..208960.57 rows=4884 width=44)
                                 Hash Cond: (lineitem.l_partkey = part.p_partkey)
                                 ->  HashAggregate  (cost=185116.49..201227.56 rows=483550 width=40)
                                       Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                       Planned Partitions: 4
                                       ->  Bitmap Heap Scan on lineitem  (cost=16291.60..142457.22 rows=907041 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..16064.84 rows=907041 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Hash  (cost=6438.42..6438.42 rows=2020 width=4)
                                       ->  Index Only Scan using q20_idx_2 on part  (cost=0.42..6438.42 rows=2020 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                           ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.42..1.14 rows=1 width=12)
                                 Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                                 Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
(27 rows)

query 20 run 3
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=215029.51..215029.52 rows=1 width=51)
   ->  Sort  (cost=215029.51..215029.52 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=191580.58..215029.50 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..449.31 rows=400 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=59)
               ->  Materialize  (cost=191580.58..214574.19 rows=1 width=8)
                     ->  Nested Loop  (cost=191580.58..214574.19 rows=1 width=8)
                           ->  Hash Join  (cost=191580.16..208960.57 rows=4884 width=44)
                                 Hash Cond: (lineitem.l_partkey = part.p_partkey)
                                 ->  HashAggregate  (cost=185116.49..201227.56 rows=483550 width=40)
                                       Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                       Planned Partitions: 4
                                       ->  Bitmap Heap Scan on lineitem  (cost=16291.60..142457.22 rows=907041 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..16064.84 rows=907041 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Hash  (cost=6438.42..6438.42 rows=2020 width=4)
                                       ->  Index Only Scan using q20_idx_2 on part  (cost=0.42..6438.42 rows=2020 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                           ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.42..1.14 rows=1 width=12)
                                 Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                                 Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
(27 rows)

query 20 run 4
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=215029.51..215029.52 rows=1 width=51)
   ->  Sort  (cost=215029.51..215029.52 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=191580.58..215029.50 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..449.31 rows=400 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=59)
               ->  Materialize  (cost=191580.58..214574.19 rows=1 width=8)
                     ->  Nested Loop  (cost=191580.58..214574.19 rows=1 width=8)
                           ->  Hash Join  (cost=191580.16..208960.57 rows=4884 width=44)
                                 Hash Cond: (lineitem.l_partkey = part.p_partkey)
                                 ->  HashAggregate  (cost=185116.49..201227.56 rows=483550 width=40)
                                       Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                       Planned Partitions: 4
                                       ->  Bitmap Heap Scan on lineitem  (cost=16291.60..142457.22 rows=907041 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..16064.84 rows=907041 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Hash  (cost=6438.42..6438.42 rows=2020 width=4)
                                       ->  Index Only Scan using q20_idx_2 on part  (cost=0.42..6438.42 rows=2020 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                           ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.42..1.14 rows=1 width=12)
                                 Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                                 Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
(27 rows)

query 20 run 5
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=215029.51..215029.52 rows=1 width=51)
   ->  Sort  (cost=215029.51..215029.52 rows=1 width=51)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=191580.58..215029.50 rows=1 width=51)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..449.31 rows=400 width=55)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..323.00 rows=10000 width=59)
               ->  Materialize  (cost=191580.58..214574.19 rows=1 width=8)
                     ->  Nested Loop  (cost=191580.58..214574.19 rows=1 width=8)
                           ->  Hash Join  (cost=191580.16..208960.57 rows=4884 width=44)
                                 Hash Cond: (lineitem.l_partkey = part.p_partkey)
                                 ->  HashAggregate  (cost=185116.49..201227.56 rows=483550 width=40)
                                       Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                       Planned Partitions: 4
                                       ->  Bitmap Heap Scan on lineitem  (cost=16291.60..142457.22 rows=907041 width=13)
                                             Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                             ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..16064.84 rows=907041 width=0)
                                                   Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                                 ->  Hash  (cost=6438.42..6438.42 rows=2020 width=4)
                                       ->  Index Only Scan using q20_idx_2 on part  (cost=0.42..6438.42 rows=2020 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                           ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.42..1.14 rows=1 width=12)
                                 Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
                                 Filter: ((ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
(27 rows)

query 21 run 1
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=100567.15..100567.15 rows=1 width=34)
   ->  Sort  (cost=100567.15..100567.15 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=100567.12..100567.14 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=100567.12..100567.12 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=50634.50..100567.11 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=50634.07..100564.67 rows=1 width=38)
                                 ->  Hash Right Anti Join  (cost=50633.64..100562.31 rows=1 width=34)
                                       Hash Cond: (l3.l_orderkey = l1.l_orderkey)
                                       Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                       ->  Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.43..41094.30 rows=2000391 width=8)
                                       ->  Hash  (cost=49633.21..49633.21 rows=80000 width=34)
                                             ->  Hash Join  (cost=237.88..49633.21 rows=80000 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.43..41094.30 rows=2000391 width=8)
                                                   ->  Hash  (cost=232.45..232.45 rows=400 width=30)
                                                         ->  Nested Loop  (cost=5.38..232.45 rows=400 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=5.38..227.14 rows=400 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..5.29 rows=400 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.36 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.43..2.42 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(30 rows)

query 21 run 2
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=100567.15..100567.15 rows=1 width=34)
   ->  Sort  (cost=100567.15..100567.15 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=100567.12..100567.14 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=100567.12..100567.12 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=50634.50..100567.11 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=50634.07..100564.67 rows=1 width=38)
                                 ->  Hash Right Anti Join  (cost=50633.64..100562.31 rows=1 width=34)
                                       Hash Cond: (l3.l_orderkey = l1.l_orderkey)
                                       Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                       ->  Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.43..41094.30 rows=2000391 width=8)
                                       ->  Hash  (cost=49633.21..49633.21 rows=80000 width=34)
                                             ->  Hash Join  (cost=237.88..49633.21 rows=80000 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.43..41094.30 rows=2000391 width=8)
                                                   ->  Hash  (cost=232.45..232.45 rows=400 width=30)
                                                         ->  Nested Loop  (cost=5.38..232.45 rows=400 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=5.38..227.14 rows=400 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..5.29 rows=400 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.36 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.43..2.42 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(30 rows)

query 21 run 3
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=100567.15..100567.15 rows=1 width=34)
   ->  Sort  (cost=100567.15..100567.15 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=100567.12..100567.14 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=100567.12..100567.12 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=50634.50..100567.11 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=50634.07..100564.67 rows=1 width=38)
                                 ->  Hash Right Anti Join  (cost=50633.64..100562.31 rows=1 width=34)
                                       Hash Cond: (l3.l_orderkey = l1.l_orderkey)
                                       Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                       ->  Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.43..41094.30 rows=2000391 width=8)
                                       ->  Hash  (cost=49633.21..49633.21 rows=80000 width=34)
                                             ->  Hash Join  (cost=237.88..49633.21 rows=80000 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.43..41094.30 rows=2000391 width=8)
                                                   ->  Hash  (cost=232.45..232.45 rows=400 width=30)
                                                         ->  Nested Loop  (cost=5.38..232.45 rows=400 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=5.38..227.14 rows=400 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..5.29 rows=400 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.36 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.43..2.42 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(30 rows)

query 21 run 4
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=100567.15..100567.15 rows=1 width=34)
   ->  Sort  (cost=100567.15..100567.15 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=100567.12..100567.14 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=100567.12..100567.12 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=50634.50..100567.11 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=50634.07..100564.67 rows=1 width=38)
                                 ->  Hash Right Anti Join  (cost=50633.64..100562.31 rows=1 width=34)
                                       Hash Cond: (l3.l_orderkey = l1.l_orderkey)
                                       Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                       ->  Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.43..41094.30 rows=2000391 width=8)
                                       ->  Hash  (cost=49633.21..49633.21 rows=80000 width=34)
                                             ->  Hash Join  (cost=237.88..49633.21 rows=80000 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.43..41094.30 rows=2000391 width=8)
                                                   ->  Hash  (cost=232.45..232.45 rows=400 width=30)
                                                         ->  Nested Loop  (cost=5.38..232.45 rows=400 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=5.38..227.14 rows=400 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..5.29 rows=400 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.36 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.43..2.42 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(30 rows)

query 21 run 5
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=100567.15..100567.15 rows=1 width=34)
   ->  Sort  (cost=100567.15..100567.15 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=100567.12..100567.14 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=100567.12..100567.12 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=50634.50..100567.11 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=50634.07..100564.67 rows=1 width=38)
                                 ->  Hash Right Anti Join  (cost=50633.64..100562.31 rows=1 width=34)
                                       Hash Cond: (l3.l_orderkey = l1.l_orderkey)
                                       Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                       ->  Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.43..41094.30 rows=2000391 width=8)
                                       ->  Hash  (cost=49633.21..49633.21 rows=80000 width=34)
                                             ->  Hash Join  (cost=237.88..49633.21 rows=80000 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.43..41094.30 rows=2000391 width=8)
                                                   ->  Hash  (cost=232.45..232.45 rows=400 width=30)
                                                         ->  Nested Loop  (cost=5.38..232.45 rows=400 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=5.38..227.14 rows=400 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..5.29 rows=400 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.36 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.43..2.42 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(30 rows)

query 22 run 1
SET
SET
SET
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=16128.21..16128.24 rows=1 width=72)
   InitPlan 1
     ->  Aggregate  (cost=7546.44..7546.45 rows=1 width=32)
           ->  Seq Scan on customer customer_1  (cost=0.00..7534.50 rows=4774 width=6)
                 Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=8581.77..8602.25 rows=745 width=72)
         Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
         ->  Sort  (cost=8581.77..8583.63 rows=745 width=38)
               Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
               ->  Nested Loop Anti Join  (cost=0.43..8546.23 rows=745 width=38)
                     ->  Seq Scan on customer  (cost=0.00..7534.50 rows=1750 width=26)
                           Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.00 rows=17 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
(14 rows)

query 22 run 2
SET
SET
SET
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=16128.21..16128.24 rows=1 width=72)
   InitPlan 1
     ->  Aggregate  (cost=7546.44..7546.45 rows=1 width=32)
           ->  Seq Scan on customer customer_1  (cost=0.00..7534.50 rows=4774 width=6)
                 Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=8581.77..8602.25 rows=745 width=72)
         Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
         ->  Sort  (cost=8581.77..8583.63 rows=745 width=38)
               Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
               ->  Nested Loop Anti Join  (cost=0.43..8546.23 rows=745 width=38)
                     ->  Seq Scan on customer  (cost=0.00..7534.50 rows=1750 width=26)
                           Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.00 rows=17 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
(14 rows)

query 22 run 3
SET
SET
SET
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=16128.21..16128.24 rows=1 width=72)
   InitPlan 1
     ->  Aggregate  (cost=7546.44..7546.45 rows=1 width=32)
           ->  Seq Scan on customer customer_1  (cost=0.00..7534.50 rows=4774 width=6)
                 Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=8581.77..8602.25 rows=745 width=72)
         Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
         ->  Sort  (cost=8581.77..8583.63 rows=745 width=38)
               Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
               ->  Nested Loop Anti Join  (cost=0.43..8546.23 rows=745 width=38)
                     ->  Seq Scan on customer  (cost=0.00..7534.50 rows=1750 width=26)
                           Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.00 rows=17 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
(14 rows)

query 22 run 4
SET
SET
SET
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=16128.21..16128.24 rows=1 width=72)
   InitPlan 1
     ->  Aggregate  (cost=7546.44..7546.45 rows=1 width=32)
           ->  Seq Scan on customer customer_1  (cost=0.00..7534.50 rows=4774 width=6)
                 Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=8581.77..8602.25 rows=745 width=72)
         Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
         ->  Sort  (cost=8581.77..8583.63 rows=745 width=38)
               Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
               ->  Nested Loop Anti Join  (cost=0.43..8546.23 rows=745 width=38)
                     ->  Seq Scan on customer  (cost=0.00..7534.50 rows=1750 width=26)
                           Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.00 rows=17 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
(14 rows)

query 22 run 5
SET
SET
SET
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=16128.21..16128.24 rows=1 width=72)
   InitPlan 1
     ->  Aggregate  (cost=7546.44..7546.45 rows=1 width=32)
           ->  Seq Scan on customer customer_1  (cost=0.00..7534.50 rows=4774 width=6)
                 Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=8581.77..8602.25 rows=745 width=72)
         Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
         ->  Sort  (cost=8581.77..8583.63 rows=745 width=38)
               Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
               ->  Nested Loop Anti Join  (cost=0.43..8546.23 rows=745 width=38)
                     ->  Seq Scan on customer  (cost=0.00..7534.50 rows=1750 width=26)
                           Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.00 rows=17 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
(14 rows)

