query 1 run 1
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1831998.36..1831999.00 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=1831998.36..1832002.18 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=1831998.36..1832001.23 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=1830998.30..1830998.32 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=1830998.09..1830998.23 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1312582.68 rows=14811869 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 1 run 2
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1831998.36..1831999.00 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=1831998.36..1832002.18 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=1831998.36..1832001.23 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=1830998.30..1830998.32 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=1830998.09..1830998.23 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1312582.68 rows=14811869 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 1 run 3
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1831998.36..1831999.00 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=1831998.36..1832002.18 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=1831998.36..1832001.23 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=1830998.30..1830998.32 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=1830998.09..1830998.23 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1312582.68 rows=14811869 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 1 run 4
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1831998.36..1831999.00 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=1831998.36..1832002.18 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=1831998.36..1832001.23 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=1830998.30..1830998.32 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=1830998.09..1830998.23 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1312582.68 rows=14811869 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 1 run 5
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1831998.36..1831999.00 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=1831998.36..1832002.18 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=1831998.36..1832001.23 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=1830998.30..1830998.32 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=1830998.09..1830998.23 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1312582.68 rows=14811869 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 2 run 1
SET
SET
SET
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=433389.75..433389.76 rows=1 width=192)
   ->  Sort  (cost=433389.75..433389.76 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=50.66..433389.74 rows=1 width=192)
               Join Filter: (supplier.s_nationkey = nation.n_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=50.66..433387.05 rows=1 width=170)
                     ->  Nested Loop  (cost=50.66..433387.04 rows=1 width=170)
                           ->  Nested Loop  (cost=50.37..433383.03 rows=1 width=34)
                                 ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..54322.54 rows=7286 width=30)
                                       Index Cond: (p_size = 16)
                                       Filter: ((p_type)::text ~~ '%NICKEL'::text)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=49.94..52.02 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=49.50..49.51 rows=1 width=32)
                                               ->  Nested Loop  (cost=2.41..49.49 rows=4 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Hash Join  (cost=2.41..48.20 rows=18 width=10)
                                                           Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                                           ->  Nested Loop  (cost=0.85..46.58 rows=18 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.43..2.75 rows=18 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.42..2.43 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                                                 ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
                           ->  Index Scan using supplier_pkey on supplier  (cost=0.29..4.01 rows=1 width=144)
                                 Index Cond: (s_suppkey = partsupp.ps_suppkey)
(35 rows)

query 2 run 2
SET
SET
SET
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=433389.75..433389.76 rows=1 width=192)
   ->  Sort  (cost=433389.75..433389.76 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=50.66..433389.74 rows=1 width=192)
               Join Filter: (supplier.s_nationkey = nation.n_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=50.66..433387.05 rows=1 width=170)
                     ->  Nested Loop  (cost=50.66..433387.04 rows=1 width=170)
                           ->  Nested Loop  (cost=50.37..433383.03 rows=1 width=34)
                                 ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..54322.54 rows=7286 width=30)
                                       Index Cond: (p_size = 16)
                                       Filter: ((p_type)::text ~~ '%NICKEL'::text)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=49.94..52.02 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=49.50..49.51 rows=1 width=32)
                                               ->  Nested Loop  (cost=2.41..49.49 rows=4 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Hash Join  (cost=2.41..48.20 rows=18 width=10)
                                                           Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                                           ->  Nested Loop  (cost=0.85..46.58 rows=18 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.43..2.75 rows=18 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.42..2.43 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                                                 ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
                           ->  Index Scan using supplier_pkey on supplier  (cost=0.29..4.01 rows=1 width=144)
                                 Index Cond: (s_suppkey = partsupp.ps_suppkey)
(35 rows)

query 2 run 3
SET
SET
SET
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=433389.75..433389.76 rows=1 width=192)
   ->  Sort  (cost=433389.75..433389.76 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=50.66..433389.74 rows=1 width=192)
               Join Filter: (supplier.s_nationkey = nation.n_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=50.66..433387.05 rows=1 width=170)
                     ->  Nested Loop  (cost=50.66..433387.04 rows=1 width=170)
                           ->  Nested Loop  (cost=50.37..433383.03 rows=1 width=34)
                                 ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..54322.54 rows=7286 width=30)
                                       Index Cond: (p_size = 16)
                                       Filter: ((p_type)::text ~~ '%NICKEL'::text)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=49.94..52.02 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=49.50..49.51 rows=1 width=32)
                                               ->  Nested Loop  (cost=2.41..49.49 rows=4 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Hash Join  (cost=2.41..48.20 rows=18 width=10)
                                                           Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                                           ->  Nested Loop  (cost=0.85..46.58 rows=18 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.43..2.75 rows=18 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.42..2.43 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                                                 ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
                           ->  Index Scan using supplier_pkey on supplier  (cost=0.29..4.01 rows=1 width=144)
                                 Index Cond: (s_suppkey = partsupp.ps_suppkey)
(35 rows)

query 2 run 4
SET
SET
SET
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=433389.75..433389.76 rows=1 width=192)
   ->  Sort  (cost=433389.75..433389.76 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=50.66..433389.74 rows=1 width=192)
               Join Filter: (supplier.s_nationkey = nation.n_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=50.66..433387.05 rows=1 width=170)
                     ->  Nested Loop  (cost=50.66..433387.04 rows=1 width=170)
                           ->  Nested Loop  (cost=50.37..433383.03 rows=1 width=34)
                                 ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..54322.54 rows=7286 width=30)
                                       Index Cond: (p_size = 16)
                                       Filter: ((p_type)::text ~~ '%NICKEL'::text)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=49.94..52.02 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=49.50..49.51 rows=1 width=32)
                                               ->  Nested Loop  (cost=2.41..49.49 rows=4 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Hash Join  (cost=2.41..48.20 rows=18 width=10)
                                                           Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                                           ->  Nested Loop  (cost=0.85..46.58 rows=18 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.43..2.75 rows=18 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.42..2.43 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                                                 ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
                           ->  Index Scan using supplier_pkey on supplier  (cost=0.29..4.01 rows=1 width=144)
                                 Index Cond: (s_suppkey = partsupp.ps_suppkey)
(35 rows)

query 2 run 5
SET
SET
SET
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=433389.75..433389.76 rows=1 width=192)
   ->  Sort  (cost=433389.75..433389.76 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=50.66..433389.74 rows=1 width=192)
               Join Filter: (supplier.s_nationkey = nation.n_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=50.66..433387.05 rows=1 width=170)
                     ->  Nested Loop  (cost=50.66..433387.04 rows=1 width=170)
                           ->  Nested Loop  (cost=50.37..433383.03 rows=1 width=34)
                                 ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..54322.54 rows=7286 width=30)
                                       Index Cond: (p_size = 16)
                                       Filter: ((p_type)::text ~~ '%NICKEL'::text)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=49.94..52.02 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=49.50..49.51 rows=1 width=32)
                                               ->  Nested Loop  (cost=2.41..49.49 rows=4 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Hash Join  (cost=2.41..48.20 rows=18 width=10)
                                                           Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                                           ->  Nested Loop  (cost=0.85..46.58 rows=18 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.43..2.75 rows=18 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.42..2.43 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                                                 ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
                           ->  Index Scan using supplier_pkey on supplier  (cost=0.29..4.01 rows=1 width=144)
                                 Index Cond: (s_suppkey = partsupp.ps_suppkey)
(35 rows)

query 3 run 1
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2318876.93..2318876.96 rows=10 width=44)
   ->  Sort  (cost=2318876.93..2326671.00 rows=3117627 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=1792483.44..2251506.13 rows=3117627 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=1792483.44..2165771.39 rows=3117627 width=24)
                     Workers Planned: 4
                     ->  Sort  (cost=1791483.38..1793431.90 rows=779407 width=24)
                           Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Parallel Hash Join  (cost=358969.04..1703793.05 rows=779407 width=24)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Parallel Seq Scan on lineitem  (cost=0.00..1312582.68 rows=8078084 width=16)
                                       Filter: (l_shipdate > '1995-03-07'::date)
                                 ->  Parallel Hash  (cost=354446.70..354446.70 rows=361787 width=12)
                                       ->  Parallel Hash Join  (cost=41575.47..354446.70 rows=361787 width=12)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..308139.32 rows=1802628 width=16)
                                                   Filter: (o_orderdate < '1995-03-07'::date)
                                             ->  Parallel Hash  (cost=40634.66..40634.66 rows=75265 width=4)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..40634.66 rows=75265 width=4)
                                                         Filter: (c_mktsegment = 'BUILDING'::bpchar)
(21 rows)

query 3 run 2
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2318876.93..2318876.96 rows=10 width=44)
   ->  Sort  (cost=2318876.93..2326671.00 rows=3117627 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=1792483.44..2251506.13 rows=3117627 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=1792483.44..2165771.39 rows=3117627 width=24)
                     Workers Planned: 4
                     ->  Sort  (cost=1791483.38..1793431.90 rows=779407 width=24)
                           Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Parallel Hash Join  (cost=358969.04..1703793.05 rows=779407 width=24)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Parallel Seq Scan on lineitem  (cost=0.00..1312582.68 rows=8078084 width=16)
                                       Filter: (l_shipdate > '1995-03-07'::date)
                                 ->  Parallel Hash  (cost=354446.70..354446.70 rows=361787 width=12)
                                       ->  Parallel Hash Join  (cost=41575.47..354446.70 rows=361787 width=12)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..308139.32 rows=1802628 width=16)
                                                   Filter: (o_orderdate < '1995-03-07'::date)
                                             ->  Parallel Hash  (cost=40634.66..40634.66 rows=75265 width=4)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..40634.66 rows=75265 width=4)
                                                         Filter: (c_mktsegment = 'BUILDING'::bpchar)
(21 rows)

query 3 run 3
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2318876.93..2318876.96 rows=10 width=44)
   ->  Sort  (cost=2318876.93..2326671.00 rows=3117627 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=1792483.44..2251506.13 rows=3117627 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=1792483.44..2165771.39 rows=3117627 width=24)
                     Workers Planned: 4
                     ->  Sort  (cost=1791483.38..1793431.90 rows=779407 width=24)
                           Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Parallel Hash Join  (cost=358969.04..1703793.05 rows=779407 width=24)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Parallel Seq Scan on lineitem  (cost=0.00..1312582.68 rows=8078084 width=16)
                                       Filter: (l_shipdate > '1995-03-07'::date)
                                 ->  Parallel Hash  (cost=354446.70..354446.70 rows=361787 width=12)
                                       ->  Parallel Hash Join  (cost=41575.47..354446.70 rows=361787 width=12)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..308139.32 rows=1802628 width=16)
                                                   Filter: (o_orderdate < '1995-03-07'::date)
                                             ->  Parallel Hash  (cost=40634.66..40634.66 rows=75265 width=4)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..40634.66 rows=75265 width=4)
                                                         Filter: (c_mktsegment = 'BUILDING'::bpchar)
(21 rows)

query 3 run 4
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2318876.93..2318876.96 rows=10 width=44)
   ->  Sort  (cost=2318876.93..2326671.00 rows=3117627 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=1792483.44..2251506.13 rows=3117627 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=1792483.44..2165771.39 rows=3117627 width=24)
                     Workers Planned: 4
                     ->  Sort  (cost=1791483.38..1793431.90 rows=779407 width=24)
                           Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Parallel Hash Join  (cost=358969.04..1703793.05 rows=779407 width=24)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Parallel Seq Scan on lineitem  (cost=0.00..1312582.68 rows=8078084 width=16)
                                       Filter: (l_shipdate > '1995-03-07'::date)
                                 ->  Parallel Hash  (cost=354446.70..354446.70 rows=361787 width=12)
                                       ->  Parallel Hash Join  (cost=41575.47..354446.70 rows=361787 width=12)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..308139.32 rows=1802628 width=16)
                                                   Filter: (o_orderdate < '1995-03-07'::date)
                                             ->  Parallel Hash  (cost=40634.66..40634.66 rows=75265 width=4)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..40634.66 rows=75265 width=4)
                                                         Filter: (c_mktsegment = 'BUILDING'::bpchar)
(21 rows)

query 3 run 5
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2318876.93..2318876.96 rows=10 width=44)
   ->  Sort  (cost=2318876.93..2326671.00 rows=3117627 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=1792483.44..2251506.13 rows=3117627 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=1792483.44..2165771.39 rows=3117627 width=24)
                     Workers Planned: 4
                     ->  Sort  (cost=1791483.38..1793431.90 rows=779407 width=24)
                           Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Parallel Hash Join  (cost=358969.04..1703793.05 rows=779407 width=24)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Parallel Seq Scan on lineitem  (cost=0.00..1312582.68 rows=8078084 width=16)
                                       Filter: (l_shipdate > '1995-03-07'::date)
                                 ->  Parallel Hash  (cost=354446.70..354446.70 rows=361787 width=12)
                                       ->  Parallel Hash Join  (cost=41575.47..354446.70 rows=361787 width=12)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..308139.32 rows=1802628 width=16)
                                                   Filter: (o_orderdate < '1995-03-07'::date)
                                             ->  Parallel Hash  (cost=40634.66..40634.66 rows=75265 width=4)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..40634.66 rows=75265 width=4)
                                                         Filter: (c_mktsegment = 'BUILDING'::bpchar)
(21 rows)

query 4 run 1
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=282769.08..535406.20 rows=1 width=24)
   ->  GroupAggregate  (cost=282769.08..1545954.68 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop Semi Join  (cost=282769.08..1543189.27 rows=553073 width=16)
               ->  Gather Merge  (cost=282768.64..349006.80 rows=553208 width=20)
                     Workers Planned: 4
                     ->  Sort  (cost=281768.58..282114.34 rows=138302 width=20)
                           Sort Key: orders.o_orderpriority
                           ->  Parallel Bitmap Heap Scan on orders  (cost=6616.82..269959.35 rows=138302 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6478.52 rows=553208 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
               ->  Index Only Scan using q4_idx_1 on lineitem  (cost=0.44..2.44 rows=1 width=4)
                     Index Cond: (l_orderkey = orders.o_orderkey)
(14 rows)

query 4 run 2
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=282769.08..535406.20 rows=1 width=24)
   ->  GroupAggregate  (cost=282769.08..1545954.68 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop Semi Join  (cost=282769.08..1543189.27 rows=553073 width=16)
               ->  Gather Merge  (cost=282768.64..349006.80 rows=553208 width=20)
                     Workers Planned: 4
                     ->  Sort  (cost=281768.58..282114.34 rows=138302 width=20)
                           Sort Key: orders.o_orderpriority
                           ->  Parallel Bitmap Heap Scan on orders  (cost=6616.82..269959.35 rows=138302 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6478.52 rows=553208 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
               ->  Index Only Scan using q4_idx_1 on lineitem  (cost=0.44..2.44 rows=1 width=4)
                     Index Cond: (l_orderkey = orders.o_orderkey)
(14 rows)

query 4 run 3
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=282769.08..535406.20 rows=1 width=24)
   ->  GroupAggregate  (cost=282769.08..1545954.68 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop Semi Join  (cost=282769.08..1543189.27 rows=553073 width=16)
               ->  Gather Merge  (cost=282768.64..349006.80 rows=553208 width=20)
                     Workers Planned: 4
                     ->  Sort  (cost=281768.58..282114.34 rows=138302 width=20)
                           Sort Key: orders.o_orderpriority
                           ->  Parallel Bitmap Heap Scan on orders  (cost=6616.82..269959.35 rows=138302 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6478.52 rows=553208 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
               ->  Index Only Scan using q4_idx_1 on lineitem  (cost=0.44..2.44 rows=1 width=4)
                     Index Cond: (l_orderkey = orders.o_orderkey)
(14 rows)

query 4 run 4
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=282769.08..535406.20 rows=1 width=24)
   ->  GroupAggregate  (cost=282769.08..1545954.68 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop Semi Join  (cost=282769.08..1543189.27 rows=553073 width=16)
               ->  Gather Merge  (cost=282768.64..349006.80 rows=553208 width=20)
                     Workers Planned: 4
                     ->  Sort  (cost=281768.58..282114.34 rows=138302 width=20)
                           Sort Key: orders.o_orderpriority
                           ->  Parallel Bitmap Heap Scan on orders  (cost=6616.82..269959.35 rows=138302 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6478.52 rows=553208 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
               ->  Index Only Scan using q4_idx_1 on lineitem  (cost=0.44..2.44 rows=1 width=4)
                     Index Cond: (l_orderkey = orders.o_orderkey)
(14 rows)

query 4 run 5
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=282769.08..535406.20 rows=1 width=24)
   ->  GroupAggregate  (cost=282769.08..1545954.68 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop Semi Join  (cost=282769.08..1543189.27 rows=553073 width=16)
               ->  Gather Merge  (cost=282768.64..349006.80 rows=553208 width=20)
                     Workers Planned: 4
                     ->  Sort  (cost=281768.58..282114.34 rows=138302 width=20)
                           Sort Key: orders.o_orderpriority
                           ->  Parallel Bitmap Heap Scan on orders  (cost=6616.82..269959.35 rows=138302 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6478.52 rows=553208 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
               ->  Index Only Scan using q4_idx_1 on lineitem  (cost=0.44..2.44 rows=1 width=4)
                     Index Cond: (l_orderkey = orders.o_orderkey)
(14 rows)

query 5 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=651461.88..651461.88 rows=1 width=58)
   ->  Sort  (cost=651461.88..651461.94 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=651224.03..651461.76 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=651224.03..651460.69 rows=100 width=58)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=650223.97..650448.72 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=650223.97..650268.86 rows=17955 width=38)
                                 Sort Key: nation.n_name
                                 ->  Parallel Hash Join  (cost=73579.35..648955.27 rows=17955 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=69887.76..642885.69 rows=452949 width=50)
                                             ->  Parallel Hash Join  (cost=69887.19..342056.92 rows=113265 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=27093.70..296856.55 rows=566324 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..26527.38 rows=2265294 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Parallel Hash  (cost=41855.97..41855.97 rows=75002 width=38)
                                                         ->  Hash Join  (cost=2.51..41855.97 rows=75002 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39697.13 rows=375013 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.56..2.62 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
(35 rows)

query 5 run 2
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=651461.88..651461.88 rows=1 width=58)
   ->  Sort  (cost=651461.88..651461.94 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=651224.03..651461.76 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=651224.03..651460.69 rows=100 width=58)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=650223.97..650448.72 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=650223.97..650268.86 rows=17955 width=38)
                                 Sort Key: nation.n_name
                                 ->  Parallel Hash Join  (cost=73579.35..648955.27 rows=17955 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=69887.76..642885.69 rows=452949 width=50)
                                             ->  Parallel Hash Join  (cost=69887.19..342056.92 rows=113265 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=27093.70..296856.55 rows=566324 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..26527.38 rows=2265294 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Parallel Hash  (cost=41855.97..41855.97 rows=75002 width=38)
                                                         ->  Hash Join  (cost=2.51..41855.97 rows=75002 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39697.13 rows=375013 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.56..2.62 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
(35 rows)

query 5 run 3
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=651461.88..651461.88 rows=1 width=58)
   ->  Sort  (cost=651461.88..651461.94 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=651224.03..651461.76 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=651224.03..651460.69 rows=100 width=58)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=650223.97..650448.72 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=650223.97..650268.86 rows=17955 width=38)
                                 Sort Key: nation.n_name
                                 ->  Parallel Hash Join  (cost=73579.35..648955.27 rows=17955 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=69887.76..642885.69 rows=452949 width=50)
                                             ->  Parallel Hash Join  (cost=69887.19..342056.92 rows=113265 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=27093.70..296856.55 rows=566324 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..26527.38 rows=2265294 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Parallel Hash  (cost=41855.97..41855.97 rows=75002 width=38)
                                                         ->  Hash Join  (cost=2.51..41855.97 rows=75002 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39697.13 rows=375013 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.56..2.62 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
(35 rows)

query 5 run 4
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=651461.88..651461.88 rows=1 width=58)
   ->  Sort  (cost=651461.88..651461.94 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=651224.03..651461.76 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=651224.03..651460.69 rows=100 width=58)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=650223.97..650448.72 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=650223.97..650268.86 rows=17955 width=38)
                                 Sort Key: nation.n_name
                                 ->  Parallel Hash Join  (cost=73579.35..648955.27 rows=17955 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=69887.76..642885.69 rows=452949 width=50)
                                             ->  Parallel Hash Join  (cost=69887.19..342056.92 rows=113265 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=27093.70..296856.55 rows=566324 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..26527.38 rows=2265294 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Parallel Hash  (cost=41855.97..41855.97 rows=75002 width=38)
                                                         ->  Hash Join  (cost=2.51..41855.97 rows=75002 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39697.13 rows=375013 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.56..2.62 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
(35 rows)

query 5 run 5
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=651461.88..651461.88 rows=1 width=58)
   ->  Sort  (cost=651461.88..651461.94 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=651224.03..651461.76 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=651224.03..651460.69 rows=100 width=58)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=650223.97..650448.72 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=650223.97..650268.86 rows=17955 width=38)
                                 Sort Key: nation.n_name
                                 ->  Parallel Hash Join  (cost=73579.35..648955.27 rows=17955 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=69887.76..642885.69 rows=452949 width=50)
                                             ->  Parallel Hash Join  (cost=69887.19..342056.92 rows=113265 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=27093.70..296856.55 rows=566324 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..26527.38 rows=2265294 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Parallel Hash  (cost=41855.97..41855.97 rows=75002 width=38)
                                                         ->  Hash Join  (cost=2.51..41855.97 rows=75002 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39697.13 rows=375013 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.56..2.62 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
(35 rows)

query 6 run 1
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1369485.78..1369485.79 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1369485.78..1369485.79 rows=1 width=32)
         ->  Gather  (cost=1369485.35..1369485.76 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1368485.35..1368485.36 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=230638.83..1366994.61 rows=298147 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..230340.69 rows=1192589 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(9 rows)

query 6 run 2
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1369485.78..1369485.79 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1369485.78..1369485.79 rows=1 width=32)
         ->  Gather  (cost=1369485.35..1369485.76 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1368485.35..1368485.36 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=230638.83..1366994.61 rows=298147 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..230340.69 rows=1192589 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(9 rows)

query 6 run 3
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1369485.78..1369485.79 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1369485.78..1369485.79 rows=1 width=32)
         ->  Gather  (cost=1369485.35..1369485.76 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1368485.35..1368485.36 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=230638.83..1366994.61 rows=298147 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..230340.69 rows=1192589 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(9 rows)

query 6 run 4
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1369485.78..1369485.79 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1369485.78..1369485.79 rows=1 width=32)
         ->  Gather  (cost=1369485.35..1369485.76 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1368485.35..1368485.36 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=230638.83..1366994.61 rows=298147 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..230340.69 rows=1192589 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(9 rows)

query 6 run 5
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1369485.78..1369485.79 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1369485.78..1369485.79 rows=1 width=32)
         ->  Gather  (cost=1369485.35..1369485.76 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1368485.35..1368485.36 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=230638.83..1366994.61 rows=298147 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..230340.69 rows=1192589 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(9 rows)

query 7 run 1
SET
SET
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1419849.00..1420886.11 rows=1 width=116)
   ->  GroupAggregate  (cost=1419849.00..11828275.14 rows=10036 width=116)
         Group Key: n1.n_name, n2.n_name, EXTRACT(year FROM lineitem.l_shipdate)
         ->  Nested Loop  (cost=1419849.00..11827227.75 rows=59790 width=96)
               Join Filter: (customer.c_nationkey = n2.n_nationkey)
               ->  Nested Loop  (cost=1419848.58..8187365.05 rows=1494755 width=76)
                     ->  Gather Merge  (cost=1419848.14..1598822.09 rows=1494755 width=76)
                           Workers Planned: 4
                           ->  Sort  (cost=1418848.08..1419782.30 rows=373689 width=76)
                                 Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                                 ->  Parallel Hash Join  (cost=3140.96..1372397.90 rows=373689 width=76)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..1350070.61 rows=4530178 width=24)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                       ->  Parallel Hash  (cost=3079.76..3079.76 rows=4896 width=60)
                                             ->  Hash Join  (cost=2.87..3079.76 rows=4896 width=60)
                                                   Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                                   ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                                   ->  Hash  (cost=2.84..2.84 rows=2 width=60)
                                                         ->  Nested Loop  (cost=0.00..2.84 rows=2 width=60)
                                                               Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                                               ->  Materialize  (cost=0.00..1.39 rows=2 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                           Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                     ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.41 rows=1 width=8)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
               ->  Index Only Scan using q10_idx_1 on customer  (cost=0.43..2.42 rows=1 width=8)
                     Index Cond: (c_custkey = orders.o_custkey)
(30 rows)

query 7 run 2
SET
SET
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1419849.00..1420886.11 rows=1 width=116)
   ->  GroupAggregate  (cost=1419849.00..11828275.14 rows=10036 width=116)
         Group Key: n1.n_name, n2.n_name, EXTRACT(year FROM lineitem.l_shipdate)
         ->  Nested Loop  (cost=1419849.00..11827227.75 rows=59790 width=96)
               Join Filter: (customer.c_nationkey = n2.n_nationkey)
               ->  Nested Loop  (cost=1419848.58..8187365.05 rows=1494755 width=76)
                     ->  Gather Merge  (cost=1419848.14..1598822.09 rows=1494755 width=76)
                           Workers Planned: 4
                           ->  Sort  (cost=1418848.08..1419782.30 rows=373689 width=76)
                                 Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                                 ->  Parallel Hash Join  (cost=3140.96..1372397.90 rows=373689 width=76)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..1350070.61 rows=4530178 width=24)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                       ->  Parallel Hash  (cost=3079.76..3079.76 rows=4896 width=60)
                                             ->  Hash Join  (cost=2.87..3079.76 rows=4896 width=60)
                                                   Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                                   ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                                   ->  Hash  (cost=2.84..2.84 rows=2 width=60)
                                                         ->  Nested Loop  (cost=0.00..2.84 rows=2 width=60)
                                                               Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                                               ->  Materialize  (cost=0.00..1.39 rows=2 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                           Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                     ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.41 rows=1 width=8)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
               ->  Index Only Scan using q10_idx_1 on customer  (cost=0.43..2.42 rows=1 width=8)
                     Index Cond: (c_custkey = orders.o_custkey)
(30 rows)

query 7 run 3
SET
SET
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1419849.00..1420886.11 rows=1 width=116)
   ->  GroupAggregate  (cost=1419849.00..11828275.14 rows=10036 width=116)
         Group Key: n1.n_name, n2.n_name, EXTRACT(year FROM lineitem.l_shipdate)
         ->  Nested Loop  (cost=1419849.00..11827227.75 rows=59790 width=96)
               Join Filter: (customer.c_nationkey = n2.n_nationkey)
               ->  Nested Loop  (cost=1419848.58..8187365.05 rows=1494755 width=76)
                     ->  Gather Merge  (cost=1419848.14..1598822.09 rows=1494755 width=76)
                           Workers Planned: 4
                           ->  Sort  (cost=1418848.08..1419782.30 rows=373689 width=76)
                                 Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                                 ->  Parallel Hash Join  (cost=3140.96..1372397.90 rows=373689 width=76)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..1350070.61 rows=4530178 width=24)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                       ->  Parallel Hash  (cost=3079.76..3079.76 rows=4896 width=60)
                                             ->  Hash Join  (cost=2.87..3079.76 rows=4896 width=60)
                                                   Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                                   ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                                   ->  Hash  (cost=2.84..2.84 rows=2 width=60)
                                                         ->  Nested Loop  (cost=0.00..2.84 rows=2 width=60)
                                                               Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                                               ->  Materialize  (cost=0.00..1.39 rows=2 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                           Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                     ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.41 rows=1 width=8)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
               ->  Index Only Scan using q10_idx_1 on customer  (cost=0.43..2.42 rows=1 width=8)
                     Index Cond: (c_custkey = orders.o_custkey)
(30 rows)

query 7 run 4
SET
SET
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1419849.00..1420886.11 rows=1 width=116)
   ->  GroupAggregate  (cost=1419849.00..11828275.14 rows=10036 width=116)
         Group Key: n1.n_name, n2.n_name, EXTRACT(year FROM lineitem.l_shipdate)
         ->  Nested Loop  (cost=1419849.00..11827227.75 rows=59790 width=96)
               Join Filter: (customer.c_nationkey = n2.n_nationkey)
               ->  Nested Loop  (cost=1419848.58..8187365.05 rows=1494755 width=76)
                     ->  Gather Merge  (cost=1419848.14..1598822.09 rows=1494755 width=76)
                           Workers Planned: 4
                           ->  Sort  (cost=1418848.08..1419782.30 rows=373689 width=76)
                                 Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                                 ->  Parallel Hash Join  (cost=3140.96..1372397.90 rows=373689 width=76)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..1350070.61 rows=4530178 width=24)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                       ->  Parallel Hash  (cost=3079.76..3079.76 rows=4896 width=60)
                                             ->  Hash Join  (cost=2.87..3079.76 rows=4896 width=60)
                                                   Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                                   ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                                   ->  Hash  (cost=2.84..2.84 rows=2 width=60)
                                                         ->  Nested Loop  (cost=0.00..2.84 rows=2 width=60)
                                                               Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                                               ->  Materialize  (cost=0.00..1.39 rows=2 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                           Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                     ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.41 rows=1 width=8)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
               ->  Index Only Scan using q10_idx_1 on customer  (cost=0.43..2.42 rows=1 width=8)
                     Index Cond: (c_custkey = orders.o_custkey)
(30 rows)

query 7 run 5
SET
SET
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1419849.00..1420886.11 rows=1 width=116)
   ->  GroupAggregate  (cost=1419849.00..11828275.14 rows=10036 width=116)
         Group Key: n1.n_name, n2.n_name, EXTRACT(year FROM lineitem.l_shipdate)
         ->  Nested Loop  (cost=1419849.00..11827227.75 rows=59790 width=96)
               Join Filter: (customer.c_nationkey = n2.n_nationkey)
               ->  Nested Loop  (cost=1419848.58..8187365.05 rows=1494755 width=76)
                     ->  Gather Merge  (cost=1419848.14..1598822.09 rows=1494755 width=76)
                           Workers Planned: 4
                           ->  Sort  (cost=1418848.08..1419782.30 rows=373689 width=76)
                                 Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                                 ->  Parallel Hash Join  (cost=3140.96..1372397.90 rows=373689 width=76)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..1350070.61 rows=4530178 width=24)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                       ->  Parallel Hash  (cost=3079.76..3079.76 rows=4896 width=60)
                                             ->  Hash Join  (cost=2.87..3079.76 rows=4896 width=60)
                                                   Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                                   ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                                   ->  Hash  (cost=2.84..2.84 rows=2 width=60)
                                                         ->  Nested Loop  (cost=0.00..2.84 rows=2 width=60)
                                                               Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                                               ->  Materialize  (cost=0.00..1.39 rows=2 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                           Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                     ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.41 rows=1 width=8)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
               ->  Index Only Scan using q10_idx_1 on customer  (cost=0.43..2.42 rows=1 width=8)
                     Index Cond: (c_custkey = orders.o_custkey)
(30 rows)

query 8 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=384223.32..384365.23 rows=1 width=64)
   ->  GroupAggregate  (cost=384223.32..725662.70 rows=2406 width=64)
         Group Key: EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=384223.32..725174.38 rows=22010 width=70)
               ->  Nested Loop  (cost=384223.17..724552.20 rows=22010 width=20)
                     ->  Nested Loop  (cost=384222.75..670994.93 rows=22208 width=20)
                           Join Filter: (n1.n_regionkey = region.r_regionkey)
                           ->  Nested Loop  (cost=384222.75..669328.25 rows=111041 width=24)
                                 ->  Nested Loop  (cost=384222.60..666584.64 rows=111041 width=24)
                                       ->  Gather Merge  (cost=384222.18..397517.63 rows=111041 width=24)
                                             Workers Planned: 4
                                             ->  Sort  (cost=383222.12..383291.52 rows=27760 width=24)
                                                   Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                                                   ->  Parallel Hash Join  (cost=59277.61..381173.33 rows=27760 width=24)
                                                         Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                                         ->  Parallel Seq Scan on orders  (cost=0.00..317513.58 rows=1150064 width=12)
                                                               Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                         ->  Parallel Hash  (cost=58146.22..58146.22 rows=90511 width=20)
                                                               ->  Nested Loop  (cost=0.56..58146.22 rows=90511 width=20)
                                                                     ->  Parallel Seq Scan on part  (cost=0.00..47231.05 rows=3316 width=4)
                                                                           Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                                     ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.56..3.02 rows=27 width=24)
                                                                           Index Cond: (l_partkey = part.p_partkey)
                                       ->  Index Only Scan using q10_idx_1 on customer  (cost=0.43..2.42 rows=1 width=8)
                                             Index Cond: (c_custkey = orders.o_custkey)
                                 ->  Memoize  (cost=0.15..1.17 rows=1 width=8)
                                       Cache Key: customer.c_nationkey
                                       Cache Mode: logical
                                       ->  Index Scan using nation_pkey on nation n1  (cost=0.14..1.16 rows=1 width=8)
                                             Index Cond: (n_nationkey = customer.c_nationkey)
                           ->  Materialize  (cost=0.00..1.07 rows=1 width=4)
                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                       Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Index Only Scan using q2_idx_3 on supplier  (cost=0.42..2.41 rows=1 width=8)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
               ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                     Cache Key: supplier.s_nationkey
                     Cache Mode: logical
                     ->  Index Scan using nation_pkey on nation n2  (cost=0.14..1.16 rows=1 width=30)
                           Index Cond: (n_nationkey = supplier.s_nationkey)
(40 rows)

query 8 run 2
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=384223.32..384365.23 rows=1 width=64)
   ->  GroupAggregate  (cost=384223.32..725662.70 rows=2406 width=64)
         Group Key: EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=384223.32..725174.38 rows=22010 width=70)
               ->  Nested Loop  (cost=384223.17..724552.20 rows=22010 width=20)
                     ->  Nested Loop  (cost=384222.75..670994.93 rows=22208 width=20)
                           Join Filter: (n1.n_regionkey = region.r_regionkey)
                           ->  Nested Loop  (cost=384222.75..669328.25 rows=111041 width=24)
                                 ->  Nested Loop  (cost=384222.60..666584.64 rows=111041 width=24)
                                       ->  Gather Merge  (cost=384222.18..397517.63 rows=111041 width=24)
                                             Workers Planned: 4
                                             ->  Sort  (cost=383222.12..383291.52 rows=27760 width=24)
                                                   Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                                                   ->  Parallel Hash Join  (cost=59277.61..381173.33 rows=27760 width=24)
                                                         Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                                         ->  Parallel Seq Scan on orders  (cost=0.00..317513.58 rows=1150064 width=12)
                                                               Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                         ->  Parallel Hash  (cost=58146.22..58146.22 rows=90511 width=20)
                                                               ->  Nested Loop  (cost=0.56..58146.22 rows=90511 width=20)
                                                                     ->  Parallel Seq Scan on part  (cost=0.00..47231.05 rows=3316 width=4)
                                                                           Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                                     ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.56..3.02 rows=27 width=24)
                                                                           Index Cond: (l_partkey = part.p_partkey)
                                       ->  Index Only Scan using q10_idx_1 on customer  (cost=0.43..2.42 rows=1 width=8)
                                             Index Cond: (c_custkey = orders.o_custkey)
                                 ->  Memoize  (cost=0.15..1.17 rows=1 width=8)
                                       Cache Key: customer.c_nationkey
                                       Cache Mode: logical
                                       ->  Index Scan using nation_pkey on nation n1  (cost=0.14..1.16 rows=1 width=8)
                                             Index Cond: (n_nationkey = customer.c_nationkey)
                           ->  Materialize  (cost=0.00..1.07 rows=1 width=4)
                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                       Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Index Only Scan using q2_idx_3 on supplier  (cost=0.42..2.41 rows=1 width=8)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
               ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                     Cache Key: supplier.s_nationkey
                     Cache Mode: logical
                     ->  Index Scan using nation_pkey on nation n2  (cost=0.14..1.16 rows=1 width=30)
                           Index Cond: (n_nationkey = supplier.s_nationkey)
(40 rows)

query 8 run 3
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=384223.32..384365.23 rows=1 width=64)
   ->  GroupAggregate  (cost=384223.32..725662.70 rows=2406 width=64)
         Group Key: EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=384223.32..725174.38 rows=22010 width=70)
               ->  Nested Loop  (cost=384223.17..724552.20 rows=22010 width=20)
                     ->  Nested Loop  (cost=384222.75..670994.93 rows=22208 width=20)
                           Join Filter: (n1.n_regionkey = region.r_regionkey)
                           ->  Nested Loop  (cost=384222.75..669328.25 rows=111041 width=24)
                                 ->  Nested Loop  (cost=384222.60..666584.64 rows=111041 width=24)
                                       ->  Gather Merge  (cost=384222.18..397517.63 rows=111041 width=24)
                                             Workers Planned: 4
                                             ->  Sort  (cost=383222.12..383291.52 rows=27760 width=24)
                                                   Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                                                   ->  Parallel Hash Join  (cost=59277.61..381173.33 rows=27760 width=24)
                                                         Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                                         ->  Parallel Seq Scan on orders  (cost=0.00..317513.58 rows=1150064 width=12)
                                                               Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                         ->  Parallel Hash  (cost=58146.22..58146.22 rows=90511 width=20)
                                                               ->  Nested Loop  (cost=0.56..58146.22 rows=90511 width=20)
                                                                     ->  Parallel Seq Scan on part  (cost=0.00..47231.05 rows=3316 width=4)
                                                                           Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                                     ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.56..3.02 rows=27 width=24)
                                                                           Index Cond: (l_partkey = part.p_partkey)
                                       ->  Index Only Scan using q10_idx_1 on customer  (cost=0.43..2.42 rows=1 width=8)
                                             Index Cond: (c_custkey = orders.o_custkey)
                                 ->  Memoize  (cost=0.15..1.17 rows=1 width=8)
                                       Cache Key: customer.c_nationkey
                                       Cache Mode: logical
                                       ->  Index Scan using nation_pkey on nation n1  (cost=0.14..1.16 rows=1 width=8)
                                             Index Cond: (n_nationkey = customer.c_nationkey)
                           ->  Materialize  (cost=0.00..1.07 rows=1 width=4)
                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                       Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Index Only Scan using q2_idx_3 on supplier  (cost=0.42..2.41 rows=1 width=8)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
               ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                     Cache Key: supplier.s_nationkey
                     Cache Mode: logical
                     ->  Index Scan using nation_pkey on nation n2  (cost=0.14..1.16 rows=1 width=30)
                           Index Cond: (n_nationkey = supplier.s_nationkey)
(40 rows)

query 8 run 4
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=384223.32..384365.23 rows=1 width=64)
   ->  GroupAggregate  (cost=384223.32..725662.70 rows=2406 width=64)
         Group Key: EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=384223.32..725174.38 rows=22010 width=70)
               ->  Nested Loop  (cost=384223.17..724552.20 rows=22010 width=20)
                     ->  Nested Loop  (cost=384222.75..670994.93 rows=22208 width=20)
                           Join Filter: (n1.n_regionkey = region.r_regionkey)
                           ->  Nested Loop  (cost=384222.75..669328.25 rows=111041 width=24)
                                 ->  Nested Loop  (cost=384222.60..666584.64 rows=111041 width=24)
                                       ->  Gather Merge  (cost=384222.18..397517.63 rows=111041 width=24)
                                             Workers Planned: 4
                                             ->  Sort  (cost=383222.12..383291.52 rows=27760 width=24)
                                                   Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                                                   ->  Parallel Hash Join  (cost=59277.61..381173.33 rows=27760 width=24)
                                                         Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                                         ->  Parallel Seq Scan on orders  (cost=0.00..317513.58 rows=1150064 width=12)
                                                               Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                         ->  Parallel Hash  (cost=58146.22..58146.22 rows=90511 width=20)
                                                               ->  Nested Loop  (cost=0.56..58146.22 rows=90511 width=20)
                                                                     ->  Parallel Seq Scan on part  (cost=0.00..47231.05 rows=3316 width=4)
                                                                           Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                                     ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.56..3.02 rows=27 width=24)
                                                                           Index Cond: (l_partkey = part.p_partkey)
                                       ->  Index Only Scan using q10_idx_1 on customer  (cost=0.43..2.42 rows=1 width=8)
                                             Index Cond: (c_custkey = orders.o_custkey)
                                 ->  Memoize  (cost=0.15..1.17 rows=1 width=8)
                                       Cache Key: customer.c_nationkey
                                       Cache Mode: logical
                                       ->  Index Scan using nation_pkey on nation n1  (cost=0.14..1.16 rows=1 width=8)
                                             Index Cond: (n_nationkey = customer.c_nationkey)
                           ->  Materialize  (cost=0.00..1.07 rows=1 width=4)
                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                       Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Index Only Scan using q2_idx_3 on supplier  (cost=0.42..2.41 rows=1 width=8)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
               ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                     Cache Key: supplier.s_nationkey
                     Cache Mode: logical
                     ->  Index Scan using nation_pkey on nation n2  (cost=0.14..1.16 rows=1 width=30)
                           Index Cond: (n_nationkey = supplier.s_nationkey)
(40 rows)

query 8 run 5
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=384223.32..384365.23 rows=1 width=64)
   ->  GroupAggregate  (cost=384223.32..725662.70 rows=2406 width=64)
         Group Key: EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=384223.32..725174.38 rows=22010 width=70)
               ->  Nested Loop  (cost=384223.17..724552.20 rows=22010 width=20)
                     ->  Nested Loop  (cost=384222.75..670994.93 rows=22208 width=20)
                           Join Filter: (n1.n_regionkey = region.r_regionkey)
                           ->  Nested Loop  (cost=384222.75..669328.25 rows=111041 width=24)
                                 ->  Nested Loop  (cost=384222.60..666584.64 rows=111041 width=24)
                                       ->  Gather Merge  (cost=384222.18..397517.63 rows=111041 width=24)
                                             Workers Planned: 4
                                             ->  Sort  (cost=383222.12..383291.52 rows=27760 width=24)
                                                   Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                                                   ->  Parallel Hash Join  (cost=59277.61..381173.33 rows=27760 width=24)
                                                         Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                                         ->  Parallel Seq Scan on orders  (cost=0.00..317513.58 rows=1150064 width=12)
                                                               Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                         ->  Parallel Hash  (cost=58146.22..58146.22 rows=90511 width=20)
                                                               ->  Nested Loop  (cost=0.56..58146.22 rows=90511 width=20)
                                                                     ->  Parallel Seq Scan on part  (cost=0.00..47231.05 rows=3316 width=4)
                                                                           Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                                     ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.56..3.02 rows=27 width=24)
                                                                           Index Cond: (l_partkey = part.p_partkey)
                                       ->  Index Only Scan using q10_idx_1 on customer  (cost=0.43..2.42 rows=1 width=8)
                                             Index Cond: (c_custkey = orders.o_custkey)
                                 ->  Memoize  (cost=0.15..1.17 rows=1 width=8)
                                       Cache Key: customer.c_nationkey
                                       Cache Mode: logical
                                       ->  Index Scan using nation_pkey on nation n1  (cost=0.14..1.16 rows=1 width=8)
                                             Index Cond: (n_nationkey = customer.c_nationkey)
                           ->  Materialize  (cost=0.00..1.07 rows=1 width=4)
                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                       Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Index Only Scan using q2_idx_3 on supplier  (cost=0.42..2.41 rows=1 width=8)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
               ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                     Cache Key: supplier.s_nationkey
                     Cache Mode: logical
                     ->  Index Scan using nation_pkey on nation n2  (cost=0.14..1.16 rows=1 width=30)
                           Index Cond: (n_nationkey = supplier.s_nationkey)
(40 rows)

query 9 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=290432.19..290515.60 rows=1 width=90)
   ->  GroupAggregate  (cost=290432.19..5307442.04 rows=60150 width=90)
         Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
         ->  Incremental Sort  (cost=290432.19..5287415.41 rows=1092822 width=81)
               Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
               Presorted Key: nation.n_name
               ->  Nested Loop  (cost=82793.76..5189521.17 rows=1092822 width=81)
                     ->  Nested Loop  (cost=82793.32..364544.13 rows=1092822 width=53)
                           Join Filter: ((supplier.s_suppkey = lineitem.l_suppkey) AND (partsupp.ps_partkey = lineitem.l_partkey))
                           ->  Gather Merge  (cost=82792.75..102143.18 rows=161611 width=48)
                                 Workers Planned: 4
                                 ->  Sort  (cost=81792.69..81893.69 rows=40403 width=48)
                                       Sort Key: nation.n_name
                                       ->  Hash Join  (cost=3546.96..78701.42 rows=40403 width=48)
                                             Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                             ->  Parallel Hash Join  (cost=3545.40..78575.82 rows=40403 width=26)
                                                   Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                                   ->  Nested Loop  (cost=0.86..74925.23 rows=40403 width=18)
                                                         ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.43..45556.55 rows=10101 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.43..2.73 rows=18 width=14)
                                                               Index Cond: (ps_partkey = part.p_partkey)
                                                   ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                                         ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                             ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                                   ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
                           ->  Memoize  (cost=0.57..3.03 rows=27 width=29)
                                 Cache Key: part.p_partkey
                                 Cache Mode: logical
                                 ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..3.02 rows=27 width=29)
                                       Index Cond: (l_partkey = part.p_partkey)
                     ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.41 rows=1 width=8)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
(33 rows)

query 9 run 2
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=290432.19..290515.60 rows=1 width=90)
   ->  GroupAggregate  (cost=290432.19..5307442.04 rows=60150 width=90)
         Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
         ->  Incremental Sort  (cost=290432.19..5287415.41 rows=1092822 width=81)
               Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
               Presorted Key: nation.n_name
               ->  Nested Loop  (cost=82793.76..5189521.17 rows=1092822 width=81)
                     ->  Nested Loop  (cost=82793.32..364544.13 rows=1092822 width=53)
                           Join Filter: ((supplier.s_suppkey = lineitem.l_suppkey) AND (partsupp.ps_partkey = lineitem.l_partkey))
                           ->  Gather Merge  (cost=82792.75..102143.18 rows=161611 width=48)
                                 Workers Planned: 4
                                 ->  Sort  (cost=81792.69..81893.69 rows=40403 width=48)
                                       Sort Key: nation.n_name
                                       ->  Hash Join  (cost=3546.96..78701.42 rows=40403 width=48)
                                             Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                             ->  Parallel Hash Join  (cost=3545.40..78575.82 rows=40403 width=26)
                                                   Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                                   ->  Nested Loop  (cost=0.86..74925.23 rows=40403 width=18)
                                                         ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.43..45556.55 rows=10101 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.43..2.73 rows=18 width=14)
                                                               Index Cond: (ps_partkey = part.p_partkey)
                                                   ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                                         ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                             ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                                   ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
                           ->  Memoize  (cost=0.57..3.03 rows=27 width=29)
                                 Cache Key: part.p_partkey
                                 Cache Mode: logical
                                 ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..3.02 rows=27 width=29)
                                       Index Cond: (l_partkey = part.p_partkey)
                     ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.41 rows=1 width=8)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
(33 rows)

query 9 run 3
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=290432.19..290515.60 rows=1 width=90)
   ->  GroupAggregate  (cost=290432.19..5307442.04 rows=60150 width=90)
         Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
         ->  Incremental Sort  (cost=290432.19..5287415.41 rows=1092822 width=81)
               Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
               Presorted Key: nation.n_name
               ->  Nested Loop  (cost=82793.76..5189521.17 rows=1092822 width=81)
                     ->  Nested Loop  (cost=82793.32..364544.13 rows=1092822 width=53)
                           Join Filter: ((supplier.s_suppkey = lineitem.l_suppkey) AND (partsupp.ps_partkey = lineitem.l_partkey))
                           ->  Gather Merge  (cost=82792.75..102143.18 rows=161611 width=48)
                                 Workers Planned: 4
                                 ->  Sort  (cost=81792.69..81893.69 rows=40403 width=48)
                                       Sort Key: nation.n_name
                                       ->  Hash Join  (cost=3546.96..78701.42 rows=40403 width=48)
                                             Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                             ->  Parallel Hash Join  (cost=3545.40..78575.82 rows=40403 width=26)
                                                   Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                                   ->  Nested Loop  (cost=0.86..74925.23 rows=40403 width=18)
                                                         ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.43..45556.55 rows=10101 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.43..2.73 rows=18 width=14)
                                                               Index Cond: (ps_partkey = part.p_partkey)
                                                   ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                                         ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                             ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                                   ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
                           ->  Memoize  (cost=0.57..3.03 rows=27 width=29)
                                 Cache Key: part.p_partkey
                                 Cache Mode: logical
                                 ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..3.02 rows=27 width=29)
                                       Index Cond: (l_partkey = part.p_partkey)
                     ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.41 rows=1 width=8)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
(33 rows)

query 9 run 4
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=290432.19..290515.60 rows=1 width=90)
   ->  GroupAggregate  (cost=290432.19..5307442.04 rows=60150 width=90)
         Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
         ->  Incremental Sort  (cost=290432.19..5287415.41 rows=1092822 width=81)
               Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
               Presorted Key: nation.n_name
               ->  Nested Loop  (cost=82793.76..5189521.17 rows=1092822 width=81)
                     ->  Nested Loop  (cost=82793.32..364544.13 rows=1092822 width=53)
                           Join Filter: ((supplier.s_suppkey = lineitem.l_suppkey) AND (partsupp.ps_partkey = lineitem.l_partkey))
                           ->  Gather Merge  (cost=82792.75..102143.18 rows=161611 width=48)
                                 Workers Planned: 4
                                 ->  Sort  (cost=81792.69..81893.69 rows=40403 width=48)
                                       Sort Key: nation.n_name
                                       ->  Hash Join  (cost=3546.96..78701.42 rows=40403 width=48)
                                             Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                             ->  Parallel Hash Join  (cost=3545.40..78575.82 rows=40403 width=26)
                                                   Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                                   ->  Nested Loop  (cost=0.86..74925.23 rows=40403 width=18)
                                                         ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.43..45556.55 rows=10101 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.43..2.73 rows=18 width=14)
                                                               Index Cond: (ps_partkey = part.p_partkey)
                                                   ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                                         ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                             ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                                   ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
                           ->  Memoize  (cost=0.57..3.03 rows=27 width=29)
                                 Cache Key: part.p_partkey
                                 Cache Mode: logical
                                 ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..3.02 rows=27 width=29)
                                       Index Cond: (l_partkey = part.p_partkey)
                     ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.41 rows=1 width=8)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
(33 rows)

query 9 run 5
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=290432.19..290515.60 rows=1 width=90)
   ->  GroupAggregate  (cost=290432.19..5307442.04 rows=60150 width=90)
         Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
         ->  Incremental Sort  (cost=290432.19..5287415.41 rows=1092822 width=81)
               Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
               Presorted Key: nation.n_name
               ->  Nested Loop  (cost=82793.76..5189521.17 rows=1092822 width=81)
                     ->  Nested Loop  (cost=82793.32..364544.13 rows=1092822 width=53)
                           Join Filter: ((supplier.s_suppkey = lineitem.l_suppkey) AND (partsupp.ps_partkey = lineitem.l_partkey))
                           ->  Gather Merge  (cost=82792.75..102143.18 rows=161611 width=48)
                                 Workers Planned: 4
                                 ->  Sort  (cost=81792.69..81893.69 rows=40403 width=48)
                                       Sort Key: nation.n_name
                                       ->  Hash Join  (cost=3546.96..78701.42 rows=40403 width=48)
                                             Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                             ->  Parallel Hash Join  (cost=3545.40..78575.82 rows=40403 width=26)
                                                   Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                                   ->  Nested Loop  (cost=0.86..74925.23 rows=40403 width=18)
                                                         ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.43..45556.55 rows=10101 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.43..2.73 rows=18 width=14)
                                                               Index Cond: (ps_partkey = part.p_partkey)
                                                   ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                                         ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                             ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                                   ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
                           ->  Memoize  (cost=0.57..3.03 rows=27 width=29)
                                 Cache Key: part.p_partkey
                                 Cache Mode: logical
                                 ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..3.02 rows=27 width=29)
                                       Index Cond: (l_partkey = part.p_partkey)
                     ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.41 rows=1 width=8)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
(33 rows)

query 10 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=790758.92..790758.97 rows=20 width=201)
   ->  Sort  (cost=790758.92..792180.78 rows=568746 width=201)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=693307.54..775624.79 rows=568746 width=201)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=693307.54..761406.14 rows=568746 width=181)
                     Workers Planned: 4
                     ->  Sort  (cost=692307.48..692662.95 rows=142186 width=181)
                           Sort Key: customer.c_custkey, nation.n_name
                           ->  Nested Loop  (cost=271943.89..680138.20 rows=142186 width=181)
                                 ->  Hash Join  (cost=271943.32..315242.06 rows=141654 width=173)
                                       Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                       ->  Parallel Hash Join  (cost=271941.76..314805.62 rows=141654 width=151)
                                             Hash Cond: (customer.c_custkey = orders.o_custkey)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..39697.13 rows=375013 width=147)
                                             ->  Parallel Hash  (cost=270171.09..270171.09 rows=141654 width=8)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=6778.27..270171.09 rows=141654 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6636.62 rows=566618 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
                                 ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.56..2.57 rows=1 width=16)
                                       Index Cond: ((l_orderkey = orders.o_orderkey) AND (l_returnflag = 'R'::bpchar))
(24 rows)

query 10 run 2
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=790758.92..790758.97 rows=20 width=201)
   ->  Sort  (cost=790758.92..792180.78 rows=568746 width=201)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=693307.54..775624.79 rows=568746 width=201)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=693307.54..761406.14 rows=568746 width=181)
                     Workers Planned: 4
                     ->  Sort  (cost=692307.48..692662.95 rows=142186 width=181)
                           Sort Key: customer.c_custkey, nation.n_name
                           ->  Nested Loop  (cost=271943.89..680138.20 rows=142186 width=181)
                                 ->  Hash Join  (cost=271943.32..315242.06 rows=141654 width=173)
                                       Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                       ->  Parallel Hash Join  (cost=271941.76..314805.62 rows=141654 width=151)
                                             Hash Cond: (customer.c_custkey = orders.o_custkey)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..39697.13 rows=375013 width=147)
                                             ->  Parallel Hash  (cost=270171.09..270171.09 rows=141654 width=8)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=6778.27..270171.09 rows=141654 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6636.62 rows=566618 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
                                 ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.56..2.57 rows=1 width=16)
                                       Index Cond: ((l_orderkey = orders.o_orderkey) AND (l_returnflag = 'R'::bpchar))
(24 rows)

query 10 run 3
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=790758.92..790758.97 rows=20 width=201)
   ->  Sort  (cost=790758.92..792180.78 rows=568746 width=201)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=693307.54..775624.79 rows=568746 width=201)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=693307.54..761406.14 rows=568746 width=181)
                     Workers Planned: 4
                     ->  Sort  (cost=692307.48..692662.95 rows=142186 width=181)
                           Sort Key: customer.c_custkey, nation.n_name
                           ->  Nested Loop  (cost=271943.89..680138.20 rows=142186 width=181)
                                 ->  Hash Join  (cost=271943.32..315242.06 rows=141654 width=173)
                                       Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                       ->  Parallel Hash Join  (cost=271941.76..314805.62 rows=141654 width=151)
                                             Hash Cond: (customer.c_custkey = orders.o_custkey)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..39697.13 rows=375013 width=147)
                                             ->  Parallel Hash  (cost=270171.09..270171.09 rows=141654 width=8)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=6778.27..270171.09 rows=141654 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6636.62 rows=566618 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
                                 ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.56..2.57 rows=1 width=16)
                                       Index Cond: ((l_orderkey = orders.o_orderkey) AND (l_returnflag = 'R'::bpchar))
(24 rows)

query 10 run 4
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=790758.92..790758.97 rows=20 width=201)
   ->  Sort  (cost=790758.92..792180.78 rows=568746 width=201)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=693307.54..775624.79 rows=568746 width=201)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=693307.54..761406.14 rows=568746 width=181)
                     Workers Planned: 4
                     ->  Sort  (cost=692307.48..692662.95 rows=142186 width=181)
                           Sort Key: customer.c_custkey, nation.n_name
                           ->  Nested Loop  (cost=271943.89..680138.20 rows=142186 width=181)
                                 ->  Hash Join  (cost=271943.32..315242.06 rows=141654 width=173)
                                       Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                       ->  Parallel Hash Join  (cost=271941.76..314805.62 rows=141654 width=151)
                                             Hash Cond: (customer.c_custkey = orders.o_custkey)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..39697.13 rows=375013 width=147)
                                             ->  Parallel Hash  (cost=270171.09..270171.09 rows=141654 width=8)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=6778.27..270171.09 rows=141654 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6636.62 rows=566618 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
                                 ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.56..2.57 rows=1 width=16)
                                       Index Cond: ((l_orderkey = orders.o_orderkey) AND (l_returnflag = 'R'::bpchar))
(24 rows)

query 10 run 5
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=790758.92..790758.97 rows=20 width=201)
   ->  Sort  (cost=790758.92..792180.78 rows=568746 width=201)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=693307.54..775624.79 rows=568746 width=201)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=693307.54..761406.14 rows=568746 width=181)
                     Workers Planned: 4
                     ->  Sort  (cost=692307.48..692662.95 rows=142186 width=181)
                           Sort Key: customer.c_custkey, nation.n_name
                           ->  Nested Loop  (cost=271943.89..680138.20 rows=142186 width=181)
                                 ->  Hash Join  (cost=271943.32..315242.06 rows=141654 width=173)
                                       Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                       ->  Parallel Hash Join  (cost=271941.76..314805.62 rows=141654 width=151)
                                             Hash Cond: (customer.c_custkey = orders.o_custkey)
                                             ->  Parallel Seq Scan on customer  (cost=0.00..39697.13 rows=375013 width=147)
                                             ->  Parallel Hash  (cost=270171.09..270171.09 rows=141654 width=8)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=6778.27..270171.09 rows=141654 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6636.62 rows=566618 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
                                 ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.56..2.57 rows=1 width=16)
                                       Index Cond: ((l_orderkey = orders.o_orderkey) AND (l_returnflag = 'R'::bpchar))
(24 rows)

query 11 run 1
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=467688.25..467688.25 rows=1 width=36)
   InitPlan 1
     ->  Finalize Aggregate  (cost=207463.15..207463.16 rows=1 width=32)
           ->  Gather  (cost=207462.72..207463.13 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=206462.72..206462.73 rows=1 width=32)
                       ->  Hash Join  (cost=2341.31..205862.73 rows=79998 width=10)
                             Hash Cond: (partsupp_1.ps_suppkey = supplier_1.s_suppkey)
                             ->  Parallel Seq Scan on partsupp partsupp_1  (cost=0.00..195221.59 rows=1999959 width=14)
                             ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                                   ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                         ->  Bitmap Heap Scan on supplier supplier_1  (cost=39.29..2250.00 rows=4000 width=8)
                                               Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                                               ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                     Index Cond: (s_nationkey = nation_1.n_nationkey)
   ->  Sort  (cost=260225.09..260491.75 rows=106664 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  GroupAggregate  (cost=213377.69..259691.77 rows=106664 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               ->  Gather Merge  (cost=213377.69..251691.94 rows=319993 width=14)
                     Workers Planned: 4
                     ->  Sort  (cost=212377.64..212577.63 rows=79998 width=14)
                           Sort Key: partsupp.ps_partkey
                           ->  Hash Join  (cost=2341.31..205862.73 rows=79998 width=14)
                                 Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                 ->  Parallel Seq Scan on partsupp  (cost=0.00..195221.59 rows=1999959 width=18)
                                 ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                                       ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                             ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                             ->  Bitmap Heap Scan on supplier  (cost=39.29..2250.00 rows=4000 width=8)
                                                   Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                         Index Cond: (s_nationkey = nation.n_nationkey)
(37 rows)

query 11 run 2
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=467688.25..467688.25 rows=1 width=36)
   InitPlan 1
     ->  Finalize Aggregate  (cost=207463.15..207463.16 rows=1 width=32)
           ->  Gather  (cost=207462.72..207463.13 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=206462.72..206462.73 rows=1 width=32)
                       ->  Hash Join  (cost=2341.31..205862.73 rows=79998 width=10)
                             Hash Cond: (partsupp_1.ps_suppkey = supplier_1.s_suppkey)
                             ->  Parallel Seq Scan on partsupp partsupp_1  (cost=0.00..195221.59 rows=1999959 width=14)
                             ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                                   ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                         ->  Bitmap Heap Scan on supplier supplier_1  (cost=39.29..2250.00 rows=4000 width=8)
                                               Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                                               ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                     Index Cond: (s_nationkey = nation_1.n_nationkey)
   ->  Sort  (cost=260225.09..260491.75 rows=106664 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  GroupAggregate  (cost=213377.69..259691.77 rows=106664 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               ->  Gather Merge  (cost=213377.69..251691.94 rows=319993 width=14)
                     Workers Planned: 4
                     ->  Sort  (cost=212377.64..212577.63 rows=79998 width=14)
                           Sort Key: partsupp.ps_partkey
                           ->  Hash Join  (cost=2341.31..205862.73 rows=79998 width=14)
                                 Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                 ->  Parallel Seq Scan on partsupp  (cost=0.00..195221.59 rows=1999959 width=18)
                                 ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                                       ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                             ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                             ->  Bitmap Heap Scan on supplier  (cost=39.29..2250.00 rows=4000 width=8)
                                                   Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                         Index Cond: (s_nationkey = nation.n_nationkey)
(37 rows)

query 11 run 3
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=467688.25..467688.25 rows=1 width=36)
   InitPlan 1
     ->  Finalize Aggregate  (cost=207463.15..207463.16 rows=1 width=32)
           ->  Gather  (cost=207462.72..207463.13 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=206462.72..206462.73 rows=1 width=32)
                       ->  Hash Join  (cost=2341.31..205862.73 rows=79998 width=10)
                             Hash Cond: (partsupp_1.ps_suppkey = supplier_1.s_suppkey)
                             ->  Parallel Seq Scan on partsupp partsupp_1  (cost=0.00..195221.59 rows=1999959 width=14)
                             ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                                   ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                         ->  Bitmap Heap Scan on supplier supplier_1  (cost=39.29..2250.00 rows=4000 width=8)
                                               Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                                               ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                     Index Cond: (s_nationkey = nation_1.n_nationkey)
   ->  Sort  (cost=260225.09..260491.75 rows=106664 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  GroupAggregate  (cost=213377.69..259691.77 rows=106664 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               ->  Gather Merge  (cost=213377.69..251691.94 rows=319993 width=14)
                     Workers Planned: 4
                     ->  Sort  (cost=212377.64..212577.63 rows=79998 width=14)
                           Sort Key: partsupp.ps_partkey
                           ->  Hash Join  (cost=2341.31..205862.73 rows=79998 width=14)
                                 Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                 ->  Parallel Seq Scan on partsupp  (cost=0.00..195221.59 rows=1999959 width=18)
                                 ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                                       ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                             ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                             ->  Bitmap Heap Scan on supplier  (cost=39.29..2250.00 rows=4000 width=8)
                                                   Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                         Index Cond: (s_nationkey = nation.n_nationkey)
(37 rows)

query 11 run 4
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=467688.25..467688.25 rows=1 width=36)
   InitPlan 1
     ->  Finalize Aggregate  (cost=207463.15..207463.16 rows=1 width=32)
           ->  Gather  (cost=207462.72..207463.13 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=206462.72..206462.73 rows=1 width=32)
                       ->  Hash Join  (cost=2341.31..205862.73 rows=79998 width=10)
                             Hash Cond: (partsupp_1.ps_suppkey = supplier_1.s_suppkey)
                             ->  Parallel Seq Scan on partsupp partsupp_1  (cost=0.00..195221.59 rows=1999959 width=14)
                             ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                                   ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                         ->  Bitmap Heap Scan on supplier supplier_1  (cost=39.29..2250.00 rows=4000 width=8)
                                               Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                                               ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                     Index Cond: (s_nationkey = nation_1.n_nationkey)
   ->  Sort  (cost=260225.09..260491.75 rows=106664 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  GroupAggregate  (cost=213377.69..259691.77 rows=106664 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               ->  Gather Merge  (cost=213377.69..251691.94 rows=319993 width=14)
                     Workers Planned: 4
                     ->  Sort  (cost=212377.64..212577.63 rows=79998 width=14)
                           Sort Key: partsupp.ps_partkey
                           ->  Hash Join  (cost=2341.31..205862.73 rows=79998 width=14)
                                 Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                 ->  Parallel Seq Scan on partsupp  (cost=0.00..195221.59 rows=1999959 width=18)
                                 ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                                       ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                             ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                             ->  Bitmap Heap Scan on supplier  (cost=39.29..2250.00 rows=4000 width=8)
                                                   Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                         Index Cond: (s_nationkey = nation.n_nationkey)
(37 rows)

query 11 run 5
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=467688.25..467688.25 rows=1 width=36)
   InitPlan 1
     ->  Finalize Aggregate  (cost=207463.15..207463.16 rows=1 width=32)
           ->  Gather  (cost=207462.72..207463.13 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=206462.72..206462.73 rows=1 width=32)
                       ->  Hash Join  (cost=2341.31..205862.73 rows=79998 width=10)
                             Hash Cond: (partsupp_1.ps_suppkey = supplier_1.s_suppkey)
                             ->  Parallel Seq Scan on partsupp partsupp_1  (cost=0.00..195221.59 rows=1999959 width=14)
                             ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                                   ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                         ->  Bitmap Heap Scan on supplier supplier_1  (cost=39.29..2250.00 rows=4000 width=8)
                                               Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                                               ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                     Index Cond: (s_nationkey = nation_1.n_nationkey)
   ->  Sort  (cost=260225.09..260491.75 rows=106664 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  GroupAggregate  (cost=213377.69..259691.77 rows=106664 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               ->  Gather Merge  (cost=213377.69..251691.94 rows=319993 width=14)
                     Workers Planned: 4
                     ->  Sort  (cost=212377.64..212577.63 rows=79998 width=14)
                           Sort Key: partsupp.ps_partkey
                           ->  Hash Join  (cost=2341.31..205862.73 rows=79998 width=14)
                                 Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                 ->  Parallel Seq Scan on partsupp  (cost=0.00..195221.59 rows=1999959 width=18)
                                 ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                                       ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                             ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                             ->  Bitmap Heap Scan on supplier  (cost=39.29..2250.00 rows=4000 width=8)
                                                   Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                         Index Cond: (s_nationkey = nation.n_nationkey)
(37 rows)

query 12 run 1
SET
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=157500.98..349662.72 rows=1 width=27)
   ->  GroupAggregate  (cost=157500.98..1502633.17 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Nested Loop  (cost=157500.98..1497452.59 rows=296029 width=27)
               ->  Gather Merge  (cost=157500.54..192945.47 rows=296029 width=15)
                     Workers Planned: 4
                     ->  Sort  (cost=156500.48..156685.50 rows=74007 width=15)
                           Sort Key: lineitem.l_shipmode
                           ->  Parallel Index Only Scan using q12_idx_1 on lineitem  (cost=0.43..150515.03 rows=74007 width=15)
                                 Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
               ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.41 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
(12 rows)

query 12 run 2
SET
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=157500.98..349662.72 rows=1 width=27)
   ->  GroupAggregate  (cost=157500.98..1502633.17 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Nested Loop  (cost=157500.98..1497452.59 rows=296029 width=27)
               ->  Gather Merge  (cost=157500.54..192945.47 rows=296029 width=15)
                     Workers Planned: 4
                     ->  Sort  (cost=156500.48..156685.50 rows=74007 width=15)
                           Sort Key: lineitem.l_shipmode
                           ->  Parallel Index Only Scan using q12_idx_1 on lineitem  (cost=0.43..150515.03 rows=74007 width=15)
                                 Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
               ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.41 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
(12 rows)

query 12 run 3
SET
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=157500.98..349662.72 rows=1 width=27)
   ->  GroupAggregate  (cost=157500.98..1502633.17 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Nested Loop  (cost=157500.98..1497452.59 rows=296029 width=27)
               ->  Gather Merge  (cost=157500.54..192945.47 rows=296029 width=15)
                     Workers Planned: 4
                     ->  Sort  (cost=156500.48..156685.50 rows=74007 width=15)
                           Sort Key: lineitem.l_shipmode
                           ->  Parallel Index Only Scan using q12_idx_1 on lineitem  (cost=0.43..150515.03 rows=74007 width=15)
                                 Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
               ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.41 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
(12 rows)

query 12 run 4
SET
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=157500.98..349662.72 rows=1 width=27)
   ->  GroupAggregate  (cost=157500.98..1502633.17 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Nested Loop  (cost=157500.98..1497452.59 rows=296029 width=27)
               ->  Gather Merge  (cost=157500.54..192945.47 rows=296029 width=15)
                     Workers Planned: 4
                     ->  Sort  (cost=156500.48..156685.50 rows=74007 width=15)
                           Sort Key: lineitem.l_shipmode
                           ->  Parallel Index Only Scan using q12_idx_1 on lineitem  (cost=0.43..150515.03 rows=74007 width=15)
                                 Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
               ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.41 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
(12 rows)

query 12 run 5
SET
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=157500.98..349662.72 rows=1 width=27)
   ->  GroupAggregate  (cost=157500.98..1502633.17 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Nested Loop  (cost=157500.98..1497452.59 rows=296029 width=27)
               ->  Gather Merge  (cost=157500.54..192945.47 rows=296029 width=15)
                     Workers Planned: 4
                     ->  Sort  (cost=156500.48..156685.50 rows=74007 width=15)
                           Sort Key: lineitem.l_shipmode
                           ->  Parallel Index Only Scan using q12_idx_1 on lineitem  (cost=0.43..150515.03 rows=74007 width=15)
                                 Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
               ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.41 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
(12 rows)

query 13 run 1
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1421598.71..1421598.71 rows=1 width=16)
   ->  Sort  (cost=1421598.71..1421599.21 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1421595.71..1421597.71 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=1268099.73..1399094.93 rows=1500052 width=12)
                     Group Key: customer.c_custkey
                     Planned Partitions: 4
                     ->  Hash Right Join  (cost=55343.86..664927.44 rows=14847318 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..448753.26 rows=14847318 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=30733.21..30733.21 rows=1500052 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.43..30733.21 rows=1500052 width=4)
(14 rows)

query 13 run 2
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1421598.71..1421598.71 rows=1 width=16)
   ->  Sort  (cost=1421598.71..1421599.21 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1421595.71..1421597.71 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=1268099.73..1399094.93 rows=1500052 width=12)
                     Group Key: customer.c_custkey
                     Planned Partitions: 4
                     ->  Hash Right Join  (cost=55343.86..664927.44 rows=14847318 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..448753.26 rows=14847318 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=30733.21..30733.21 rows=1500052 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.43..30733.21 rows=1500052 width=4)
(14 rows)

query 13 run 3
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1421598.71..1421598.71 rows=1 width=16)
   ->  Sort  (cost=1421598.71..1421599.21 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1421595.71..1421597.71 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=1268099.73..1399094.93 rows=1500052 width=12)
                     Group Key: customer.c_custkey
                     Planned Partitions: 4
                     ->  Hash Right Join  (cost=55343.86..664927.44 rows=14847318 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..448753.26 rows=14847318 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=30733.21..30733.21 rows=1500052 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.43..30733.21 rows=1500052 width=4)
(14 rows)

query 13 run 4
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1421598.71..1421598.71 rows=1 width=16)
   ->  Sort  (cost=1421598.71..1421599.21 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1421595.71..1421597.71 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=1268099.73..1399094.93 rows=1500052 width=12)
                     Group Key: customer.c_custkey
                     Planned Partitions: 4
                     ->  Hash Right Join  (cost=55343.86..664927.44 rows=14847318 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..448753.26 rows=14847318 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=30733.21..30733.21 rows=1500052 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.43..30733.21 rows=1500052 width=4)
(14 rows)

query 13 run 5
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1421598.71..1421598.71 rows=1 width=16)
   ->  Sort  (cost=1421598.71..1421599.21 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1421595.71..1421597.71 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=1268099.73..1399094.93 rows=1500052 width=12)
                     Group Key: customer.c_custkey
                     Planned Partitions: 4
                     ->  Hash Right Join  (cost=55343.86..664927.44 rows=14847318 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..448753.26 rows=14847318 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=30733.21..30733.21 rows=1500052 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.43..30733.21 rows=1500052 width=4)
(14 rows)

query 14 run 1
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=966777.52..966777.54 rows=1 width=32)
   ->  Finalize Aggregate  (cost=966777.52..966777.54 rows=1 width=32)
         ->  Gather  (cost=966777.07..966777.48 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=965777.07..965777.08 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=67085.48..962484.93 rows=188122 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=14854.39..909711.18 rows=206728 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..14647.67 rows=826910 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=45981.04..45981.04 rows=500004 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..45981.04 rows=500004 width=25)
(13 rows)

query 14 run 2
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=966777.52..966777.54 rows=1 width=32)
   ->  Finalize Aggregate  (cost=966777.52..966777.54 rows=1 width=32)
         ->  Gather  (cost=966777.07..966777.48 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=965777.07..965777.08 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=67085.48..962484.93 rows=188122 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=14854.39..909711.18 rows=206728 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..14647.67 rows=826910 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=45981.04..45981.04 rows=500004 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..45981.04 rows=500004 width=25)
(13 rows)

query 14 run 3
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=966777.52..966777.54 rows=1 width=32)
   ->  Finalize Aggregate  (cost=966777.52..966777.54 rows=1 width=32)
         ->  Gather  (cost=966777.07..966777.48 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=965777.07..965777.08 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=67085.48..962484.93 rows=188122 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=14854.39..909711.18 rows=206728 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..14647.67 rows=826910 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=45981.04..45981.04 rows=500004 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..45981.04 rows=500004 width=25)
(13 rows)

query 14 run 4
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=966777.52..966777.54 rows=1 width=32)
   ->  Finalize Aggregate  (cost=966777.52..966777.54 rows=1 width=32)
         ->  Gather  (cost=966777.07..966777.48 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=965777.07..965777.08 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=67085.48..962484.93 rows=188122 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=14854.39..909711.18 rows=206728 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..14647.67 rows=826910 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=45981.04..45981.04 rows=500004 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..45981.04 rows=500004 width=25)
(13 rows)

query 14 run 5
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=966777.52..966777.54 rows=1 width=32)
   ->  Finalize Aggregate  (cost=966777.52..966777.54 rows=1 width=32)
         ->  Gather  (cost=966777.07..966777.48 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=965777.07..965777.08 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=67085.48..962484.93 rows=188122 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=14854.39..909711.18 rows=206728 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..14647.67 rows=826910 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=45981.04..45981.04 rows=500004 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..45981.04 rows=500004 width=25)
(13 rows)

query 15 run 1
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2745664.76..2745772.61 rows=1 width=103)
   InitPlan 1
     ->  Aggregate  (cost=1391594.09..1391594.10 rows=1 width=32)
           ->  Finalize HashAggregate  (cost=1389071.56..1390332.83 rows=100901 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather  (cost=1344422.87..1386044.53 rows=403604 width=36)
                       Workers Planned: 4
                       ->  Partial HashAggregate  (cost=1343422.87..1344684.13 rows=100901 width=36)
                             Group Key: lineitem_1.l_suppkey
                             ->  Parallel Bitmap Heap Scan on lineitem lineitem_1  (cost=40165.89..1337832.79 rows=559008 width=16)
                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..39606.89 rows=2236032 width=0)
                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=1354070.66..1408533.89 rows=505 width=103)
         ->  Finalize GroupAggregate  (cost=1354070.37..1406936.29 rows=505 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
               ->  Gather Merge  (cost=1354070.37..1402395.75 rows=403604 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=1353070.31..1353322.56 rows=100901 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=1343422.87..1344684.13 rows=100901 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=40165.89..1337832.79 rows=559008 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..39606.89 rows=2236032 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..3.15 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
(29 rows)

DROP VIEW
query 15 run 2
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2745664.76..2745772.61 rows=1 width=103)
   InitPlan 1
     ->  Aggregate  (cost=1391594.09..1391594.10 rows=1 width=32)
           ->  Finalize HashAggregate  (cost=1389071.56..1390332.83 rows=100901 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather  (cost=1344422.87..1386044.53 rows=403604 width=36)
                       Workers Planned: 4
                       ->  Partial HashAggregate  (cost=1343422.87..1344684.13 rows=100901 width=36)
                             Group Key: lineitem_1.l_suppkey
                             ->  Parallel Bitmap Heap Scan on lineitem lineitem_1  (cost=40165.89..1337832.79 rows=559008 width=16)
                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..39606.89 rows=2236032 width=0)
                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=1354070.66..1408533.89 rows=505 width=103)
         ->  Finalize GroupAggregate  (cost=1354070.37..1406936.29 rows=505 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
               ->  Gather Merge  (cost=1354070.37..1402395.75 rows=403604 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=1353070.31..1353322.56 rows=100901 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=1343422.87..1344684.13 rows=100901 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=40165.89..1337832.79 rows=559008 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..39606.89 rows=2236032 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..3.15 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
(29 rows)

DROP VIEW
query 15 run 3
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2745664.76..2745772.61 rows=1 width=103)
   InitPlan 1
     ->  Aggregate  (cost=1391594.09..1391594.10 rows=1 width=32)
           ->  Finalize HashAggregate  (cost=1389071.56..1390332.83 rows=100901 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather  (cost=1344422.87..1386044.53 rows=403604 width=36)
                       Workers Planned: 4
                       ->  Partial HashAggregate  (cost=1343422.87..1344684.13 rows=100901 width=36)
                             Group Key: lineitem_1.l_suppkey
                             ->  Parallel Bitmap Heap Scan on lineitem lineitem_1  (cost=40165.89..1337832.79 rows=559008 width=16)
                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..39606.89 rows=2236032 width=0)
                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=1354070.66..1408533.89 rows=505 width=103)
         ->  Finalize GroupAggregate  (cost=1354070.37..1406936.29 rows=505 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
               ->  Gather Merge  (cost=1354070.37..1402395.75 rows=403604 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=1353070.31..1353322.56 rows=100901 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=1343422.87..1344684.13 rows=100901 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=40165.89..1337832.79 rows=559008 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..39606.89 rows=2236032 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..3.15 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
(29 rows)

DROP VIEW
query 15 run 4
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2745664.76..2745772.61 rows=1 width=103)
   InitPlan 1
     ->  Aggregate  (cost=1391594.09..1391594.10 rows=1 width=32)
           ->  Finalize HashAggregate  (cost=1389071.56..1390332.83 rows=100901 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather  (cost=1344422.87..1386044.53 rows=403604 width=36)
                       Workers Planned: 4
                       ->  Partial HashAggregate  (cost=1343422.87..1344684.13 rows=100901 width=36)
                             Group Key: lineitem_1.l_suppkey
                             ->  Parallel Bitmap Heap Scan on lineitem lineitem_1  (cost=40165.89..1337832.79 rows=559008 width=16)
                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..39606.89 rows=2236032 width=0)
                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=1354070.66..1408533.89 rows=505 width=103)
         ->  Finalize GroupAggregate  (cost=1354070.37..1406936.29 rows=505 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
               ->  Gather Merge  (cost=1354070.37..1402395.75 rows=403604 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=1353070.31..1353322.56 rows=100901 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=1343422.87..1344684.13 rows=100901 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=40165.89..1337832.79 rows=559008 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..39606.89 rows=2236032 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..3.15 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
(29 rows)

DROP VIEW
query 15 run 5
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2745664.76..2745772.61 rows=1 width=103)
   InitPlan 1
     ->  Aggregate  (cost=1391594.09..1391594.10 rows=1 width=32)
           ->  Finalize HashAggregate  (cost=1389071.56..1390332.83 rows=100901 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather  (cost=1344422.87..1386044.53 rows=403604 width=36)
                       Workers Planned: 4
                       ->  Partial HashAggregate  (cost=1343422.87..1344684.13 rows=100901 width=36)
                             Group Key: lineitem_1.l_suppkey
                             ->  Parallel Bitmap Heap Scan on lineitem lineitem_1  (cost=40165.89..1337832.79 rows=559008 width=16)
                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..39606.89 rows=2236032 width=0)
                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=1354070.66..1408533.89 rows=505 width=103)
         ->  Finalize GroupAggregate  (cost=1354070.37..1406936.29 rows=505 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
               ->  Gather Merge  (cost=1354070.37..1402395.75 rows=403604 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=1353070.31..1353322.56 rows=100901 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=1343422.87..1344684.13 rows=100901 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=40165.89..1337832.79 rows=559008 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..39606.89 rows=2236032 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..3.15 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
(29 rows)

DROP VIEW
query 16 run 1
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=263530.59..263530.59 rows=1 width=44)
   ->  Sort  (cost=263530.59..263916.68 rows=154438 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=183298.11..262758.40 rows=154438 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Gather Merge  (cost=183298.11..255208.23 rows=600579 width=40)
                     Workers Planned: 4
                     ->  Sort  (cost=182298.06..182673.42 rows=150145 width=40)
                           Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                           ->  Parallel Hash Join  (cost=57890.98..169388.59 rows=150145 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..112344.12 rows=999980 width=8)
                                       Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=53481.09..53481.09 rows=75074 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..53481.09 rows=75074 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 16 run 2
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=263530.59..263530.59 rows=1 width=44)
   ->  Sort  (cost=263530.59..263916.68 rows=154438 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=183298.11..262758.40 rows=154438 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Gather Merge  (cost=183298.11..255208.23 rows=600579 width=40)
                     Workers Planned: 4
                     ->  Sort  (cost=182298.06..182673.42 rows=150145 width=40)
                           Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                           ->  Parallel Hash Join  (cost=57890.98..169388.59 rows=150145 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..112344.12 rows=999980 width=8)
                                       Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=53481.09..53481.09 rows=75074 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..53481.09 rows=75074 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 16 run 3
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=263530.59..263530.59 rows=1 width=44)
   ->  Sort  (cost=263530.59..263916.68 rows=154438 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=183298.11..262758.40 rows=154438 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Gather Merge  (cost=183298.11..255208.23 rows=600579 width=40)
                     Workers Planned: 4
                     ->  Sort  (cost=182298.06..182673.42 rows=150145 width=40)
                           Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                           ->  Parallel Hash Join  (cost=57890.98..169388.59 rows=150145 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..112344.12 rows=999980 width=8)
                                       Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=53481.09..53481.09 rows=75074 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..53481.09 rows=75074 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 16 run 4
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=263530.59..263530.59 rows=1 width=44)
   ->  Sort  (cost=263530.59..263916.68 rows=154438 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=183298.11..262758.40 rows=154438 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Gather Merge  (cost=183298.11..255208.23 rows=600579 width=40)
                     Workers Planned: 4
                     ->  Sort  (cost=182298.06..182673.42 rows=150145 width=40)
                           Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                           ->  Parallel Hash Join  (cost=57890.98..169388.59 rows=150145 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..112344.12 rows=999980 width=8)
                                       Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=53481.09..53481.09 rows=75074 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..53481.09 rows=75074 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 16 run 5
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=263530.59..263530.59 rows=1 width=44)
   ->  Sort  (cost=263530.59..263916.68 rows=154438 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=183298.11..262758.40 rows=154438 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Gather Merge  (cost=183298.11..255208.23 rows=600579 width=40)
                     Workers Planned: 4
                     ->  Sort  (cost=182298.06..182673.42 rows=150145 width=40)
                           Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                           ->  Parallel Hash Join  (cost=57890.98..169388.59 rows=150145 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..112344.12 rows=999980 width=8)
                                       Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=53481.09..53481.09 rows=75074 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..53481.09 rows=75074 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 17 run 1
SET
SET
SET
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1751467.70..1751467.72 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1751467.70..1751467.72 rows=1 width=32)
         ->  Gather  (cost=1751467.27..1751467.68 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1750467.27..1750467.28 rows=1 width=32)
                     ->  Nested Loop  (cost=48506.59..1750453.81 rows=5383 width=8)
                           Join Filter: (part.p_partkey = lineitem.l_partkey)
                           ->  Merge Join  (cost=48506.02..1748668.29 rows=592 width=40)
                                 Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                                 ->  Sort  (cost=48505.46..48506.80 rows=538 width=4)
                                       Sort Key: part.p_partkey
                                       ->  Parallel Seq Scan on part  (cost=0.00..48481.06 rows=538 width=4)
                                             Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  GroupAggregate  (cost=0.56..1694659.69 rows=2197814 width=36)
                                       Group Key: lineitem_1.l_partkey
                                       ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.56..1361789.00 rows=59980696 width=9)
                           ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..2.90 rows=9 width=17)
                                 Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
(18 rows)

query 17 run 2
SET
SET
SET
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1751467.70..1751467.72 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1751467.70..1751467.72 rows=1 width=32)
         ->  Gather  (cost=1751467.27..1751467.68 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1750467.27..1750467.28 rows=1 width=32)
                     ->  Nested Loop  (cost=48506.59..1750453.81 rows=5383 width=8)
                           Join Filter: (part.p_partkey = lineitem.l_partkey)
                           ->  Merge Join  (cost=48506.02..1748668.29 rows=592 width=40)
                                 Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                                 ->  Sort  (cost=48505.46..48506.80 rows=538 width=4)
                                       Sort Key: part.p_partkey
                                       ->  Parallel Seq Scan on part  (cost=0.00..48481.06 rows=538 width=4)
                                             Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  GroupAggregate  (cost=0.56..1694659.69 rows=2197814 width=36)
                                       Group Key: lineitem_1.l_partkey
                                       ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.56..1361789.00 rows=59980696 width=9)
                           ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..2.90 rows=9 width=17)
                                 Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
(18 rows)

query 17 run 3
SET
SET
SET
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1751467.70..1751467.72 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1751467.70..1751467.72 rows=1 width=32)
         ->  Gather  (cost=1751467.27..1751467.68 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1750467.27..1750467.28 rows=1 width=32)
                     ->  Nested Loop  (cost=48506.59..1750453.81 rows=5383 width=8)
                           Join Filter: (part.p_partkey = lineitem.l_partkey)
                           ->  Merge Join  (cost=48506.02..1748668.29 rows=592 width=40)
                                 Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                                 ->  Sort  (cost=48505.46..48506.80 rows=538 width=4)
                                       Sort Key: part.p_partkey
                                       ->  Parallel Seq Scan on part  (cost=0.00..48481.06 rows=538 width=4)
                                             Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  GroupAggregate  (cost=0.56..1694659.69 rows=2197814 width=36)
                                       Group Key: lineitem_1.l_partkey
                                       ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.56..1361789.00 rows=59980696 width=9)
                           ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..2.90 rows=9 width=17)
                                 Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
(18 rows)

query 17 run 4
SET
SET
SET
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1751467.70..1751467.72 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1751467.70..1751467.72 rows=1 width=32)
         ->  Gather  (cost=1751467.27..1751467.68 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1750467.27..1750467.28 rows=1 width=32)
                     ->  Nested Loop  (cost=48506.59..1750453.81 rows=5383 width=8)
                           Join Filter: (part.p_partkey = lineitem.l_partkey)
                           ->  Merge Join  (cost=48506.02..1748668.29 rows=592 width=40)
                                 Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                                 ->  Sort  (cost=48505.46..48506.80 rows=538 width=4)
                                       Sort Key: part.p_partkey
                                       ->  Parallel Seq Scan on part  (cost=0.00..48481.06 rows=538 width=4)
                                             Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  GroupAggregate  (cost=0.56..1694659.69 rows=2197814 width=36)
                                       Group Key: lineitem_1.l_partkey
                                       ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.56..1361789.00 rows=59980696 width=9)
                           ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..2.90 rows=9 width=17)
                                 Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
(18 rows)

query 17 run 5
SET
SET
SET
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1751467.70..1751467.72 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1751467.70..1751467.72 rows=1 width=32)
         ->  Gather  (cost=1751467.27..1751467.68 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1750467.27..1750467.28 rows=1 width=32)
                     ->  Nested Loop  (cost=48506.59..1750453.81 rows=5383 width=8)
                           Join Filter: (part.p_partkey = lineitem.l_partkey)
                           ->  Merge Join  (cost=48506.02..1748668.29 rows=592 width=40)
                                 Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                                 ->  Sort  (cost=48505.46..48506.80 rows=538 width=4)
                                       Sort Key: part.p_partkey
                                       ->  Parallel Seq Scan on part  (cost=0.00..48481.06 rows=538 width=4)
                                             Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  GroupAggregate  (cost=0.56..1694659.69 rows=2197814 width=36)
                                       Group Key: lineitem_1.l_partkey
                                       ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.56..1361789.00 rows=59980696 width=9)
                           ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..2.90 rows=9 width=17)
                                 Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
(18 rows)

query 18 run 1
SET
SET
SET
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=6974443.23..6974443.48 rows=100 width=71)
   ->  Sort  (cost=6974443.23..7024414.99 rows=19988703 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=836786.83..6210489.38 rows=19988703 width=71)
               Group Key: orders.o_orderkey, customer.c_custkey
               ->  Incremental Sort  (cost=836786.83..5810715.32 rows=19988703 width=44)
                     Sort Key: orders.o_orderkey, customer.c_custkey
                     Presorted Key: orders.o_orderkey
                     ->  Merge Join  (cost=836786.54..5085869.55 rows=19988703 width=44)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Gather Merge  (cost=836667.74..3362114.30 rows=4998391 width=43)
                                 Workers Planned: 4
                                 ->  Merge Join  (cost=835667.68..2765757.69 rows=1249598 width=43)
                                       Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Sort  (cost=835667.11..845041.38 rows=3749705 width=39)
                                             Sort Key: orders.o_orderkey
                                             ->  Parallel Hash Join  (cost=44384.79..352992.84 rows=3749705 width=39)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..298765.05 rows=3749705 width=20)
                                                   ->  Parallel Hash  (cost=39697.13..39697.13 rows=375013 width=23)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..39697.13 rows=375013 width=23)
                                       ->  GroupAggregate  (cost=0.56..1886350.09 rows=4998391 width=4)
                                             Group Key: lineitem_1.l_orderkey
                                             Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                             ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.56..1361519.00 rows=59980696 width=9)
                           ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.56..1361519.00 rows=59980696 width=9)
(26 rows)

query 18 run 2
SET
SET
SET
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=6974443.23..6974443.48 rows=100 width=71)
   ->  Sort  (cost=6974443.23..7024414.99 rows=19988703 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=836786.83..6210489.38 rows=19988703 width=71)
               Group Key: orders.o_orderkey, customer.c_custkey
               ->  Incremental Sort  (cost=836786.83..5810715.32 rows=19988703 width=44)
                     Sort Key: orders.o_orderkey, customer.c_custkey
                     Presorted Key: orders.o_orderkey
                     ->  Merge Join  (cost=836786.54..5085869.55 rows=19988703 width=44)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Gather Merge  (cost=836667.74..3362114.30 rows=4998391 width=43)
                                 Workers Planned: 4
                                 ->  Merge Join  (cost=835667.68..2765757.69 rows=1249598 width=43)
                                       Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Sort  (cost=835667.11..845041.38 rows=3749705 width=39)
                                             Sort Key: orders.o_orderkey
                                             ->  Parallel Hash Join  (cost=44384.79..352992.84 rows=3749705 width=39)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..298765.05 rows=3749705 width=20)
                                                   ->  Parallel Hash  (cost=39697.13..39697.13 rows=375013 width=23)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..39697.13 rows=375013 width=23)
                                       ->  GroupAggregate  (cost=0.56..1886350.09 rows=4998391 width=4)
                                             Group Key: lineitem_1.l_orderkey
                                             Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                             ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.56..1361519.00 rows=59980696 width=9)
                           ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.56..1361519.00 rows=59980696 width=9)
(26 rows)

query 18 run 3
SET
SET
SET
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=6974443.23..6974443.48 rows=100 width=71)
   ->  Sort  (cost=6974443.23..7024414.99 rows=19988703 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=836786.83..6210489.38 rows=19988703 width=71)
               Group Key: orders.o_orderkey, customer.c_custkey
               ->  Incremental Sort  (cost=836786.83..5810715.32 rows=19988703 width=44)
                     Sort Key: orders.o_orderkey, customer.c_custkey
                     Presorted Key: orders.o_orderkey
                     ->  Merge Join  (cost=836786.54..5085869.55 rows=19988703 width=44)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Gather Merge  (cost=836667.74..3362114.30 rows=4998391 width=43)
                                 Workers Planned: 4
                                 ->  Merge Join  (cost=835667.68..2765757.69 rows=1249598 width=43)
                                       Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Sort  (cost=835667.11..845041.38 rows=3749705 width=39)
                                             Sort Key: orders.o_orderkey
                                             ->  Parallel Hash Join  (cost=44384.79..352992.84 rows=3749705 width=39)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..298765.05 rows=3749705 width=20)
                                                   ->  Parallel Hash  (cost=39697.13..39697.13 rows=375013 width=23)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..39697.13 rows=375013 width=23)
                                       ->  GroupAggregate  (cost=0.56..1886350.09 rows=4998391 width=4)
                                             Group Key: lineitem_1.l_orderkey
                                             Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                             ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.56..1361519.00 rows=59980696 width=9)
                           ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.56..1361519.00 rows=59980696 width=9)
(26 rows)

query 18 run 4
SET
SET
SET
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=6974443.23..6974443.48 rows=100 width=71)
   ->  Sort  (cost=6974443.23..7024414.99 rows=19988703 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=836786.83..6210489.38 rows=19988703 width=71)
               Group Key: orders.o_orderkey, customer.c_custkey
               ->  Incremental Sort  (cost=836786.83..5810715.32 rows=19988703 width=44)
                     Sort Key: orders.o_orderkey, customer.c_custkey
                     Presorted Key: orders.o_orderkey
                     ->  Merge Join  (cost=836786.54..5085869.55 rows=19988703 width=44)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Gather Merge  (cost=836667.74..3362114.30 rows=4998391 width=43)
                                 Workers Planned: 4
                                 ->  Merge Join  (cost=835667.68..2765757.69 rows=1249598 width=43)
                                       Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Sort  (cost=835667.11..845041.38 rows=3749705 width=39)
                                             Sort Key: orders.o_orderkey
                                             ->  Parallel Hash Join  (cost=44384.79..352992.84 rows=3749705 width=39)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..298765.05 rows=3749705 width=20)
                                                   ->  Parallel Hash  (cost=39697.13..39697.13 rows=375013 width=23)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..39697.13 rows=375013 width=23)
                                       ->  GroupAggregate  (cost=0.56..1886350.09 rows=4998391 width=4)
                                             Group Key: lineitem_1.l_orderkey
                                             Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                             ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.56..1361519.00 rows=59980696 width=9)
                           ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.56..1361519.00 rows=59980696 width=9)
(26 rows)

query 18 run 5
SET
SET
SET
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=6974443.23..6974443.48 rows=100 width=71)
   ->  Sort  (cost=6974443.23..7024414.99 rows=19988703 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=836786.83..6210489.38 rows=19988703 width=71)
               Group Key: orders.o_orderkey, customer.c_custkey
               ->  Incremental Sort  (cost=836786.83..5810715.32 rows=19988703 width=44)
                     Sort Key: orders.o_orderkey, customer.c_custkey
                     Presorted Key: orders.o_orderkey
                     ->  Merge Join  (cost=836786.54..5085869.55 rows=19988703 width=44)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Gather Merge  (cost=836667.74..3362114.30 rows=4998391 width=43)
                                 Workers Planned: 4
                                 ->  Merge Join  (cost=835667.68..2765757.69 rows=1249598 width=43)
                                       Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Sort  (cost=835667.11..845041.38 rows=3749705 width=39)
                                             Sort Key: orders.o_orderkey
                                             ->  Parallel Hash Join  (cost=44384.79..352992.84 rows=3749705 width=39)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..298765.05 rows=3749705 width=20)
                                                   ->  Parallel Hash  (cost=39697.13..39697.13 rows=375013 width=23)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..39697.13 rows=375013 width=23)
                                       ->  GroupAggregate  (cost=0.56..1886350.09 rows=4998391 width=4)
                                             Group Key: lineitem_1.l_orderkey
                                             Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                             ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.56..1361519.00 rows=59980696 width=9)
                           ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.56..1361519.00 rows=59980696 width=9)
(26 rows)

query 19 run 1
SET
SET
SET


 Limit  (cost=69630.62..69630.63 rows=1 width=32)
   ->  Finalize Aggregate  (cost=69630.62..69630.63 rows=1 width=32)
         ->  Gather  (cost=69630.19..69630.60 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=68630.19..68630.20 rows=1 width=32)
                     ->  Nested Loop  (cost=0.56..68628.24 rows=260 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..62231.16 rows=1228 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..5.20 rows=1 width=21)
                                 Index Cond: ((l_partkey = part.p_partkey) AND (l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                                 Filter: ((((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 19 run 2
SET
SET
SET


 Limit  (cost=69630.62..69630.63 rows=1 width=32)
   ->  Finalize Aggregate  (cost=69630.62..69630.63 rows=1 width=32)
         ->  Gather  (cost=69630.19..69630.60 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=68630.19..68630.20 rows=1 width=32)
                     ->  Nested Loop  (cost=0.56..68628.24 rows=260 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..62231.16 rows=1228 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..5.20 rows=1 width=21)
                                 Index Cond: ((l_partkey = part.p_partkey) AND (l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                                 Filter: ((((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 19 run 3
SET
SET
SET


 Limit  (cost=69630.62..69630.63 rows=1 width=32)
   ->  Finalize Aggregate  (cost=69630.62..69630.63 rows=1 width=32)
         ->  Gather  (cost=69630.19..69630.60 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=68630.19..68630.20 rows=1 width=32)
                     ->  Nested Loop  (cost=0.56..68628.24 rows=260 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..62231.16 rows=1228 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..5.20 rows=1 width=21)
                                 Index Cond: ((l_partkey = part.p_partkey) AND (l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                                 Filter: ((((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 19 run 4
SET
SET
SET
                                                                                                                                                                                                                                                                                                                                                                                                                                                              QUERY PLAN                                                                                                                                                                                                                                                                                                                                                                                                                                                              

 Limit  (cost=69630.62..69630.63 rows=1 width=32)
   ->  Finalize Aggregate  (cost=69630.62..69630.63 rows=1 width=32)
         ->  Gather  (cost=69630.19..69630.60 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=68630.19..68630.20 rows=1 width=32)
                     ->  Nested Loop  (cost=0.56..68628.24 rows=260 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..62231.16 rows=1228 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..5.20 rows=1 width=21)
                                 Index Cond: ((l_partkey = part.p_partkey) AND (l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                                 Filter: ((((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 19 run 5
SET
SET
SET


 Limit  (cost=69630.62..69630.63 rows=1 width=32)
   ->  Finalize Aggregate  (cost=69630.62..69630.63 rows=1 width=32)
         ->  Gather  (cost=69630.19..69630.60 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=68630.19..68630.20 rows=1 width=32)
                     ->  Nested Loop  (cost=0.56..68628.24 rows=260 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..62231.16 rows=1228 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..5.20 rows=1 width=21)
                                 Index Cond: ((l_partkey = part.p_partkey) AND (l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                                 Filter: ((((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 20 run 1
SET
SET
SET
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2517733.79..2713216.80 rows=1 width=51)
   ->  Nested Loop Semi Join  (cost=2517733.79..2713216.80 rows=1 width=51)
         Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
         ->  Gather Merge  (cost=4122.93..4578.81 rows=4000 width=55)
               Workers Planned: 1
               ->  Sort  (cost=3122.92..3128.80 rows=2353 width=55)
                     Sort Key: supplier.s_name
                     ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=55)
                           Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=59)
                           ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'IRAQ'::bpchar)
         ->  Materialize  (cost=2513610.86..2708457.99 rows=3 width=8)
               ->  Hash Join  (cost=2513610.86..2708457.97 rows=3 width=8)
                     Hash Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                     Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                     ->  HashAggregate  (cost=2443607.18..2602488.68 rows=4795398 width=40)
                           Group Key: lineitem.l_partkey, lineitem.l_suppkey
                           Planned Partitions: 32
                           ->  Seq Scan on lineitem  (cost=0.00..2024853.44 rows=8903734 width=13)
                                 Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                     ->  Hash  (cost=68791.59..68791.59 rows=80806 width=16)
                           ->  Gather  (cost=1000.86..68791.59 rows=80806 width=16)
                                 Workers Planned: 4
                                 ->  Nested Loop  (cost=0.86..59710.99 rows=20202 width=16)
                                       ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.43..45556.55 rows=5050 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.43..2.62 rows=18 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
(30 rows)

query 20 run 2
SET
SET
SET
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2517733.79..2713216.80 rows=1 width=51)
   ->  Nested Loop Semi Join  (cost=2517733.79..2713216.80 rows=1 width=51)
         Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
         ->  Gather Merge  (cost=4122.93..4578.81 rows=4000 width=55)
               Workers Planned: 1
               ->  Sort  (cost=3122.92..3128.80 rows=2353 width=55)
                     Sort Key: supplier.s_name
                     ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=55)
                           Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=59)
                           ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'IRAQ'::bpchar)
         ->  Materialize  (cost=2513610.86..2708457.99 rows=3 width=8)
               ->  Hash Join  (cost=2513610.86..2708457.97 rows=3 width=8)
                     Hash Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                     Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                     ->  HashAggregate  (cost=2443607.18..2602488.68 rows=4795398 width=40)
                           Group Key: lineitem.l_partkey, lineitem.l_suppkey
                           Planned Partitions: 32
                           ->  Seq Scan on lineitem  (cost=0.00..2024853.44 rows=8903734 width=13)
                                 Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                     ->  Hash  (cost=68791.59..68791.59 rows=80806 width=16)
                           ->  Gather  (cost=1000.86..68791.59 rows=80806 width=16)
                                 Workers Planned: 4
                                 ->  Nested Loop  (cost=0.86..59710.99 rows=20202 width=16)
                                       ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.43..45556.55 rows=5050 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.43..2.62 rows=18 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
(30 rows)

query 20 run 3
SET
SET
SET
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2517733.79..2713216.80 rows=1 width=51)
   ->  Nested Loop Semi Join  (cost=2517733.79..2713216.80 rows=1 width=51)
         Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
         ->  Gather Merge  (cost=4122.93..4578.81 rows=4000 width=55)
               Workers Planned: 1
               ->  Sort  (cost=3122.92..3128.80 rows=2353 width=55)
                     Sort Key: supplier.s_name
                     ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=55)
                           Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=59)
                           ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'IRAQ'::bpchar)
         ->  Materialize  (cost=2513610.86..2708457.99 rows=3 width=8)
               ->  Hash Join  (cost=2513610.86..2708457.97 rows=3 width=8)
                     Hash Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                     Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                     ->  HashAggregate  (cost=2443607.18..2602488.68 rows=4795398 width=40)
                           Group Key: lineitem.l_partkey, lineitem.l_suppkey
                           Planned Partitions: 32
                           ->  Seq Scan on lineitem  (cost=0.00..2024853.44 rows=8903734 width=13)
                                 Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                     ->  Hash  (cost=68791.59..68791.59 rows=80806 width=16)
                           ->  Gather  (cost=1000.86..68791.59 rows=80806 width=16)
                                 Workers Planned: 4
                                 ->  Nested Loop  (cost=0.86..59710.99 rows=20202 width=16)
                                       ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.43..45556.55 rows=5050 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.43..2.62 rows=18 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
(30 rows)

query 20 run 4
SET
SET
SET
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2517733.79..2713216.80 rows=1 width=51)
   ->  Nested Loop Semi Join  (cost=2517733.79..2713216.80 rows=1 width=51)
         Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
         ->  Gather Merge  (cost=4122.93..4578.81 rows=4000 width=55)
               Workers Planned: 1
               ->  Sort  (cost=3122.92..3128.80 rows=2353 width=55)
                     Sort Key: supplier.s_name
                     ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=55)
                           Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=59)
                           ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'IRAQ'::bpchar)
         ->  Materialize  (cost=2513610.86..2708457.99 rows=3 width=8)
               ->  Hash Join  (cost=2513610.86..2708457.97 rows=3 width=8)
                     Hash Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                     Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                     ->  HashAggregate  (cost=2443607.18..2602488.68 rows=4795398 width=40)
                           Group Key: lineitem.l_partkey, lineitem.l_suppkey
                           Planned Partitions: 32
                           ->  Seq Scan on lineitem  (cost=0.00..2024853.44 rows=8903734 width=13)
                                 Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                     ->  Hash  (cost=68791.59..68791.59 rows=80806 width=16)
                           ->  Gather  (cost=1000.86..68791.59 rows=80806 width=16)
                                 Workers Planned: 4
                                 ->  Nested Loop  (cost=0.86..59710.99 rows=20202 width=16)
                                       ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.43..45556.55 rows=5050 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.43..2.62 rows=18 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
(30 rows)

query 20 run 5
SET
SET
SET
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2517733.79..2713216.80 rows=1 width=51)
   ->  Nested Loop Semi Join  (cost=2517733.79..2713216.80 rows=1 width=51)
         Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
         ->  Gather Merge  (cost=4122.93..4578.81 rows=4000 width=55)
               Workers Planned: 1
               ->  Sort  (cost=3122.92..3128.80 rows=2353 width=55)
                     Sort Key: supplier.s_name
                     ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=55)
                           Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=59)
                           ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'IRAQ'::bpchar)
         ->  Materialize  (cost=2513610.86..2708457.99 rows=3 width=8)
               ->  Hash Join  (cost=2513610.86..2708457.97 rows=3 width=8)
                     Hash Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                     Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                     ->  HashAggregate  (cost=2443607.18..2602488.68 rows=4795398 width=40)
                           Group Key: lineitem.l_partkey, lineitem.l_suppkey
                           Planned Partitions: 32
                           ->  Seq Scan on lineitem  (cost=0.00..2024853.44 rows=8903734 width=13)
                                 Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                     ->  Hash  (cost=68791.59..68791.59 rows=80806 width=16)
                           ->  Gather  (cost=1000.86..68791.59 rows=80806 width=16)
                                 Workers Planned: 4
                                 ->  Nested Loop  (cost=0.86..59710.99 rows=20202 width=16)
                                       ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.43..45556.55 rows=5050 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.43..2.62 rows=18 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
(30 rows)

query 21 run 1
SET
SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=565186.45..565186.46 rows=1 width=34)
   ->  Sort  (cost=565186.45..565186.46 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=565186.42..565186.44 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=565186.42..565186.43 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=286010.89..565186.41 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=286010.33..565183.77 rows=1 width=38)
                                 ->  Gather  (cost=286009.89..565181.32 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Parallel Hash Right Anti Join  (cost=285009.89..564181.22 rows=1 width=34)
                                             Hash Cond: (l3.l_orderkey = l1.l_orderkey)
                                             Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                             ->  Parallel Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.56..259602.30 rows=4998391 width=8)
                                             ->  Parallel Hash  (cost=282532.45..282532.45 rows=198150 width=34)
                                                   ->  Parallel Hash Join  (cost=3021.13..282532.45 rows=198150 width=34)
                                                         Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                         ->  Parallel Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.56..259602.30 rows=4998391 width=8)
                                                         ->  Parallel Hash  (cost=2991.15..2991.15 rows=2353 width=30)
                                                               ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=30)
                                                                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                                     ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=34)
                                                                     ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                                 Filter: (n_name = 'PERU'::bpchar)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.45 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.56..2.63 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(31 rows)

query 21 run 2
SET
SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=565186.45..565186.46 rows=1 width=34)
   ->  Sort  (cost=565186.45..565186.46 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=565186.42..565186.44 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=565186.42..565186.43 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=286010.89..565186.41 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=286010.33..565183.77 rows=1 width=38)
                                 ->  Gather  (cost=286009.89..565181.32 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Parallel Hash Right Anti Join  (cost=285009.89..564181.22 rows=1 width=34)
                                             Hash Cond: (l3.l_orderkey = l1.l_orderkey)
                                             Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                             ->  Parallel Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.56..259602.30 rows=4998391 width=8)
                                             ->  Parallel Hash  (cost=282532.45..282532.45 rows=198150 width=34)
                                                   ->  Parallel Hash Join  (cost=3021.13..282532.45 rows=198150 width=34)
                                                         Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                         ->  Parallel Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.56..259602.30 rows=4998391 width=8)
                                                         ->  Parallel Hash  (cost=2991.15..2991.15 rows=2353 width=30)
                                                               ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=30)
                                                                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                                     ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=34)
                                                                     ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                                 Filter: (n_name = 'PERU'::bpchar)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.45 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.56..2.63 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(31 rows)

query 21 run 3
SET
SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=565186.45..565186.46 rows=1 width=34)
   ->  Sort  (cost=565186.45..565186.46 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=565186.42..565186.44 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=565186.42..565186.43 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=286010.89..565186.41 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=286010.33..565183.77 rows=1 width=38)
                                 ->  Gather  (cost=286009.89..565181.32 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Parallel Hash Right Anti Join  (cost=285009.89..564181.22 rows=1 width=34)
                                             Hash Cond: (l3.l_orderkey = l1.l_orderkey)
                                             Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                             ->  Parallel Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.56..259602.30 rows=4998391 width=8)
                                             ->  Parallel Hash  (cost=282532.45..282532.45 rows=198150 width=34)
                                                   ->  Parallel Hash Join  (cost=3021.13..282532.45 rows=198150 width=34)
                                                         Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                         ->  Parallel Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.56..259602.30 rows=4998391 width=8)
                                                         ->  Parallel Hash  (cost=2991.15..2991.15 rows=2353 width=30)
                                                               ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=30)
                                                                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                                     ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=34)
                                                                     ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                                 Filter: (n_name = 'PERU'::bpchar)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.45 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.56..2.63 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(31 rows)

query 21 run 4
SET
SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=565186.45..565186.46 rows=1 width=34)
   ->  Sort  (cost=565186.45..565186.46 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=565186.42..565186.44 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=565186.42..565186.43 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=286010.89..565186.41 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=286010.33..565183.77 rows=1 width=38)
                                 ->  Gather  (cost=286009.89..565181.32 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Parallel Hash Right Anti Join  (cost=285009.89..564181.22 rows=1 width=34)
                                             Hash Cond: (l3.l_orderkey = l1.l_orderkey)
                                             Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                             ->  Parallel Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.56..259602.30 rows=4998391 width=8)
                                             ->  Parallel Hash  (cost=282532.45..282532.45 rows=198150 width=34)
                                                   ->  Parallel Hash Join  (cost=3021.13..282532.45 rows=198150 width=34)
                                                         Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                         ->  Parallel Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.56..259602.30 rows=4998391 width=8)
                                                         ->  Parallel Hash  (cost=2991.15..2991.15 rows=2353 width=30)
                                                               ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=30)
                                                                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                                     ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=34)
                                                                     ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                                 Filter: (n_name = 'PERU'::bpchar)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.45 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.56..2.63 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(31 rows)

query 21 run 5
SET
SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=565186.45..565186.46 rows=1 width=34)
   ->  Sort  (cost=565186.45..565186.46 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=565186.42..565186.44 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=565186.42..565186.43 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=286010.89..565186.41 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=286010.33..565183.77 rows=1 width=38)
                                 ->  Gather  (cost=286009.89..565181.32 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Parallel Hash Right Anti Join  (cost=285009.89..564181.22 rows=1 width=34)
                                             Hash Cond: (l3.l_orderkey = l1.l_orderkey)
                                             Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                             ->  Parallel Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.56..259602.30 rows=4998391 width=8)
                                             ->  Parallel Hash  (cost=282532.45..282532.45 rows=198150 width=34)
                                                   ->  Parallel Hash Join  (cost=3021.13..282532.45 rows=198150 width=34)
                                                         Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                         ->  Parallel Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.56..259602.30 rows=4998391 width=8)
                                                         ->  Parallel Hash  (cost=2991.15..2991.15 rows=2353 width=30)
                                                               ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=30)
                                                                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                                     ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=34)
                                                                     ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                                 Filter: (n_name = 'PERU'::bpchar)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.45 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.56..2.63 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(31 rows)

query 22 run 1
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=93877.58..93879.34 rows=1 width=72)
   InitPlan 1
     ->  Finalize Aggregate  (cost=46821.40..46821.41 rows=1 width=32)
           ->  Gather  (cost=46820.97..46821.38 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=45820.97..45820.98 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..45791.09 rows=11951 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=47056.16..60466.86 rows=7591 width=72)
         Group Key: SUBSTRING(customer.c_phone FROM 1 FOR 2)
         ->  Nested Loop Anti Join  (cost=47056.16..60277.08 rows=7591 width=38)
               ->  Gather Merge  (cost=47055.73..49151.20 rows=17501 width=26)
                     Workers Planned: 4
                     ->  Sort  (cost=46055.67..46066.61 rows=4375 width=26)
                           Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                           ->  Parallel Seq Scan on customer  (cost=0.00..45791.09 rows=4375 width=26)
                                 Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
               ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.65 rows=18 width=4)
                     Index Cond: (o_custkey = customer.c_custkey)
(19 rows)

query 22 run 2
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=93877.58..93879.34 rows=1 width=72)
   InitPlan 1
     ->  Finalize Aggregate  (cost=46821.40..46821.41 rows=1 width=32)
           ->  Gather  (cost=46820.97..46821.38 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=45820.97..45820.98 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..45791.09 rows=11951 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=47056.16..60466.86 rows=7591 width=72)
         Group Key: SUBSTRING(customer.c_phone FROM 1 FOR 2)
         ->  Nested Loop Anti Join  (cost=47056.16..60277.08 rows=7591 width=38)
               ->  Gather Merge  (cost=47055.73..49151.20 rows=17501 width=26)
                     Workers Planned: 4
                     ->  Sort  (cost=46055.67..46066.61 rows=4375 width=26)
                           Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                           ->  Parallel Seq Scan on customer  (cost=0.00..45791.09 rows=4375 width=26)
                                 Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
               ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.65 rows=18 width=4)
                     Index Cond: (o_custkey = customer.c_custkey)
(19 rows)

query 22 run 3
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=93877.58..93879.34 rows=1 width=72)
   InitPlan 1
     ->  Finalize Aggregate  (cost=46821.40..46821.41 rows=1 width=32)
           ->  Gather  (cost=46820.97..46821.38 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=45820.97..45820.98 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..45791.09 rows=11951 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=47056.16..60466.86 rows=7591 width=72)
         Group Key: SUBSTRING(customer.c_phone FROM 1 FOR 2)
         ->  Nested Loop Anti Join  (cost=47056.16..60277.08 rows=7591 width=38)
               ->  Gather Merge  (cost=47055.73..49151.20 rows=17501 width=26)
                     Workers Planned: 4
                     ->  Sort  (cost=46055.67..46066.61 rows=4375 width=26)
                           Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                           ->  Parallel Seq Scan on customer  (cost=0.00..45791.09 rows=4375 width=26)
                                 Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
               ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.65 rows=18 width=4)
                     Index Cond: (o_custkey = customer.c_custkey)
(19 rows)

query 22 run 4
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=93877.58..93879.34 rows=1 width=72)
   InitPlan 1
     ->  Finalize Aggregate  (cost=46821.40..46821.41 rows=1 width=32)
           ->  Gather  (cost=46820.97..46821.38 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=45820.97..45820.98 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..45791.09 rows=11951 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=47056.16..60466.86 rows=7591 width=72)
         Group Key: SUBSTRING(customer.c_phone FROM 1 FOR 2)
         ->  Nested Loop Anti Join  (cost=47056.16..60277.08 rows=7591 width=38)
               ->  Gather Merge  (cost=47055.73..49151.20 rows=17501 width=26)
                     Workers Planned: 4
                     ->  Sort  (cost=46055.67..46066.61 rows=4375 width=26)
                           Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                           ->  Parallel Seq Scan on customer  (cost=0.00..45791.09 rows=4375 width=26)
                                 Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
               ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.65 rows=18 width=4)
                     Index Cond: (o_custkey = customer.c_custkey)
(19 rows)

query 22 run 5
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=93877.58..93879.34 rows=1 width=72)
   InitPlan 1
     ->  Finalize Aggregate  (cost=46821.40..46821.41 rows=1 width=32)
           ->  Gather  (cost=46820.97..46821.38 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=45820.97..45820.98 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..45791.09 rows=11951 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=47056.16..60466.86 rows=7591 width=72)
         Group Key: SUBSTRING(customer.c_phone FROM 1 FOR 2)
         ->  Nested Loop Anti Join  (cost=47056.16..60277.08 rows=7591 width=38)
               ->  Gather Merge  (cost=47055.73..49151.20 rows=17501 width=26)
                     Workers Planned: 4
                     ->  Sort  (cost=46055.67..46066.61 rows=4375 width=26)
                           Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                           ->  Parallel Seq Scan on customer  (cost=0.00..45791.09 rows=4375 width=26)
                                 Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
               ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.65 rows=18 width=4)
                     Index Cond: (o_custkey = customer.c_custkey)
(19 rows)

