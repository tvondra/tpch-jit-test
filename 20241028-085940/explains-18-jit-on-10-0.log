query 1 run 1
SET
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=3947860.81..3947860.82 rows=1 width=236)
   ->  Sort  (cost=3947860.81..3947860.83 rows=6 width=236)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=3947860.62..3947860.79 rows=6 width=236)
               Group Key: l_returnflag, l_linestatus
               ->  Seq Scan on lineitem  (cost=0.00..1874983.80 rows=59225052 width=25)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
 JIT:
   Functions: 7
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(10 rows)

query 1 run 2
SET
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=3947860.81..3947860.82 rows=1 width=236)
   ->  Sort  (cost=3947860.81..3947860.83 rows=6 width=236)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=3947860.62..3947860.79 rows=6 width=236)
               Group Key: l_returnflag, l_linestatus
               ->  Seq Scan on lineitem  (cost=0.00..1874983.80 rows=59225052 width=25)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
 JIT:
   Functions: 7
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(10 rows)

query 1 run 3
SET
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=3947860.81..3947860.82 rows=1 width=236)
   ->  Sort  (cost=3947860.81..3947860.83 rows=6 width=236)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=3947860.62..3947860.79 rows=6 width=236)
               Group Key: l_returnflag, l_linestatus
               ->  Seq Scan on lineitem  (cost=0.00..1874983.80 rows=59225052 width=25)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
 JIT:
   Functions: 7
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(10 rows)

query 1 run 4
SET
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=3947860.81..3947860.82 rows=1 width=236)
   ->  Sort  (cost=3947860.81..3947860.83 rows=6 width=236)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=3947860.62..3947860.79 rows=6 width=236)
               Group Key: l_returnflag, l_linestatus
               ->  Seq Scan on lineitem  (cost=0.00..1874983.80 rows=59225052 width=25)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
 JIT:
   Functions: 7
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(10 rows)

query 1 run 5
SET
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=3947860.81..3947860.82 rows=1 width=236)
   ->  Sort  (cost=3947860.81..3947860.83 rows=6 width=236)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=3947860.62..3947860.79 rows=6 width=236)
               Group Key: l_returnflag, l_linestatus
               ->  Seq Scan on lineitem  (cost=0.00..1874983.80 rows=59225052 width=25)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
 JIT:
   Functions: 7
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(10 rows)

query 2 run 1
SET
SET
SET
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=533125.85..533125.86 rows=1 width=193)
   ->  Sort  (cost=533125.85..533125.86 rows=1 width=193)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=50.37..533125.84 rows=1 width=193)
               Join Filter: (supplier.s_nationkey = nation.n_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=50.37..533123.14 rows=1 width=171)
                     ->  Nested Loop  (cost=50.37..533123.14 rows=1 width=171)
                           Join Filter: (supplier.s_suppkey = partsupp.ps_suppkey)
                           ->  Nested Loop  (cost=50.37..528652.14 rows=1 width=34)
                                 ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..54366.20 rows=9117 width=30)
                                       Index Cond: (p_size = 16)
                                       Filter: ((p_type)::text ~~ '%NICKEL'::text)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=49.94..52.01 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=49.50..49.51 rows=1 width=32)
                                               ->  Nested Loop  (cost=2.41..49.49 rows=4 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Hash Join  (cost=2.41..48.20 rows=18 width=10)
                                                           Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                                           ->  Nested Loop  (cost=0.85..46.58 rows=18 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.43..2.75 rows=18 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.42..2.43 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                                                 ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
                           ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=145)
 JIT:
   Functions: 38
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(38 rows)

query 2 run 2
SET
SET
SET
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=533125.85..533125.86 rows=1 width=193)
   ->  Sort  (cost=533125.85..533125.86 rows=1 width=193)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=50.37..533125.84 rows=1 width=193)
               Join Filter: (supplier.s_nationkey = nation.n_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=50.37..533123.14 rows=1 width=171)
                     ->  Nested Loop  (cost=50.37..533123.14 rows=1 width=171)
                           Join Filter: (supplier.s_suppkey = partsupp.ps_suppkey)
                           ->  Nested Loop  (cost=50.37..528652.14 rows=1 width=34)
                                 ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..54366.20 rows=9117 width=30)
                                       Index Cond: (p_size = 16)
                                       Filter: ((p_type)::text ~~ '%NICKEL'::text)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=49.94..52.01 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=49.50..49.51 rows=1 width=32)
                                               ->  Nested Loop  (cost=2.41..49.49 rows=4 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Hash Join  (cost=2.41..48.20 rows=18 width=10)
                                                           Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                                           ->  Nested Loop  (cost=0.85..46.58 rows=18 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.43..2.75 rows=18 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.42..2.43 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                                                 ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
                           ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=145)
 JIT:
   Functions: 38
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(38 rows)

query 2 run 3
SET
SET
SET
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=533125.85..533125.86 rows=1 width=193)
   ->  Sort  (cost=533125.85..533125.86 rows=1 width=193)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=50.37..533125.84 rows=1 width=193)
               Join Filter: (supplier.s_nationkey = nation.n_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=50.37..533123.14 rows=1 width=171)
                     ->  Nested Loop  (cost=50.37..533123.14 rows=1 width=171)
                           Join Filter: (supplier.s_suppkey = partsupp.ps_suppkey)
                           ->  Nested Loop  (cost=50.37..528652.14 rows=1 width=34)
                                 ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..54366.20 rows=9117 width=30)
                                       Index Cond: (p_size = 16)
                                       Filter: ((p_type)::text ~~ '%NICKEL'::text)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=49.94..52.01 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=49.50..49.51 rows=1 width=32)
                                               ->  Nested Loop  (cost=2.41..49.49 rows=4 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Hash Join  (cost=2.41..48.20 rows=18 width=10)
                                                           Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                                           ->  Nested Loop  (cost=0.85..46.58 rows=18 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.43..2.75 rows=18 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.42..2.43 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                                                 ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
                           ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=145)
 JIT:
   Functions: 38
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(38 rows)

query 2 run 4
SET
SET
SET
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=533125.85..533125.86 rows=1 width=193)
   ->  Sort  (cost=533125.85..533125.86 rows=1 width=193)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=50.37..533125.84 rows=1 width=193)
               Join Filter: (supplier.s_nationkey = nation.n_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=50.37..533123.14 rows=1 width=171)
                     ->  Nested Loop  (cost=50.37..533123.14 rows=1 width=171)
                           Join Filter: (supplier.s_suppkey = partsupp.ps_suppkey)
                           ->  Nested Loop  (cost=50.37..528652.14 rows=1 width=34)
                                 ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..54366.20 rows=9117 width=30)
                                       Index Cond: (p_size = 16)
                                       Filter: ((p_type)::text ~~ '%NICKEL'::text)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=49.94..52.01 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=49.50..49.51 rows=1 width=32)
                                               ->  Nested Loop  (cost=2.41..49.49 rows=4 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Hash Join  (cost=2.41..48.20 rows=18 width=10)
                                                           Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                                           ->  Nested Loop  (cost=0.85..46.58 rows=18 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.43..2.75 rows=18 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.42..2.43 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                                                 ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
                           ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=145)
 JIT:
   Functions: 38
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(38 rows)

query 2 run 5
SET
SET
SET
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=533125.85..533125.86 rows=1 width=193)
   ->  Sort  (cost=533125.85..533125.86 rows=1 width=193)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=50.37..533125.84 rows=1 width=193)
               Join Filter: (supplier.s_nationkey = nation.n_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=50.37..533123.14 rows=1 width=171)
                     ->  Nested Loop  (cost=50.37..533123.14 rows=1 width=171)
                           Join Filter: (supplier.s_suppkey = partsupp.ps_suppkey)
                           ->  Nested Loop  (cost=50.37..528652.14 rows=1 width=34)
                                 ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..54366.20 rows=9117 width=30)
                                       Index Cond: (p_size = 16)
                                       Filter: ((p_type)::text ~~ '%NICKEL'::text)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=49.94..52.01 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=49.50..49.51 rows=1 width=32)
                                               ->  Nested Loop  (cost=2.41..49.49 rows=4 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Hash Join  (cost=2.41..48.20 rows=18 width=10)
                                                           Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                                           ->  Nested Loop  (cost=0.85..46.58 rows=18 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.43..2.75 rows=18 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.42..2.43 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                                                 ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
                           ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=145)
 JIT:
   Functions: 38
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(38 rows)

query 3 run 1
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3204158.18..3204158.21 rows=10 width=44)
   ->  Sort  (cost=3204158.18..3212000.96 rows=3137113 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  HashAggregate  (cost=3060389.34..3136366.30 rows=3137113 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               Planned Partitions: 16
               ->  Hash Join  (cost=520492.28..2877064.30 rows=3137113 width=24)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     ->  Seq Scan on lineitem  (cost=0.00..1874983.80 rows=32792291 width=16)
                           Filter: (l_shipdate > '1995-03-07'::date)
                     ->  Hash  (cost=495546.05..495546.05 rows=1435058 width=12)
                           ->  Hash Join  (cost=126112.20..495546.05 rows=1435058 width=12)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Bitmap Heap Scan on orders  (cost=67652.23..418313.46 rows=7151458 width=16)
                                       Recheck Cond: (o_orderdate < '1995-03-07'::date)
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..65864.37 rows=7151458 width=0)
                                             Index Cond: (o_orderdate < '1995-03-07'::date)
                                 ->  Hash  (cost=54697.39..54697.39 rows=301006 width=4)
                                       ->  Seq Scan on customer  (cost=0.00..54697.39 rows=301006 width=4)
                                             Filter: (c_mktsegment = 'BUILDING'::bpchar)
 JIT:
   Functions: 27
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(23 rows)

query 3 run 2
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3204158.18..3204158.21 rows=10 width=44)
   ->  Sort  (cost=3204158.18..3212000.96 rows=3137113 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  HashAggregate  (cost=3060389.34..3136366.30 rows=3137113 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               Planned Partitions: 16
               ->  Hash Join  (cost=520492.28..2877064.30 rows=3137113 width=24)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     ->  Seq Scan on lineitem  (cost=0.00..1874983.80 rows=32792291 width=16)
                           Filter: (l_shipdate > '1995-03-07'::date)
                     ->  Hash  (cost=495546.05..495546.05 rows=1435058 width=12)
                           ->  Hash Join  (cost=126112.20..495546.05 rows=1435058 width=12)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Bitmap Heap Scan on orders  (cost=67652.23..418313.46 rows=7151458 width=16)
                                       Recheck Cond: (o_orderdate < '1995-03-07'::date)
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..65864.37 rows=7151458 width=0)
                                             Index Cond: (o_orderdate < '1995-03-07'::date)
                                 ->  Hash  (cost=54697.39..54697.39 rows=301006 width=4)
                                       ->  Seq Scan on customer  (cost=0.00..54697.39 rows=301006 width=4)
                                             Filter: (c_mktsegment = 'BUILDING'::bpchar)
 JIT:
   Functions: 27
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(23 rows)

query 3 run 3
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3204158.18..3204158.21 rows=10 width=44)
   ->  Sort  (cost=3204158.18..3212000.96 rows=3137113 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  HashAggregate  (cost=3060389.34..3136366.30 rows=3137113 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               Planned Partitions: 16
               ->  Hash Join  (cost=520492.28..2877064.30 rows=3137113 width=24)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     ->  Seq Scan on lineitem  (cost=0.00..1874983.80 rows=32792291 width=16)
                           Filter: (l_shipdate > '1995-03-07'::date)
                     ->  Hash  (cost=495546.05..495546.05 rows=1435058 width=12)
                           ->  Hash Join  (cost=126112.20..495546.05 rows=1435058 width=12)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Bitmap Heap Scan on orders  (cost=67652.23..418313.46 rows=7151458 width=16)
                                       Recheck Cond: (o_orderdate < '1995-03-07'::date)
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..65864.37 rows=7151458 width=0)
                                             Index Cond: (o_orderdate < '1995-03-07'::date)
                                 ->  Hash  (cost=54697.39..54697.39 rows=301006 width=4)
                                       ->  Seq Scan on customer  (cost=0.00..54697.39 rows=301006 width=4)
                                             Filter: (c_mktsegment = 'BUILDING'::bpchar)
 JIT:
   Functions: 27
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(23 rows)

query 3 run 4
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3204158.18..3204158.21 rows=10 width=44)
   ->  Sort  (cost=3204158.18..3212000.96 rows=3137113 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  HashAggregate  (cost=3060389.34..3136366.30 rows=3137113 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               Planned Partitions: 16
               ->  Hash Join  (cost=520492.28..2877064.30 rows=3137113 width=24)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     ->  Seq Scan on lineitem  (cost=0.00..1874983.80 rows=32792291 width=16)
                           Filter: (l_shipdate > '1995-03-07'::date)
                     ->  Hash  (cost=495546.05..495546.05 rows=1435058 width=12)
                           ->  Hash Join  (cost=126112.20..495546.05 rows=1435058 width=12)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Bitmap Heap Scan on orders  (cost=67652.23..418313.46 rows=7151458 width=16)
                                       Recheck Cond: (o_orderdate < '1995-03-07'::date)
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..65864.37 rows=7151458 width=0)
                                             Index Cond: (o_orderdate < '1995-03-07'::date)
                                 ->  Hash  (cost=54697.39..54697.39 rows=301006 width=4)
                                       ->  Seq Scan on customer  (cost=0.00..54697.39 rows=301006 width=4)
                                             Filter: (c_mktsegment = 'BUILDING'::bpchar)
 JIT:
   Functions: 27
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(23 rows)

query 3 run 5
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3204158.18..3204158.21 rows=10 width=44)
   ->  Sort  (cost=3204158.18..3212000.96 rows=3137113 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  HashAggregate  (cost=3060389.34..3136366.30 rows=3137113 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               Planned Partitions: 16
               ->  Hash Join  (cost=520492.28..2877064.30 rows=3137113 width=24)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     ->  Seq Scan on lineitem  (cost=0.00..1874983.80 rows=32792291 width=16)
                           Filter: (l_shipdate > '1995-03-07'::date)
                     ->  Hash  (cost=495546.05..495546.05 rows=1435058 width=12)
                           ->  Hash Join  (cost=126112.20..495546.05 rows=1435058 width=12)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Bitmap Heap Scan on orders  (cost=67652.23..418313.46 rows=7151458 width=16)
                                       Recheck Cond: (o_orderdate < '1995-03-07'::date)
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..65864.37 rows=7151458 width=0)
                                             Index Cond: (o_orderdate < '1995-03-07'::date)
                                 ->  Hash  (cost=54697.39..54697.39 rows=301006 width=4)
                                       ->  Seq Scan on customer  (cost=0.00..54697.39 rows=301006 width=4)
                                             Filter: (c_mktsegment = 'BUILDING'::bpchar)
 JIT:
   Functions: 27
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(23 rows)

query 4 run 1
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=770575.00..770575.00 rows=1 width=24)
   ->  Sort  (cost=770575.00..770575.01 rows=5 width=24)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=770574.92..770574.97 rows=5 width=24)
               Group Key: orders.o_orderpriority
               ->  Merge Semi Join  (cost=332615.13..767671.50 rows=580685 width=16)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Sort  (cost=332536.99..333989.08 rows=580835 width=20)
                           Sort Key: orders.o_orderkey
                           ->  Bitmap Heap Scan on orders  (cost=6947.99..276928.52 rows=580835 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6802.79 rows=580835 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Only Scan using q4_idx_1 on lineitem  (cost=0.44..374498.77 rows=19995755 width=4)
 JIT:
   Functions: 12
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(17 rows)

query 4 run 2
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=770575.00..770575.00 rows=1 width=24)
   ->  Sort  (cost=770575.00..770575.01 rows=5 width=24)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=770574.92..770574.97 rows=5 width=24)
               Group Key: orders.o_orderpriority
               ->  Merge Semi Join  (cost=332615.13..767671.50 rows=580685 width=16)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Sort  (cost=332536.99..333989.08 rows=580835 width=20)
                           Sort Key: orders.o_orderkey
                           ->  Bitmap Heap Scan on orders  (cost=6947.99..276928.52 rows=580835 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6802.79 rows=580835 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Only Scan using q4_idx_1 on lineitem  (cost=0.44..374498.77 rows=19995755 width=4)
 JIT:
   Functions: 12
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(17 rows)

query 4 run 3
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=770575.00..770575.00 rows=1 width=24)
   ->  Sort  (cost=770575.00..770575.01 rows=5 width=24)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=770574.92..770574.97 rows=5 width=24)
               Group Key: orders.o_orderpriority
               ->  Merge Semi Join  (cost=332615.13..767671.50 rows=580685 width=16)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Sort  (cost=332536.99..333989.08 rows=580835 width=20)
                           Sort Key: orders.o_orderkey
                           ->  Bitmap Heap Scan on orders  (cost=6947.99..276928.52 rows=580835 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6802.79 rows=580835 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Only Scan using q4_idx_1 on lineitem  (cost=0.44..374498.77 rows=19995755 width=4)
 JIT:
   Functions: 12
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(17 rows)

query 4 run 4
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=770575.00..770575.00 rows=1 width=24)
   ->  Sort  (cost=770575.00..770575.01 rows=5 width=24)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=770574.92..770574.97 rows=5 width=24)
               Group Key: orders.o_orderpriority
               ->  Merge Semi Join  (cost=332615.13..767671.50 rows=580685 width=16)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Sort  (cost=332536.99..333989.08 rows=580835 width=20)
                           Sort Key: orders.o_orderkey
                           ->  Bitmap Heap Scan on orders  (cost=6947.99..276928.52 rows=580835 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6802.79 rows=580835 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Only Scan using q4_idx_1 on lineitem  (cost=0.44..374498.77 rows=19995755 width=4)
 JIT:
   Functions: 12
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(17 rows)

query 4 run 5
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=770575.00..770575.00 rows=1 width=24)
   ->  Sort  (cost=770575.00..770575.01 rows=5 width=24)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=770574.92..770574.97 rows=5 width=24)
               Group Key: orders.o_orderpriority
               ->  Merge Semi Join  (cost=332615.13..767671.50 rows=580685 width=16)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Sort  (cost=332536.99..333989.08 rows=580835 width=20)
                           Sort Key: orders.o_orderkey
                           ->  Bitmap Heap Scan on orders  (cost=6947.99..276928.52 rows=580835 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6802.79 rows=580835 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Only Scan using q4_idx_1 on lineitem  (cost=0.44..374498.77 rows=19995755 width=4)
 JIT:
   Functions: 12
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(17 rows)

query 5 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1638211.87..1638211.88 rows=1 width=58)
   ->  Sort  (cost=1638211.87..1638211.94 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=1637294.80..1638211.75 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=1637294.80..1637478.13 rows=73331 width=38)
                     Sort Key: nation.n_name
                     ->  Hash Join  (cost=95459.34..1631368.87 rows=73331 width=38)
                           Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                           ->  Nested Loop  (cost=90738.34..1617024.24 rows=1833070 width=50)
                                 ->  Hash Join  (cost=90737.78..399563.30 rows=458386 width=38)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=27412.71..323059.64 rows=2291929 width=8)
                                             Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..26839.73 rows=2291929 width=0)
                                                   Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Hash  (cost=59574.99..59574.99 rows=300006 width=38)
                                             ->  Hash Join  (cost=2.51..59574.99 rows=300006 width=38)
                                                   Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..50947.31 rows=1500031 width=8)
                                                   ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                         ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                               Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.56..2.62 rows=4 width=20)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
 JIT:
   Functions: 47
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(34 rows)

query 5 run 2
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1638211.87..1638211.88 rows=1 width=58)
   ->  Sort  (cost=1638211.87..1638211.94 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=1637294.80..1638211.75 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=1637294.80..1637478.13 rows=73331 width=38)
                     Sort Key: nation.n_name
                     ->  Hash Join  (cost=95459.34..1631368.87 rows=73331 width=38)
                           Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                           ->  Nested Loop  (cost=90738.34..1617024.24 rows=1833070 width=50)
                                 ->  Hash Join  (cost=90737.78..399563.30 rows=458386 width=38)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=27412.71..323059.64 rows=2291929 width=8)
                                             Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..26839.73 rows=2291929 width=0)
                                                   Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Hash  (cost=59574.99..59574.99 rows=300006 width=38)
                                             ->  Hash Join  (cost=2.51..59574.99 rows=300006 width=38)
                                                   Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..50947.31 rows=1500031 width=8)
                                                   ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                         ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                               Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.56..2.62 rows=4 width=20)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
 JIT:
   Functions: 47
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(34 rows)

query 5 run 3
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1638211.87..1638211.88 rows=1 width=58)
   ->  Sort  (cost=1638211.87..1638211.94 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=1637294.80..1638211.75 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=1637294.80..1637478.13 rows=73331 width=38)
                     Sort Key: nation.n_name
                     ->  Hash Join  (cost=95459.34..1631368.87 rows=73331 width=38)
                           Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                           ->  Nested Loop  (cost=90738.34..1617024.24 rows=1833070 width=50)
                                 ->  Hash Join  (cost=90737.78..399563.30 rows=458386 width=38)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=27412.71..323059.64 rows=2291929 width=8)
                                             Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..26839.73 rows=2291929 width=0)
                                                   Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Hash  (cost=59574.99..59574.99 rows=300006 width=38)
                                             ->  Hash Join  (cost=2.51..59574.99 rows=300006 width=38)
                                                   Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..50947.31 rows=1500031 width=8)
                                                   ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                         ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                               Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.56..2.62 rows=4 width=20)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
 JIT:
   Functions: 47
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(34 rows)

query 5 run 4
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1638211.87..1638211.88 rows=1 width=58)
   ->  Sort  (cost=1638211.87..1638211.94 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=1637294.80..1638211.75 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=1637294.80..1637478.13 rows=73331 width=38)
                     Sort Key: nation.n_name
                     ->  Hash Join  (cost=95459.34..1631368.87 rows=73331 width=38)
                           Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                           ->  Nested Loop  (cost=90738.34..1617024.24 rows=1833070 width=50)
                                 ->  Hash Join  (cost=90737.78..399563.30 rows=458386 width=38)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=27412.71..323059.64 rows=2291929 width=8)
                                             Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..26839.73 rows=2291929 width=0)
                                                   Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Hash  (cost=59574.99..59574.99 rows=300006 width=38)
                                             ->  Hash Join  (cost=2.51..59574.99 rows=300006 width=38)
                                                   Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..50947.31 rows=1500031 width=8)
                                                   ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                         ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                               Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.56..2.62 rows=4 width=20)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
 JIT:
   Functions: 47
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(34 rows)

query 5 run 5
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1638211.87..1638211.88 rows=1 width=58)
   ->  Sort  (cost=1638211.87..1638211.94 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=1637294.80..1638211.75 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=1637294.80..1637478.13 rows=73331 width=38)
                     Sort Key: nation.n_name
                     ->  Hash Join  (cost=95459.34..1631368.87 rows=73331 width=38)
                           Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                           ->  Nested Loop  (cost=90738.34..1617024.24 rows=1833070 width=50)
                                 ->  Hash Join  (cost=90737.78..399563.30 rows=458386 width=38)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=27412.71..323059.64 rows=2291929 width=8)
                                             Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..26839.73 rows=2291929 width=0)
                                                   Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Hash  (cost=59574.99..59574.99 rows=300006 width=38)
                                             ->  Hash Join  (cost=2.51..59574.99 rows=300006 width=38)
                                                   Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..50947.31 rows=1500031 width=8)
                                                   ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                         ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                               Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.56..2.62 rows=4 width=20)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
 JIT:
   Functions: 47
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(34 rows)

query 6 run 1
SET
SET
SET
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2045697.85..2045697.86 rows=1 width=32)
   ->  Aggregate  (cost=2045697.85..2045697.86 rows=1 width=32)
         ->  Bitmap Heap Scan on lineitem  (cost=228408.55..2039766.56 rows=1186258 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..228111.99 rows=1186258 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
 JIT:
   Functions: 6
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(9 rows)

query 6 run 2
SET
SET
SET
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2045697.85..2045697.86 rows=1 width=32)
   ->  Aggregate  (cost=2045697.85..2045697.86 rows=1 width=32)
         ->  Bitmap Heap Scan on lineitem  (cost=228408.55..2039766.56 rows=1186258 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..228111.99 rows=1186258 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
 JIT:
   Functions: 6
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(9 rows)

query 6 run 3
SET
SET
SET
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2045697.85..2045697.86 rows=1 width=32)
   ->  Aggregate  (cost=2045697.85..2045697.86 rows=1 width=32)
         ->  Bitmap Heap Scan on lineitem  (cost=228408.55..2039766.56 rows=1186258 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..228111.99 rows=1186258 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
 JIT:
   Functions: 6
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(9 rows)

query 6 run 4
SET
SET
SET
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2045697.85..2045697.86 rows=1 width=32)
   ->  Aggregate  (cost=2045697.85..2045697.86 rows=1 width=32)
         ->  Bitmap Heap Scan on lineitem  (cost=228408.55..2039766.56 rows=1186258 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..228111.99 rows=1186258 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
 JIT:
   Functions: 6
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(9 rows)

query 6 run 5
SET
SET
SET
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2045697.85..2045697.86 rows=1 width=32)
   ->  Aggregate  (cost=2045697.85..2045697.86 rows=1 width=32)
         ->  Bitmap Heap Scan on lineitem  (cost=228408.55..2039766.56 rows=1186258 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..228111.99 rows=1186258 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
 JIT:
   Functions: 6
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(9 rows)

query 7 run 1
SET
SET
SET
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2718108.73..2718108.85 rows=1 width=116)
   ->  GroupAggregate  (cost=2718108.73..2719322.94 rows=10036 width=116)
         Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
         ->  Sort  (cost=2718108.73..2718260.68 rows=60781 width=96)
               Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
               ->  Hash Join  (cost=563415.83..2713279.28 rows=60781 width=96)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     ->  Hash Join  (cost=3629.40..2111649.06 rows=1460531 width=46)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Seq Scan on lineitem  (cost=0.00..2024951.96 rows=18256637 width=24)
                                 Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=3529.40..3529.40 rows=8000 width=30)
                                 ->  Hash Join  (cost=1.40..3529.40 rows=8000 width=30)
                                       Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                                       ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                             ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                   Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                     ->  Hash  (cost=536581.75..536581.75 rows=1200055 width=30)
                           ->  Hash Join  (cost=57053.83..536581.75 rows=1200055 width=30)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Seq Scan on orders  (cost=0.00..411274.85 rows=15000685 width=8)
                                 ->  Hash  (cost=55553.80..55553.80 rows=120002 width=30)
                                       ->  Hash Join  (cost=1.40..55553.80 rows=120002 width=30)
                                             Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50947.31 rows=1500031 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
 JIT:
   Functions: 60
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(33 rows)

query 7 run 2
SET
SET
SET
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2718108.73..2718108.85 rows=1 width=116)
   ->  GroupAggregate  (cost=2718108.73..2719322.94 rows=10036 width=116)
         Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
         ->  Sort  (cost=2718108.73..2718260.68 rows=60781 width=96)
               Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
               ->  Hash Join  (cost=563415.83..2713279.28 rows=60781 width=96)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     ->  Hash Join  (cost=3629.40..2111649.06 rows=1460531 width=46)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Seq Scan on lineitem  (cost=0.00..2024951.96 rows=18256637 width=24)
                                 Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=3529.40..3529.40 rows=8000 width=30)
                                 ->  Hash Join  (cost=1.40..3529.40 rows=8000 width=30)
                                       Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                                       ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                             ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                   Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                     ->  Hash  (cost=536581.75..536581.75 rows=1200055 width=30)
                           ->  Hash Join  (cost=57053.83..536581.75 rows=1200055 width=30)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Seq Scan on orders  (cost=0.00..411274.85 rows=15000685 width=8)
                                 ->  Hash  (cost=55553.80..55553.80 rows=120002 width=30)
                                       ->  Hash Join  (cost=1.40..55553.80 rows=120002 width=30)
                                             Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50947.31 rows=1500031 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
 JIT:
   Functions: 60
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(33 rows)

query 7 run 3
SET
SET
SET
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2718108.73..2718108.85 rows=1 width=116)
   ->  GroupAggregate  (cost=2718108.73..2719322.94 rows=10036 width=116)
         Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
         ->  Sort  (cost=2718108.73..2718260.68 rows=60781 width=96)
               Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
               ->  Hash Join  (cost=563415.83..2713279.28 rows=60781 width=96)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     ->  Hash Join  (cost=3629.40..2111649.06 rows=1460531 width=46)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Seq Scan on lineitem  (cost=0.00..2024951.96 rows=18256637 width=24)
                                 Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=3529.40..3529.40 rows=8000 width=30)
                                 ->  Hash Join  (cost=1.40..3529.40 rows=8000 width=30)
                                       Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                                       ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                             ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                   Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                     ->  Hash  (cost=536581.75..536581.75 rows=1200055 width=30)
                           ->  Hash Join  (cost=57053.83..536581.75 rows=1200055 width=30)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Seq Scan on orders  (cost=0.00..411274.85 rows=15000685 width=8)
                                 ->  Hash  (cost=55553.80..55553.80 rows=120002 width=30)
                                       ->  Hash Join  (cost=1.40..55553.80 rows=120002 width=30)
                                             Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50947.31 rows=1500031 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
 JIT:
   Functions: 60
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(33 rows)

query 7 run 4
SET
SET
SET
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2718108.73..2718108.85 rows=1 width=116)
   ->  GroupAggregate  (cost=2718108.73..2719322.94 rows=10036 width=116)
         Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
         ->  Sort  (cost=2718108.73..2718260.68 rows=60781 width=96)
               Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
               ->  Hash Join  (cost=563415.83..2713279.28 rows=60781 width=96)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     ->  Hash Join  (cost=3629.40..2111649.06 rows=1460531 width=46)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Seq Scan on lineitem  (cost=0.00..2024951.96 rows=18256637 width=24)
                                 Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=3529.40..3529.40 rows=8000 width=30)
                                 ->  Hash Join  (cost=1.40..3529.40 rows=8000 width=30)
                                       Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                                       ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                             ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                   Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                     ->  Hash  (cost=536581.75..536581.75 rows=1200055 width=30)
                           ->  Hash Join  (cost=57053.83..536581.75 rows=1200055 width=30)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Seq Scan on orders  (cost=0.00..411274.85 rows=15000685 width=8)
                                 ->  Hash  (cost=55553.80..55553.80 rows=120002 width=30)
                                       ->  Hash Join  (cost=1.40..55553.80 rows=120002 width=30)
                                             Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50947.31 rows=1500031 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
 JIT:
   Functions: 60
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(33 rows)

query 7 run 5
SET
SET
SET
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2718108.73..2718108.85 rows=1 width=116)
   ->  GroupAggregate  (cost=2718108.73..2719322.94 rows=10036 width=116)
         Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
         ->  Sort  (cost=2718108.73..2718260.68 rows=60781 width=96)
               Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
               ->  Hash Join  (cost=563415.83..2713279.28 rows=60781 width=96)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     ->  Hash Join  (cost=3629.40..2111649.06 rows=1460531 width=46)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Seq Scan on lineitem  (cost=0.00..2024951.96 rows=18256637 width=24)
                                 Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=3529.40..3529.40 rows=8000 width=30)
                                 ->  Hash Join  (cost=1.40..3529.40 rows=8000 width=30)
                                       Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                                       ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                             ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                   Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                     ->  Hash  (cost=536581.75..536581.75 rows=1200055 width=30)
                           ->  Hash Join  (cost=57053.83..536581.75 rows=1200055 width=30)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Seq Scan on orders  (cost=0.00..411274.85 rows=15000685 width=8)
                                 ->  Hash  (cost=55553.80..55553.80 rows=120002 width=30)
                                       ->  Hash Join  (cost=1.40..55553.80 rows=120002 width=30)
                                             Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50947.31 rows=1500031 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
 JIT:
   Functions: 60
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(33 rows)

query 8 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=575119.21..575119.44 rows=1 width=64)
   ->  GroupAggregate  (cost=575119.21..575678.10 rows=2406 width=64)
         Group Key: (EXTRACT(year FROM orders.o_orderdate))
         ->  Sort  (cost=575119.21..575175.96 rows=22701 width=70)
               Sort Key: (EXTRACT(year FROM orders.o_orderdate))
               ->  Nested Loop  (cost=224716.57..573476.74 rows=22701 width=70)
                     ->  Hash Join  (cost=224716.43..572835.95 rows=22701 width=20)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=220245.43..568305.36 rows=22701 width=20)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=156920.36..504327.63 rows=113506 width=24)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Bitmap Heap Scan on orders  (cost=54221.40..383492.77 rows=4533558 width=12)
                                             Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..53088.01 rows=4533558 width=0)
                                                   Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=98004.31..98004.31 rows=375571 width=20)
                                             ->  Nested Loop  (cost=0.99..98004.31 rows=375571 width=20)
                                                   ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..53965.53 rows=13268 width=4)
                                                         Index Cond: (p_type = 'LARGE POLISHED BRASS'::text)
                                                   ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.56..3.04 rows=28 width=24)
                                                         Index Cond: (l_partkey = part.p_partkey)
                                 ->  Hash  (cost=59574.99..59574.99 rows=300006 width=4)
                                       ->  Hash Join  (cost=2.51..59574.99 rows=300006 width=4)
                                             Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50947.31 rows=1500031 width=8)
                                             ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                   ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                         Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                     ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                           Cache Key: supplier.s_nationkey
                           Cache Mode: logical
                           ->  Index Scan using nation_pkey on nation n2  (cost=0.14..1.16 rows=1 width=30)
                                 Index Cond: (n_nationkey = supplier.s_nationkey)
 JIT:
   Functions: 62
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(43 rows)

query 8 run 2
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=575119.21..575119.44 rows=1 width=64)
   ->  GroupAggregate  (cost=575119.21..575678.10 rows=2406 width=64)
         Group Key: (EXTRACT(year FROM orders.o_orderdate))
         ->  Sort  (cost=575119.21..575175.96 rows=22701 width=70)
               Sort Key: (EXTRACT(year FROM orders.o_orderdate))
               ->  Nested Loop  (cost=224716.57..573476.74 rows=22701 width=70)
                     ->  Hash Join  (cost=224716.43..572835.95 rows=22701 width=20)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=220245.43..568305.36 rows=22701 width=20)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=156920.36..504327.63 rows=113506 width=24)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Bitmap Heap Scan on orders  (cost=54221.40..383492.77 rows=4533558 width=12)
                                             Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..53088.01 rows=4533558 width=0)
                                                   Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=98004.31..98004.31 rows=375571 width=20)
                                             ->  Nested Loop  (cost=0.99..98004.31 rows=375571 width=20)
                                                   ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..53965.53 rows=13268 width=4)
                                                         Index Cond: (p_type = 'LARGE POLISHED BRASS'::text)
                                                   ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.56..3.04 rows=28 width=24)
                                                         Index Cond: (l_partkey = part.p_partkey)
                                 ->  Hash  (cost=59574.99..59574.99 rows=300006 width=4)
                                       ->  Hash Join  (cost=2.51..59574.99 rows=300006 width=4)
                                             Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50947.31 rows=1500031 width=8)
                                             ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                   ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                         Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                     ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                           Cache Key: supplier.s_nationkey
                           Cache Mode: logical
                           ->  Index Scan using nation_pkey on nation n2  (cost=0.14..1.16 rows=1 width=30)
                                 Index Cond: (n_nationkey = supplier.s_nationkey)
 JIT:
   Functions: 62
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(43 rows)

query 8 run 3
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=575119.21..575119.44 rows=1 width=64)
   ->  GroupAggregate  (cost=575119.21..575678.10 rows=2406 width=64)
         Group Key: (EXTRACT(year FROM orders.o_orderdate))
         ->  Sort  (cost=575119.21..575175.96 rows=22701 width=70)
               Sort Key: (EXTRACT(year FROM orders.o_orderdate))
               ->  Nested Loop  (cost=224716.57..573476.74 rows=22701 width=70)
                     ->  Hash Join  (cost=224716.43..572835.95 rows=22701 width=20)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=220245.43..568305.36 rows=22701 width=20)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=156920.36..504327.63 rows=113506 width=24)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Bitmap Heap Scan on orders  (cost=54221.40..383492.77 rows=4533558 width=12)
                                             Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..53088.01 rows=4533558 width=0)
                                                   Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=98004.31..98004.31 rows=375571 width=20)
                                             ->  Nested Loop  (cost=0.99..98004.31 rows=375571 width=20)
                                                   ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..53965.53 rows=13268 width=4)
                                                         Index Cond: (p_type = 'LARGE POLISHED BRASS'::text)
                                                   ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.56..3.04 rows=28 width=24)
                                                         Index Cond: (l_partkey = part.p_partkey)
                                 ->  Hash  (cost=59574.99..59574.99 rows=300006 width=4)
                                       ->  Hash Join  (cost=2.51..59574.99 rows=300006 width=4)
                                             Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50947.31 rows=1500031 width=8)
                                             ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                   ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                         Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                     ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                           Cache Key: supplier.s_nationkey
                           Cache Mode: logical
                           ->  Index Scan using nation_pkey on nation n2  (cost=0.14..1.16 rows=1 width=30)
                                 Index Cond: (n_nationkey = supplier.s_nationkey)
 JIT:
   Functions: 62
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(43 rows)

query 8 run 4
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=575119.21..575119.44 rows=1 width=64)
   ->  GroupAggregate  (cost=575119.21..575678.10 rows=2406 width=64)
         Group Key: (EXTRACT(year FROM orders.o_orderdate))
         ->  Sort  (cost=575119.21..575175.96 rows=22701 width=70)
               Sort Key: (EXTRACT(year FROM orders.o_orderdate))
               ->  Nested Loop  (cost=224716.57..573476.74 rows=22701 width=70)
                     ->  Hash Join  (cost=224716.43..572835.95 rows=22701 width=20)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=220245.43..568305.36 rows=22701 width=20)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=156920.36..504327.63 rows=113506 width=24)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Bitmap Heap Scan on orders  (cost=54221.40..383492.77 rows=4533558 width=12)
                                             Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..53088.01 rows=4533558 width=0)
                                                   Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=98004.31..98004.31 rows=375571 width=20)
                                             ->  Nested Loop  (cost=0.99..98004.31 rows=375571 width=20)
                                                   ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..53965.53 rows=13268 width=4)
                                                         Index Cond: (p_type = 'LARGE POLISHED BRASS'::text)
                                                   ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.56..3.04 rows=28 width=24)
                                                         Index Cond: (l_partkey = part.p_partkey)
                                 ->  Hash  (cost=59574.99..59574.99 rows=300006 width=4)
                                       ->  Hash Join  (cost=2.51..59574.99 rows=300006 width=4)
                                             Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50947.31 rows=1500031 width=8)
                                             ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                   ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                         Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                     ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                           Cache Key: supplier.s_nationkey
                           Cache Mode: logical
                           ->  Index Scan using nation_pkey on nation n2  (cost=0.14..1.16 rows=1 width=30)
                                 Index Cond: (n_nationkey = supplier.s_nationkey)
 JIT:
   Functions: 62
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(43 rows)

query 8 run 5
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=575119.21..575119.44 rows=1 width=64)
   ->  GroupAggregate  (cost=575119.21..575678.10 rows=2406 width=64)
         Group Key: (EXTRACT(year FROM orders.o_orderdate))
         ->  Sort  (cost=575119.21..575175.96 rows=22701 width=70)
               Sort Key: (EXTRACT(year FROM orders.o_orderdate))
               ->  Nested Loop  (cost=224716.57..573476.74 rows=22701 width=70)
                     ->  Hash Join  (cost=224716.43..572835.95 rows=22701 width=20)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=220245.43..568305.36 rows=22701 width=20)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=156920.36..504327.63 rows=113506 width=24)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Bitmap Heap Scan on orders  (cost=54221.40..383492.77 rows=4533558 width=12)
                                             Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..53088.01 rows=4533558 width=0)
                                                   Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=98004.31..98004.31 rows=375571 width=20)
                                             ->  Nested Loop  (cost=0.99..98004.31 rows=375571 width=20)
                                                   ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..53965.53 rows=13268 width=4)
                                                         Index Cond: (p_type = 'LARGE POLISHED BRASS'::text)
                                                   ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.56..3.04 rows=28 width=24)
                                                         Index Cond: (l_partkey = part.p_partkey)
                                 ->  Hash  (cost=59574.99..59574.99 rows=300006 width=4)
                                       ->  Hash Join  (cost=2.51..59574.99 rows=300006 width=4)
                                             Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50947.31 rows=1500031 width=8)
                                             ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                   ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                         Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                     ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                           Cache Key: supplier.s_nationkey
                           Cache Mode: logical
                           ->  Index Scan using nation_pkey on nation n2  (cost=0.14..1.16 rows=1 width=30)
                                 Index Cond: (n_nationkey = supplier.s_nationkey)
 JIT:
   Functions: 62
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(43 rows)

query 9 run 1
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1879229.98..1879229.98 rows=1 width=90)
   ->  Sort  (cost=1879229.98..1879380.36 rows=60150 width=90)
         Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
         ->  HashAggregate  (cost=1878026.98..1878929.23 rows=60150 width=90)
               Group Key: nation.n_name, EXTRACT(year FROM orders.o_orderdate)
               ->  Hash Join  (cost=661867.81..1807973.64 rows=4003048 width=81)
                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Hash Join  (cost=661866.24..1785675.10 rows=4003048 width=31)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Hash Join  (cost=4485.83..1004459.69 rows=4003048 width=31)
                                 Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                 ->  Merge Join  (cost=14.83..989480.24 rows=4003048 width=35)
                                       Merge Cond: (lineitem.l_partkey = partsupp.ps_partkey)
                                       Join Filter: (lineitem.l_suppkey = partsupp.ps_suppkey)
                                       ->  Nested Loop  (cost=0.99..533608.46 rows=4003048 width=33)
                                             ->  Index Only Scan using q20_idx_2 on part  (cost=0.43..64307.43 rows=141418 width=4)
                                                   Filter: ((p_name)::text ~~ '%navy%'::text)
                                             ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..3.04 rows=28 width=29)
                                                   Index Cond: (l_partkey = part.p_partkey)
                                       ->  Materialize  (cost=0.43..201484.16 rows=7997699 width=14)
                                             ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.43..181489.92 rows=7997699 width=14)
                                 ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                       ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                           ->  Hash  (cost=411274.85..411274.85 rows=15000685 width=8)
                                 ->  Seq Scan on orders  (cost=0.00..411274.85 rows=15000685 width=8)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
 JIT:
   Functions: 37
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(30 rows)

query 9 run 2
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1879229.98..1879229.98 rows=1 width=90)
   ->  Sort  (cost=1879229.98..1879380.36 rows=60150 width=90)
         Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
         ->  HashAggregate  (cost=1878026.98..1878929.23 rows=60150 width=90)
               Group Key: nation.n_name, EXTRACT(year FROM orders.o_orderdate)
               ->  Hash Join  (cost=661867.81..1807973.64 rows=4003048 width=81)
                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Hash Join  (cost=661866.24..1785675.10 rows=4003048 width=31)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Hash Join  (cost=4485.83..1004459.69 rows=4003048 width=31)
                                 Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                 ->  Merge Join  (cost=14.83..989480.24 rows=4003048 width=35)
                                       Merge Cond: (lineitem.l_partkey = partsupp.ps_partkey)
                                       Join Filter: (lineitem.l_suppkey = partsupp.ps_suppkey)
                                       ->  Nested Loop  (cost=0.99..533608.46 rows=4003048 width=33)
                                             ->  Index Only Scan using q20_idx_2 on part  (cost=0.43..64307.43 rows=141418 width=4)
                                                   Filter: ((p_name)::text ~~ '%navy%'::text)
                                             ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..3.04 rows=28 width=29)
                                                   Index Cond: (l_partkey = part.p_partkey)
                                       ->  Materialize  (cost=0.43..201484.16 rows=7997699 width=14)
                                             ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.43..181489.92 rows=7997699 width=14)
                                 ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                       ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                           ->  Hash  (cost=411274.85..411274.85 rows=15000685 width=8)
                                 ->  Seq Scan on orders  (cost=0.00..411274.85 rows=15000685 width=8)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
 JIT:
   Functions: 37
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(30 rows)

query 9 run 3
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1879229.98..1879229.98 rows=1 width=90)
   ->  Sort  (cost=1879229.98..1879380.36 rows=60150 width=90)
         Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
         ->  HashAggregate  (cost=1878026.98..1878929.23 rows=60150 width=90)
               Group Key: nation.n_name, EXTRACT(year FROM orders.o_orderdate)
               ->  Hash Join  (cost=661867.81..1807973.64 rows=4003048 width=81)
                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Hash Join  (cost=661866.24..1785675.10 rows=4003048 width=31)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Hash Join  (cost=4485.83..1004459.69 rows=4003048 width=31)
                                 Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                 ->  Merge Join  (cost=14.83..989480.24 rows=4003048 width=35)
                                       Merge Cond: (lineitem.l_partkey = partsupp.ps_partkey)
                                       Join Filter: (lineitem.l_suppkey = partsupp.ps_suppkey)
                                       ->  Nested Loop  (cost=0.99..533608.46 rows=4003048 width=33)
                                             ->  Index Only Scan using q20_idx_2 on part  (cost=0.43..64307.43 rows=141418 width=4)
                                                   Filter: ((p_name)::text ~~ '%navy%'::text)
                                             ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..3.04 rows=28 width=29)
                                                   Index Cond: (l_partkey = part.p_partkey)
                                       ->  Materialize  (cost=0.43..201484.16 rows=7997699 width=14)
                                             ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.43..181489.92 rows=7997699 width=14)
                                 ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                       ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                           ->  Hash  (cost=411274.85..411274.85 rows=15000685 width=8)
                                 ->  Seq Scan on orders  (cost=0.00..411274.85 rows=15000685 width=8)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
 JIT:
   Functions: 37
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(30 rows)

query 9 run 4
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1879229.98..1879229.98 rows=1 width=90)
   ->  Sort  (cost=1879229.98..1879380.36 rows=60150 width=90)
         Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
         ->  HashAggregate  (cost=1878026.98..1878929.23 rows=60150 width=90)
               Group Key: nation.n_name, EXTRACT(year FROM orders.o_orderdate)
               ->  Hash Join  (cost=661867.81..1807973.64 rows=4003048 width=81)
                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Hash Join  (cost=661866.24..1785675.10 rows=4003048 width=31)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Hash Join  (cost=4485.83..1004459.69 rows=4003048 width=31)
                                 Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                 ->  Merge Join  (cost=14.83..989480.24 rows=4003048 width=35)
                                       Merge Cond: (lineitem.l_partkey = partsupp.ps_partkey)
                                       Join Filter: (lineitem.l_suppkey = partsupp.ps_suppkey)
                                       ->  Nested Loop  (cost=0.99..533608.46 rows=4003048 width=33)
                                             ->  Index Only Scan using q20_idx_2 on part  (cost=0.43..64307.43 rows=141418 width=4)
                                                   Filter: ((p_name)::text ~~ '%navy%'::text)
                                             ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..3.04 rows=28 width=29)
                                                   Index Cond: (l_partkey = part.p_partkey)
                                       ->  Materialize  (cost=0.43..201484.16 rows=7997699 width=14)
                                             ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.43..181489.92 rows=7997699 width=14)
                                 ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                       ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                           ->  Hash  (cost=411274.85..411274.85 rows=15000685 width=8)
                                 ->  Seq Scan on orders  (cost=0.00..411274.85 rows=15000685 width=8)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
 JIT:
   Functions: 37
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(30 rows)

query 9 run 5
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1879229.98..1879229.98 rows=1 width=90)
   ->  Sort  (cost=1879229.98..1879380.36 rows=60150 width=90)
         Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
         ->  HashAggregate  (cost=1878026.98..1878929.23 rows=60150 width=90)
               Group Key: nation.n_name, EXTRACT(year FROM orders.o_orderdate)
               ->  Hash Join  (cost=661867.81..1807973.64 rows=4003048 width=81)
                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Hash Join  (cost=661866.24..1785675.10 rows=4003048 width=31)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Hash Join  (cost=4485.83..1004459.69 rows=4003048 width=31)
                                 Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                 ->  Merge Join  (cost=14.83..989480.24 rows=4003048 width=35)
                                       Merge Cond: (lineitem.l_partkey = partsupp.ps_partkey)
                                       Join Filter: (lineitem.l_suppkey = partsupp.ps_suppkey)
                                       ->  Nested Loop  (cost=0.99..533608.46 rows=4003048 width=33)
                                             ->  Index Only Scan using q20_idx_2 on part  (cost=0.43..64307.43 rows=141418 width=4)
                                                   Filter: ((p_name)::text ~~ '%navy%'::text)
                                             ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..3.04 rows=28 width=29)
                                                   Index Cond: (l_partkey = part.p_partkey)
                                       ->  Materialize  (cost=0.43..201484.16 rows=7997699 width=14)
                                             ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.43..181489.92 rows=7997699 width=14)
                                 ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                       ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                           ->  Hash  (cost=411274.85..411274.85 rows=15000685 width=8)
                                 ->  Seq Scan on orders  (cost=0.00..411274.85 rows=15000685 width=8)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
 JIT:
   Functions: 37
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(30 rows)

query 10 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1717146.67..1717146.72 rows=20 width=201)
   ->  Sort  (cost=1717146.67..1718602.99 rows=582527 width=201)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=1567434.00..1701645.84 rows=582527 width=201)
               Group Key: customer.c_custkey, nation.n_name
               ->  Incremental Sort  (cost=1567434.00..1687082.66 rows=582527 width=181)
                     Sort Key: customer.c_custkey, nation.n_name
                     Presorted Key: customer.c_custkey
                     ->  Nested Loop  (cost=1567433.83..1660868.95 rows=582527 width=181)
                           ->  Merge Join  (cost=1567433.69..1646599.32 rows=582527 width=159)
                                 Merge Cond: (customer.c_custkey = orders.o_custkey)
                                 ->  Index Scan using customer_pkey on customer  (cost=0.43..66680.89 rows=1500031 width=147)
                                 ->  Sort  (cost=1567431.80..1568888.12 rows=582527 width=16)
                                       Sort Key: orders.o_custkey
                                       ->  Hash Join  (cost=284690.34..1511649.12 rows=582527 width=16)
                                             Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                             ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.56..1188311.78 rows=14722874 width=16)
                                                   Index Cond: (l_returnflag = 'R'::bpchar)
                                             ->  Hash  (cost=277270.79..277270.79 rows=593519 width=8)
                                                   ->  Bitmap Heap Scan on orders  (cost=7100.00..277270.79 rows=593519 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6951.63 rows=593519 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                           ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                                 Cache Key: customer.c_nationkey
                                 Cache Mode: logical
                                 ->  Index Scan using nation_pkey on nation  (cost=0.14..1.16 rows=1 width=30)
                                       Index Cond: (n_nationkey = customer.c_nationkey)
 JIT:
   Functions: 33
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(31 rows)

query 10 run 2
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1717146.67..1717146.72 rows=20 width=201)
   ->  Sort  (cost=1717146.67..1718602.99 rows=582527 width=201)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=1567434.00..1701645.84 rows=582527 width=201)
               Group Key: customer.c_custkey, nation.n_name
               ->  Incremental Sort  (cost=1567434.00..1687082.66 rows=582527 width=181)
                     Sort Key: customer.c_custkey, nation.n_name
                     Presorted Key: customer.c_custkey
                     ->  Nested Loop  (cost=1567433.83..1660868.95 rows=582527 width=181)
                           ->  Merge Join  (cost=1567433.69..1646599.32 rows=582527 width=159)
                                 Merge Cond: (customer.c_custkey = orders.o_custkey)
                                 ->  Index Scan using customer_pkey on customer  (cost=0.43..66680.89 rows=1500031 width=147)
                                 ->  Sort  (cost=1567431.80..1568888.12 rows=582527 width=16)
                                       Sort Key: orders.o_custkey
                                       ->  Hash Join  (cost=284690.34..1511649.12 rows=582527 width=16)
                                             Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                             ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.56..1188311.78 rows=14722874 width=16)
                                                   Index Cond: (l_returnflag = 'R'::bpchar)
                                             ->  Hash  (cost=277270.79..277270.79 rows=593519 width=8)
                                                   ->  Bitmap Heap Scan on orders  (cost=7100.00..277270.79 rows=593519 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6951.63 rows=593519 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                           ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                                 Cache Key: customer.c_nationkey
                                 Cache Mode: logical
                                 ->  Index Scan using nation_pkey on nation  (cost=0.14..1.16 rows=1 width=30)
                                       Index Cond: (n_nationkey = customer.c_nationkey)
 JIT:
   Functions: 33
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(31 rows)

query 10 run 3
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1717146.67..1717146.72 rows=20 width=201)
   ->  Sort  (cost=1717146.67..1718602.99 rows=582527 width=201)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=1567434.00..1701645.84 rows=582527 width=201)
               Group Key: customer.c_custkey, nation.n_name
               ->  Incremental Sort  (cost=1567434.00..1687082.66 rows=582527 width=181)
                     Sort Key: customer.c_custkey, nation.n_name
                     Presorted Key: customer.c_custkey
                     ->  Nested Loop  (cost=1567433.83..1660868.95 rows=582527 width=181)
                           ->  Merge Join  (cost=1567433.69..1646599.32 rows=582527 width=159)
                                 Merge Cond: (customer.c_custkey = orders.o_custkey)
                                 ->  Index Scan using customer_pkey on customer  (cost=0.43..66680.89 rows=1500031 width=147)
                                 ->  Sort  (cost=1567431.80..1568888.12 rows=582527 width=16)
                                       Sort Key: orders.o_custkey
                                       ->  Hash Join  (cost=284690.34..1511649.12 rows=582527 width=16)
                                             Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                             ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.56..1188311.78 rows=14722874 width=16)
                                                   Index Cond: (l_returnflag = 'R'::bpchar)
                                             ->  Hash  (cost=277270.79..277270.79 rows=593519 width=8)
                                                   ->  Bitmap Heap Scan on orders  (cost=7100.00..277270.79 rows=593519 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6951.63 rows=593519 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                           ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                                 Cache Key: customer.c_nationkey
                                 Cache Mode: logical
                                 ->  Index Scan using nation_pkey on nation  (cost=0.14..1.16 rows=1 width=30)
                                       Index Cond: (n_nationkey = customer.c_nationkey)
 JIT:
   Functions: 33
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(31 rows)

query 10 run 4
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1717146.67..1717146.72 rows=20 width=201)
   ->  Sort  (cost=1717146.67..1718602.99 rows=582527 width=201)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=1567434.00..1701645.84 rows=582527 width=201)
               Group Key: customer.c_custkey, nation.n_name
               ->  Incremental Sort  (cost=1567434.00..1687082.66 rows=582527 width=181)
                     Sort Key: customer.c_custkey, nation.n_name
                     Presorted Key: customer.c_custkey
                     ->  Nested Loop  (cost=1567433.83..1660868.95 rows=582527 width=181)
                           ->  Merge Join  (cost=1567433.69..1646599.32 rows=582527 width=159)
                                 Merge Cond: (customer.c_custkey = orders.o_custkey)
                                 ->  Index Scan using customer_pkey on customer  (cost=0.43..66680.89 rows=1500031 width=147)
                                 ->  Sort  (cost=1567431.80..1568888.12 rows=582527 width=16)
                                       Sort Key: orders.o_custkey
                                       ->  Hash Join  (cost=284690.34..1511649.12 rows=582527 width=16)
                                             Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                             ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.56..1188311.78 rows=14722874 width=16)
                                                   Index Cond: (l_returnflag = 'R'::bpchar)
                                             ->  Hash  (cost=277270.79..277270.79 rows=593519 width=8)
                                                   ->  Bitmap Heap Scan on orders  (cost=7100.00..277270.79 rows=593519 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6951.63 rows=593519 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                           ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                                 Cache Key: customer.c_nationkey
                                 Cache Mode: logical
                                 ->  Index Scan using nation_pkey on nation  (cost=0.14..1.16 rows=1 width=30)
                                       Index Cond: (n_nationkey = customer.c_nationkey)
 JIT:
   Functions: 33
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(31 rows)

query 10 run 5
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1717146.67..1717146.72 rows=20 width=201)
   ->  Sort  (cost=1717146.67..1718602.99 rows=582527 width=201)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=1567434.00..1701645.84 rows=582527 width=201)
               Group Key: customer.c_custkey, nation.n_name
               ->  Incremental Sort  (cost=1567434.00..1687082.66 rows=582527 width=181)
                     Sort Key: customer.c_custkey, nation.n_name
                     Presorted Key: customer.c_custkey
                     ->  Nested Loop  (cost=1567433.83..1660868.95 rows=582527 width=181)
                           ->  Merge Join  (cost=1567433.69..1646599.32 rows=582527 width=159)
                                 Merge Cond: (customer.c_custkey = orders.o_custkey)
                                 ->  Index Scan using customer_pkey on customer  (cost=0.43..66680.89 rows=1500031 width=147)
                                 ->  Sort  (cost=1567431.80..1568888.12 rows=582527 width=16)
                                       Sort Key: orders.o_custkey
                                       ->  Hash Join  (cost=284690.34..1511649.12 rows=582527 width=16)
                                             Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                             ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.56..1188311.78 rows=14722874 width=16)
                                                   Index Cond: (l_returnflag = 'R'::bpchar)
                                             ->  Hash  (cost=277270.79..277270.79 rows=593519 width=8)
                                                   ->  Bitmap Heap Scan on orders  (cost=7100.00..277270.79 rows=593519 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6951.63 rows=593519 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                           ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                                 Cache Key: customer.c_nationkey
                                 Cache Mode: logical
                                 ->  Index Scan using nation_pkey on nation  (cost=0.14..1.16 rows=1 width=30)
                                       Index Cond: (n_nationkey = customer.c_nationkey)
 JIT:
   Functions: 33
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(31 rows)

query 11 run 1
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=608038.14..608038.14 rows=1 width=36)
   InitPlan 1
     ->  Aggregate  (cost=293068.05..293068.06 rows=1 width=32)
           ->  Hash Join  (cost=2341.31..290668.73 rows=319908 width=10)
                 Hash Cond: (partsupp_1.ps_suppkey = supplier_1.s_suppkey)
                 ->  Seq Scan on partsupp partsupp_1  (cost=0.00..255198.99 rows=7997699 width=14)
                 ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                       ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                             ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Bitmap Heap Scan on supplier supplier_1  (cost=39.29..2250.00 rows=4000 width=8)
                                   Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                         Index Cond: (s_nationkey = nation_1.n_nationkey)
   ->  Sort  (cost=314970.08..315236.67 rows=106636 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=306514.18..314436.90 rows=106636 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               Planned Partitions: 4
               ->  Hash Join  (cost=2341.31..290668.73 rows=319908 width=14)
                     Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                     ->  Seq Scan on partsupp  (cost=0.00..255198.99 rows=7997699 width=18)
                     ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                           ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                 ->  Bitmap Heap Scan on supplier  (cost=39.29..2250.00 rows=4000 width=8)
                                       Recheck Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
 JIT:
   Functions: 34
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(34 rows)

query 11 run 2
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=608038.14..608038.14 rows=1 width=36)
   InitPlan 1
     ->  Aggregate  (cost=293068.05..293068.06 rows=1 width=32)
           ->  Hash Join  (cost=2341.31..290668.73 rows=319908 width=10)
                 Hash Cond: (partsupp_1.ps_suppkey = supplier_1.s_suppkey)
                 ->  Seq Scan on partsupp partsupp_1  (cost=0.00..255198.99 rows=7997699 width=14)
                 ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                       ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                             ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Bitmap Heap Scan on supplier supplier_1  (cost=39.29..2250.00 rows=4000 width=8)
                                   Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                         Index Cond: (s_nationkey = nation_1.n_nationkey)
   ->  Sort  (cost=314970.08..315236.67 rows=106636 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=306514.18..314436.90 rows=106636 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               Planned Partitions: 4
               ->  Hash Join  (cost=2341.31..290668.73 rows=319908 width=14)
                     Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                     ->  Seq Scan on partsupp  (cost=0.00..255198.99 rows=7997699 width=18)
                     ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                           ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                 ->  Bitmap Heap Scan on supplier  (cost=39.29..2250.00 rows=4000 width=8)
                                       Recheck Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
 JIT:
   Functions: 34
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(34 rows)

query 11 run 3
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=608038.14..608038.14 rows=1 width=36)
   InitPlan 1
     ->  Aggregate  (cost=293068.05..293068.06 rows=1 width=32)
           ->  Hash Join  (cost=2341.31..290668.73 rows=319908 width=10)
                 Hash Cond: (partsupp_1.ps_suppkey = supplier_1.s_suppkey)
                 ->  Seq Scan on partsupp partsupp_1  (cost=0.00..255198.99 rows=7997699 width=14)
                 ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                       ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                             ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Bitmap Heap Scan on supplier supplier_1  (cost=39.29..2250.00 rows=4000 width=8)
                                   Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                         Index Cond: (s_nationkey = nation_1.n_nationkey)
   ->  Sort  (cost=314970.08..315236.67 rows=106636 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=306514.18..314436.90 rows=106636 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               Planned Partitions: 4
               ->  Hash Join  (cost=2341.31..290668.73 rows=319908 width=14)
                     Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                     ->  Seq Scan on partsupp  (cost=0.00..255198.99 rows=7997699 width=18)
                     ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                           ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                 ->  Bitmap Heap Scan on supplier  (cost=39.29..2250.00 rows=4000 width=8)
                                       Recheck Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
 JIT:
   Functions: 34
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(34 rows)

query 11 run 4
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=608038.14..608038.14 rows=1 width=36)
   InitPlan 1
     ->  Aggregate  (cost=293068.05..293068.06 rows=1 width=32)
           ->  Hash Join  (cost=2341.31..290668.73 rows=319908 width=10)
                 Hash Cond: (partsupp_1.ps_suppkey = supplier_1.s_suppkey)
                 ->  Seq Scan on partsupp partsupp_1  (cost=0.00..255198.99 rows=7997699 width=14)
                 ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                       ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                             ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Bitmap Heap Scan on supplier supplier_1  (cost=39.29..2250.00 rows=4000 width=8)
                                   Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                         Index Cond: (s_nationkey = nation_1.n_nationkey)
   ->  Sort  (cost=314970.08..315236.67 rows=106636 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=306514.18..314436.90 rows=106636 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               Planned Partitions: 4
               ->  Hash Join  (cost=2341.31..290668.73 rows=319908 width=14)
                     Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                     ->  Seq Scan on partsupp  (cost=0.00..255198.99 rows=7997699 width=18)
                     ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                           ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                 ->  Bitmap Heap Scan on supplier  (cost=39.29..2250.00 rows=4000 width=8)
                                       Recheck Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
 JIT:
   Functions: 34
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(34 rows)

query 11 run 5
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=608038.14..608038.14 rows=1 width=36)
   InitPlan 1
     ->  Aggregate  (cost=293068.05..293068.06 rows=1 width=32)
           ->  Hash Join  (cost=2341.31..290668.73 rows=319908 width=10)
                 Hash Cond: (partsupp_1.ps_suppkey = supplier_1.s_suppkey)
                 ->  Seq Scan on partsupp partsupp_1  (cost=0.00..255198.99 rows=7997699 width=14)
                 ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                       ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                             ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Bitmap Heap Scan on supplier supplier_1  (cost=39.29..2250.00 rows=4000 width=8)
                                   Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                         Index Cond: (s_nationkey = nation_1.n_nationkey)
   ->  Sort  (cost=314970.08..315236.67 rows=106636 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=306514.18..314436.90 rows=106636 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               Planned Partitions: 4
               ->  Hash Join  (cost=2341.31..290668.73 rows=319908 width=14)
                     Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                     ->  Seq Scan on partsupp  (cost=0.00..255198.99 rows=7997699 width=18)
                     ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                           ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                 ->  Bitmap Heap Scan on supplier  (cost=39.29..2250.00 rows=4000 width=8)
                                       Recheck Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
 JIT:
   Functions: 34
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(34 rows)

query 12 run 1
SET
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=687199.62..687199.63 rows=1 width=27)
   ->  Sort  (cost=687199.62..687199.64 rows=7 width=27)
         Sort Key: lineitem.l_shipmode
         ->  HashAggregate  (cost=687199.52..687199.59 rows=7 width=27)
               Group Key: lineitem.l_shipmode
               ->  Hash Join  (cost=155414.04..682105.11 rows=291109 width=27)
                     Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Seq Scan on orders  (cost=0.00..411274.85 rows=15000685 width=20)
                     ->  Hash  (cost=151775.17..151775.17 rows=291109 width=15)
                           ->  Index Only Scan using q12_idx_1 on lineitem  (cost=0.43..151775.17 rows=291109 width=15)
                                 Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
 JIT:
   Functions: 14
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(14 rows)

query 12 run 2
SET
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=687199.62..687199.63 rows=1 width=27)
   ->  Sort  (cost=687199.62..687199.64 rows=7 width=27)
         Sort Key: lineitem.l_shipmode
         ->  HashAggregate  (cost=687199.52..687199.59 rows=7 width=27)
               Group Key: lineitem.l_shipmode
               ->  Hash Join  (cost=155414.04..682105.11 rows=291109 width=27)
                     Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Seq Scan on orders  (cost=0.00..411274.85 rows=15000685 width=20)
                     ->  Hash  (cost=151775.17..151775.17 rows=291109 width=15)
                           ->  Index Only Scan using q12_idx_1 on lineitem  (cost=0.43..151775.17 rows=291109 width=15)
                                 Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
 JIT:
   Functions: 14
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(14 rows)

query 12 run 3
SET
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=687199.62..687199.63 rows=1 width=27)
   ->  Sort  (cost=687199.62..687199.64 rows=7 width=27)
         Sort Key: lineitem.l_shipmode
         ->  HashAggregate  (cost=687199.52..687199.59 rows=7 width=27)
               Group Key: lineitem.l_shipmode
               ->  Hash Join  (cost=155414.04..682105.11 rows=291109 width=27)
                     Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Seq Scan on orders  (cost=0.00..411274.85 rows=15000685 width=20)
                     ->  Hash  (cost=151775.17..151775.17 rows=291109 width=15)
                           ->  Index Only Scan using q12_idx_1 on lineitem  (cost=0.43..151775.17 rows=291109 width=15)
                                 Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
 JIT:
   Functions: 14
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(14 rows)

query 12 run 4
SET
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=687199.62..687199.63 rows=1 width=27)
   ->  Sort  (cost=687199.62..687199.64 rows=7 width=27)
         Sort Key: lineitem.l_shipmode
         ->  HashAggregate  (cost=687199.52..687199.59 rows=7 width=27)
               Group Key: lineitem.l_shipmode
               ->  Hash Join  (cost=155414.04..682105.11 rows=291109 width=27)
                     Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Seq Scan on orders  (cost=0.00..411274.85 rows=15000685 width=20)
                     ->  Hash  (cost=151775.17..151775.17 rows=291109 width=15)
                           ->  Index Only Scan using q12_idx_1 on lineitem  (cost=0.43..151775.17 rows=291109 width=15)
                                 Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
 JIT:
   Functions: 14
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(14 rows)

query 12 run 5
SET
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=687199.62..687199.63 rows=1 width=27)
   ->  Sort  (cost=687199.62..687199.64 rows=7 width=27)
         Sort Key: lineitem.l_shipmode
         ->  HashAggregate  (cost=687199.52..687199.59 rows=7 width=27)
               Group Key: lineitem.l_shipmode
               ->  Hash Join  (cost=155414.04..682105.11 rows=291109 width=27)
                     Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Seq Scan on orders  (cost=0.00..411274.85 rows=15000685 width=20)
                     ->  Hash  (cost=151775.17..151775.17 rows=291109 width=15)
                           ->  Index Only Scan using q12_idx_1 on lineitem  (cost=0.43..151775.17 rows=291109 width=15)
                                 Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
 JIT:
   Functions: 14
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(14 rows)

query 13 run 1
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1430561.61..1430561.62 rows=1 width=16)
   ->  Sort  (cost=1430561.61..1430562.11 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1430558.61..1430560.61 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=1275876.71..1408058.15 rows=1500031 width=12)
                     Group Key: customer.c_custkey
                     Planned Partitions: 4
                     ->  Hash Right Join  (cost=55343.28..666534.81 rows=14999185 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..448776.56 rows=14999185 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=30732.89..30732.89 rows=1500031 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.43..30732.89 rows=1500031 width=4)
 JIT:
   Functions: 15
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(17 rows)

query 13 run 2
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1430561.61..1430561.62 rows=1 width=16)
   ->  Sort  (cost=1430561.61..1430562.11 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1430558.61..1430560.61 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=1275876.71..1408058.15 rows=1500031 width=12)
                     Group Key: customer.c_custkey
                     Planned Partitions: 4
                     ->  Hash Right Join  (cost=55343.28..666534.81 rows=14999185 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..448776.56 rows=14999185 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=30732.89..30732.89 rows=1500031 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.43..30732.89 rows=1500031 width=4)
 JIT:
   Functions: 15
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(17 rows)

query 13 run 3
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1430561.61..1430561.62 rows=1 width=16)
   ->  Sort  (cost=1430561.61..1430562.11 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1430558.61..1430560.61 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=1275876.71..1408058.15 rows=1500031 width=12)
                     Group Key: customer.c_custkey
                     Planned Partitions: 4
                     ->  Hash Right Join  (cost=55343.28..666534.81 rows=14999185 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..448776.56 rows=14999185 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=30732.89..30732.89 rows=1500031 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.43..30732.89 rows=1500031 width=4)
 JIT:
   Functions: 15
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(17 rows)

query 13 run 4
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1430561.61..1430561.62 rows=1 width=16)
   ->  Sort  (cost=1430561.61..1430562.11 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1430558.61..1430560.61 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=1275876.71..1408058.15 rows=1500031 width=12)
                     Group Key: customer.c_custkey
                     Planned Partitions: 4
                     ->  Hash Right Join  (cost=55343.28..666534.81 rows=14999185 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..448776.56 rows=14999185 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=30732.89..30732.89 rows=1500031 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.43..30732.89 rows=1500031 width=4)
 JIT:
   Functions: 15
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(17 rows)

query 13 run 5
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1430561.61..1430561.62 rows=1 width=16)
   ->  Sort  (cost=1430561.61..1430562.11 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1430558.61..1430560.61 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=1275876.71..1408058.15 rows=1500031 width=12)
                     Group Key: customer.c_custkey
                     Planned Partitions: 4
                     ->  Hash Right Join  (cost=55343.28..666534.81 rows=14999185 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..448776.56 rows=14999185 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=30732.89..30732.89 rows=1500031 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.43..30732.89 rows=1500031 width=4)
 JIT:
   Functions: 15
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(17 rows)

query 14 run 1
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1294594.28..1294594.30 rows=1 width=32)
   ->  Aggregate  (cost=1294594.28..1294594.30 rows=1 width=32)
         ->  Merge Join  (cost=5.72..1282618.59 rows=684325 width=33)
               Merge Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Index Only Scan using q14_idx_1 on lineitem  (cost=0.56..1200202.12 rows=725092 width=16)
                     Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..68833.28 rows=2000057 width=25)
 JIT:
   Functions: 7
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(10 rows)

query 14 run 2
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1294594.28..1294594.30 rows=1 width=32)
   ->  Aggregate  (cost=1294594.28..1294594.30 rows=1 width=32)
         ->  Merge Join  (cost=5.72..1282618.59 rows=684325 width=33)
               Merge Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Index Only Scan using q14_idx_1 on lineitem  (cost=0.56..1200202.12 rows=725092 width=16)
                     Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..68833.28 rows=2000057 width=25)
 JIT:
   Functions: 7
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(10 rows)

query 14 run 3
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1294594.28..1294594.30 rows=1 width=32)
   ->  Aggregate  (cost=1294594.28..1294594.30 rows=1 width=32)
         ->  Merge Join  (cost=5.72..1282618.59 rows=684325 width=33)
               Merge Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Index Only Scan using q14_idx_1 on lineitem  (cost=0.56..1200202.12 rows=725092 width=16)
                     Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..68833.28 rows=2000057 width=25)
 JIT:
   Functions: 7
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(10 rows)

query 14 run 4
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1294594.28..1294594.30 rows=1 width=32)
   ->  Aggregate  (cost=1294594.28..1294594.30 rows=1 width=32)
         ->  Merge Join  (cost=5.72..1282618.59 rows=684325 width=33)
               Merge Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Index Only Scan using q14_idx_1 on lineitem  (cost=0.56..1200202.12 rows=725092 width=16)
                     Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..68833.28 rows=2000057 width=25)
 JIT:
   Functions: 7
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(10 rows)

query 14 run 5
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1294594.28..1294594.30 rows=1 width=32)
   ->  Aggregate  (cost=1294594.28..1294594.30 rows=1 width=32)
         ->  Merge Join  (cost=5.72..1282618.59 rows=684325 width=33)
               Merge Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Index Only Scan using q14_idx_1 on lineitem  (cost=0.56..1200202.12 rows=725092 width=16)
                     Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..68833.28 rows=2000057 width=25)
 JIT:
   Functions: 7
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(10 rows)

query 15 run 1
SET
SET
SET
CREATE VIEW
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3788094.18..3788103.36 rows=1 width=104)
   InitPlan 1
     ->  Aggregate  (cost=1894526.93..1894526.94 rows=1 width=32)
           ->  HashAggregate  (cost=1892059.36..1893293.15 rows=98703 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=43825.50..1867660.40 rows=2439896 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..43215.53 rows=2439896 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=1893567.24..1898098.65 rows=494 width=104)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..4274.29 rows=100000 width=72)
         ->  Sort  (cost=1893566.95..1893568.18 rows=494 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=1892059.36..1893544.84 rows=494 width=36)
                     ->  HashAggregate  (cost=1892059.36..1893539.90 rows=494 width=36)
                           Group Key: lineitem.l_suppkey
                           Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
                           ->  Bitmap Heap Scan on lineitem  (cost=43825.50..1867660.40 rows=2439896 width=16)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..43215.53 rows=2439896 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
 JIT:
   Functions: 24
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(25 rows)

DROP VIEW
query 15 run 2
SET
SET
SET
CREATE VIEW
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3788094.18..3788103.36 rows=1 width=104)
   InitPlan 1
     ->  Aggregate  (cost=1894526.93..1894526.94 rows=1 width=32)
           ->  HashAggregate  (cost=1892059.36..1893293.15 rows=98703 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=43825.50..1867660.40 rows=2439896 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..43215.53 rows=2439896 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=1893567.24..1898098.65 rows=494 width=104)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..4274.29 rows=100000 width=72)
         ->  Sort  (cost=1893566.95..1893568.18 rows=494 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=1892059.36..1893544.84 rows=494 width=36)
                     ->  HashAggregate  (cost=1892059.36..1893539.90 rows=494 width=36)
                           Group Key: lineitem.l_suppkey
                           Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
                           ->  Bitmap Heap Scan on lineitem  (cost=43825.50..1867660.40 rows=2439896 width=16)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..43215.53 rows=2439896 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
 JIT:
   Functions: 24
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(25 rows)

DROP VIEW
query 15 run 3
SET
SET
SET
CREATE VIEW
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3788094.18..3788103.36 rows=1 width=104)
   InitPlan 1
     ->  Aggregate  (cost=1894526.93..1894526.94 rows=1 width=32)
           ->  HashAggregate  (cost=1892059.36..1893293.15 rows=98703 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=43825.50..1867660.40 rows=2439896 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..43215.53 rows=2439896 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=1893567.24..1898098.65 rows=494 width=104)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..4274.29 rows=100000 width=72)
         ->  Sort  (cost=1893566.95..1893568.18 rows=494 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=1892059.36..1893544.84 rows=494 width=36)
                     ->  HashAggregate  (cost=1892059.36..1893539.90 rows=494 width=36)
                           Group Key: lineitem.l_suppkey
                           Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
                           ->  Bitmap Heap Scan on lineitem  (cost=43825.50..1867660.40 rows=2439896 width=16)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..43215.53 rows=2439896 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
 JIT:
   Functions: 24
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(25 rows)

DROP VIEW
query 15 run 4
SET
SET
SET
CREATE VIEW
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3788094.18..3788103.36 rows=1 width=104)
   InitPlan 1
     ->  Aggregate  (cost=1894526.93..1894526.94 rows=1 width=32)
           ->  HashAggregate  (cost=1892059.36..1893293.15 rows=98703 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=43825.50..1867660.40 rows=2439896 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..43215.53 rows=2439896 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=1893567.24..1898098.65 rows=494 width=104)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..4274.29 rows=100000 width=72)
         ->  Sort  (cost=1893566.95..1893568.18 rows=494 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=1892059.36..1893544.84 rows=494 width=36)
                     ->  HashAggregate  (cost=1892059.36..1893539.90 rows=494 width=36)
                           Group Key: lineitem.l_suppkey
                           Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
                           ->  Bitmap Heap Scan on lineitem  (cost=43825.50..1867660.40 rows=2439896 width=16)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..43215.53 rows=2439896 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
 JIT:
   Functions: 24
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(25 rows)

DROP VIEW
query 15 run 5
SET
SET
SET
CREATE VIEW
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3788094.18..3788103.36 rows=1 width=104)
   InitPlan 1
     ->  Aggregate  (cost=1894526.93..1894526.94 rows=1 width=32)
           ->  HashAggregate  (cost=1892059.36..1893293.15 rows=98703 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=43825.50..1867660.40 rows=2439896 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..43215.53 rows=2439896 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=1893567.24..1898098.65 rows=494 width=104)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..4274.29 rows=100000 width=72)
         ->  Sort  (cost=1893566.95..1893568.18 rows=494 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=1892059.36..1893544.84 rows=494 width=36)
                     ->  HashAggregate  (cost=1892059.36..1893539.90 rows=494 width=36)
                           Group Key: lineitem.l_suppkey
                           Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
                           ->  Bitmap Heap Scan on lineitem  (cost=43825.50..1867660.40 rows=2439896 width=16)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..43215.53 rows=2439896 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
 JIT:
   Functions: 24
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(25 rows)

DROP VIEW
query 16 run 1
SET
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=369197.28..369197.28 rows=1 width=44)
   ->  Sort  (cost=369197.28..369578.69 rows=152564 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=359623.85..368434.46 rows=152564 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=359623.85..361080.84 rows=582798 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                     ->  Hash Join  (cost=98097.52..292428.26 rows=582798 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..187305.19 rows=3998850 width=8)
                                 Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=90982.43..90982.43 rows=291491 width=40)
                                 ->  Seq Scan on part  (cost=0.00..90982.43 rows=291491 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
 JIT:
   Functions: 26
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(20 rows)

query 16 run 2
SET
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=369197.28..369197.28 rows=1 width=44)
   ->  Sort  (cost=369197.28..369578.69 rows=152564 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=359623.85..368434.46 rows=152564 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=359623.85..361080.84 rows=582798 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                     ->  Hash Join  (cost=98097.52..292428.26 rows=582798 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..187305.19 rows=3998850 width=8)
                                 Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=90982.43..90982.43 rows=291491 width=40)
                                 ->  Seq Scan on part  (cost=0.00..90982.43 rows=291491 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
 JIT:
   Functions: 26
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(20 rows)

query 16 run 3
SET
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=369197.28..369197.28 rows=1 width=44)
   ->  Sort  (cost=369197.28..369578.69 rows=152564 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=359623.85..368434.46 rows=152564 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=359623.85..361080.84 rows=582798 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                     ->  Hash Join  (cost=98097.52..292428.26 rows=582798 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..187305.19 rows=3998850 width=8)
                                 Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=90982.43..90982.43 rows=291491 width=40)
                                 ->  Seq Scan on part  (cost=0.00..90982.43 rows=291491 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
 JIT:
   Functions: 26
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(20 rows)

query 16 run 4
SET
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=369197.28..369197.28 rows=1 width=44)
   ->  Sort  (cost=369197.28..369578.69 rows=152564 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=359623.85..368434.46 rows=152564 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=359623.85..361080.84 rows=582798 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                     ->  Hash Join  (cost=98097.52..292428.26 rows=582798 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..187305.19 rows=3998850 width=8)
                                 Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=90982.43..90982.43 rows=291491 width=40)
                                 ->  Seq Scan on part  (cost=0.00..90982.43 rows=291491 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
 JIT:
   Functions: 26
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(20 rows)

query 16 run 5
SET
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=369197.28..369197.28 rows=1 width=44)
   ->  Sort  (cost=369197.28..369578.69 rows=152564 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=359623.85..368434.46 rows=152564 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=359623.85..361080.84 rows=582798 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                     ->  Hash Join  (cost=98097.52..292428.26 rows=582798 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..187305.19 rows=3998850 width=8)
                                 Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=90982.43..90982.43 rows=291491 width=40)
                                 ->  Seq Scan on part  (cost=0.00..90982.43 rows=291491 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
 JIT:
   Functions: 26
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(20 rows)

query 17 run 1
SET
SET
SET
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1776429.31..1776429.32 rows=1 width=32)
   ->  Aggregate  (cost=1776429.31..1776429.32 rows=1 width=32)
         ->  Nested Loop  (cost=71091.40..1776379.82 rows=19795 width=8)
               Join Filter: (part.p_partkey = lineitem.l_partkey)
               ->  Merge Join  (cost=71090.84..1770031.09 rows=2098 width=40)
                     Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                     ->  Sort  (cost=71090.27..71095.22 rows=1980 width=4)
                           Sort Key: part.p_partkey
                           ->  Seq Scan on part  (cost=0.00..70981.85 rows=1980 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                     ->  GroupAggregate  (cost=0.56..1693611.92 rows=2119205 width=36)
                           Group Key: lineitem_1.l_partkey
                           ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.56..1361887.52 rows=59987264 width=9)
               ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..2.91 rows=9 width=17)
                     Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
 JIT:
   Functions: 18
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(18 rows)

query 17 run 2
SET
SET
SET
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1776429.31..1776429.32 rows=1 width=32)
   ->  Aggregate  (cost=1776429.31..1776429.32 rows=1 width=32)
         ->  Nested Loop  (cost=71091.40..1776379.82 rows=19795 width=8)
               Join Filter: (part.p_partkey = lineitem.l_partkey)
               ->  Merge Join  (cost=71090.84..1770031.09 rows=2098 width=40)
                     Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                     ->  Sort  (cost=71090.27..71095.22 rows=1980 width=4)
                           Sort Key: part.p_partkey
                           ->  Seq Scan on part  (cost=0.00..70981.85 rows=1980 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                     ->  GroupAggregate  (cost=0.56..1693611.92 rows=2119205 width=36)
                           Group Key: lineitem_1.l_partkey
                           ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.56..1361887.52 rows=59987264 width=9)
               ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..2.91 rows=9 width=17)
                     Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
 JIT:
   Functions: 18
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(18 rows)

query 17 run 3
SET
SET
SET
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1776429.31..1776429.32 rows=1 width=32)
   ->  Aggregate  (cost=1776429.31..1776429.32 rows=1 width=32)
         ->  Nested Loop  (cost=71091.40..1776379.82 rows=19795 width=8)
               Join Filter: (part.p_partkey = lineitem.l_partkey)
               ->  Merge Join  (cost=71090.84..1770031.09 rows=2098 width=40)
                     Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                     ->  Sort  (cost=71090.27..71095.22 rows=1980 width=4)
                           Sort Key: part.p_partkey
                           ->  Seq Scan on part  (cost=0.00..70981.85 rows=1980 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                     ->  GroupAggregate  (cost=0.56..1693611.92 rows=2119205 width=36)
                           Group Key: lineitem_1.l_partkey
                           ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.56..1361887.52 rows=59987264 width=9)
               ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..2.91 rows=9 width=17)
                     Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
 JIT:
   Functions: 18
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(18 rows)

query 17 run 4
SET
SET
SET
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1776429.31..1776429.32 rows=1 width=32)
   ->  Aggregate  (cost=1776429.31..1776429.32 rows=1 width=32)
         ->  Nested Loop  (cost=71091.40..1776379.82 rows=19795 width=8)
               Join Filter: (part.p_partkey = lineitem.l_partkey)
               ->  Merge Join  (cost=71090.84..1770031.09 rows=2098 width=40)
                     Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                     ->  Sort  (cost=71090.27..71095.22 rows=1980 width=4)
                           Sort Key: part.p_partkey
                           ->  Seq Scan on part  (cost=0.00..70981.85 rows=1980 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                     ->  GroupAggregate  (cost=0.56..1693611.92 rows=2119205 width=36)
                           Group Key: lineitem_1.l_partkey
                           ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.56..1361887.52 rows=59987264 width=9)
               ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..2.91 rows=9 width=17)
                     Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
 JIT:
   Functions: 18
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(18 rows)

query 17 run 5
SET
SET
SET
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1776429.31..1776429.32 rows=1 width=32)
   ->  Aggregate  (cost=1776429.31..1776429.32 rows=1 width=32)
         ->  Nested Loop  (cost=71091.40..1776379.82 rows=19795 width=8)
               Join Filter: (part.p_partkey = lineitem.l_partkey)
               ->  Merge Join  (cost=71090.84..1770031.09 rows=2098 width=40)
                     Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                     ->  Sort  (cost=71090.27..71095.22 rows=1980 width=4)
                           Sort Key: part.p_partkey
                           ->  Seq Scan on part  (cost=0.00..70981.85 rows=1980 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                     ->  GroupAggregate  (cost=0.56..1693611.92 rows=2119205 width=36)
                           Group Key: lineitem_1.l_partkey
                           ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.56..1361887.52 rows=59987264 width=9)
               ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..2.91 rows=9 width=17)
                     Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
 JIT:
   Functions: 18
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(18 rows)

query 18 run 1
SET
SET
SET
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=7005322.05..7005322.30 rows=100 width=71)
   ->  Sort  (cost=7005322.05..7055298.55 rows=19990599 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=3380347.29..6241295.73 rows=19990599 width=71)
               Group Key: orders.o_orderkey, customer.c_custkey
               ->  Incremental Sort  (cost=3380347.29..5841483.75 rows=19990599 width=44)
                     Sort Key: orders.o_orderkey, customer.c_custkey
                     Presorted Key: orders.o_orderkey
                     ->  Merge Join  (cost=3380347.17..5116553.79 rows=19990599 width=44)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Sort  (cost=3380069.90..3392567.25 rows=4998939 width=43)
                                 Sort Key: orders.o_orderkey
                                 ->  Hash Join  (cost=78488.70..2714018.19 rows=4998939 width=43)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Merge Join  (cost=1.00..2555036.25 rows=4998939 width=24)
                                             Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                             ->  Index Scan using orders_pkey on orders  (cost=0.43..568541.71 rows=15000685 width=20)
                                             ->  GroupAggregate  (cost=0.56..1886506.08 rows=4998939 width=4)
                                                   Group Key: lineitem_1.l_orderkey
                                                   Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                   ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.56..1361617.52 rows=59987264 width=9)
                                       ->  Hash  (cost=50947.31..50947.31 rows=1500031 width=23)
                                             ->  Seq Scan on customer  (cost=0.00..50947.31 rows=1500031 width=23)
                           ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.56..1361617.52 rows=59987264 width=9)
 JIT:
   Functions: 28
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(27 rows)

query 18 run 2
SET
SET
SET
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=7005322.05..7005322.30 rows=100 width=71)
   ->  Sort  (cost=7005322.05..7055298.55 rows=19990599 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=3380347.29..6241295.73 rows=19990599 width=71)
               Group Key: orders.o_orderkey, customer.c_custkey
               ->  Incremental Sort  (cost=3380347.29..5841483.75 rows=19990599 width=44)
                     Sort Key: orders.o_orderkey, customer.c_custkey
                     Presorted Key: orders.o_orderkey
                     ->  Merge Join  (cost=3380347.17..5116553.79 rows=19990599 width=44)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Sort  (cost=3380069.90..3392567.25 rows=4998939 width=43)
                                 Sort Key: orders.o_orderkey
                                 ->  Hash Join  (cost=78488.70..2714018.19 rows=4998939 width=43)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Merge Join  (cost=1.00..2555036.25 rows=4998939 width=24)
                                             Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                             ->  Index Scan using orders_pkey on orders  (cost=0.43..568541.71 rows=15000685 width=20)
                                             ->  GroupAggregate  (cost=0.56..1886506.08 rows=4998939 width=4)
                                                   Group Key: lineitem_1.l_orderkey
                                                   Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                   ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.56..1361617.52 rows=59987264 width=9)
                                       ->  Hash  (cost=50947.31..50947.31 rows=1500031 width=23)
                                             ->  Seq Scan on customer  (cost=0.00..50947.31 rows=1500031 width=23)
                           ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.56..1361617.52 rows=59987264 width=9)
 JIT:
   Functions: 28
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(27 rows)

query 18 run 3
SET
SET
SET
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=7005322.05..7005322.30 rows=100 width=71)
   ->  Sort  (cost=7005322.05..7055298.55 rows=19990599 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=3380347.29..6241295.73 rows=19990599 width=71)
               Group Key: orders.o_orderkey, customer.c_custkey
               ->  Incremental Sort  (cost=3380347.29..5841483.75 rows=19990599 width=44)
                     Sort Key: orders.o_orderkey, customer.c_custkey
                     Presorted Key: orders.o_orderkey
                     ->  Merge Join  (cost=3380347.17..5116553.79 rows=19990599 width=44)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Sort  (cost=3380069.90..3392567.25 rows=4998939 width=43)
                                 Sort Key: orders.o_orderkey
                                 ->  Hash Join  (cost=78488.70..2714018.19 rows=4998939 width=43)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Merge Join  (cost=1.00..2555036.25 rows=4998939 width=24)
                                             Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                             ->  Index Scan using orders_pkey on orders  (cost=0.43..568541.71 rows=15000685 width=20)
                                             ->  GroupAggregate  (cost=0.56..1886506.08 rows=4998939 width=4)
                                                   Group Key: lineitem_1.l_orderkey
                                                   Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                   ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.56..1361617.52 rows=59987264 width=9)
                                       ->  Hash  (cost=50947.31..50947.31 rows=1500031 width=23)
                                             ->  Seq Scan on customer  (cost=0.00..50947.31 rows=1500031 width=23)
                           ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.56..1361617.52 rows=59987264 width=9)
 JIT:
   Functions: 28
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(27 rows)

query 18 run 4
SET
SET
SET
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=7005322.05..7005322.30 rows=100 width=71)
   ->  Sort  (cost=7005322.05..7055298.55 rows=19990599 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=3380347.29..6241295.73 rows=19990599 width=71)
               Group Key: orders.o_orderkey, customer.c_custkey
               ->  Incremental Sort  (cost=3380347.29..5841483.75 rows=19990599 width=44)
                     Sort Key: orders.o_orderkey, customer.c_custkey
                     Presorted Key: orders.o_orderkey
                     ->  Merge Join  (cost=3380347.17..5116553.79 rows=19990599 width=44)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Sort  (cost=3380069.90..3392567.25 rows=4998939 width=43)
                                 Sort Key: orders.o_orderkey
                                 ->  Hash Join  (cost=78488.70..2714018.19 rows=4998939 width=43)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Merge Join  (cost=1.00..2555036.25 rows=4998939 width=24)
                                             Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                             ->  Index Scan using orders_pkey on orders  (cost=0.43..568541.71 rows=15000685 width=20)
                                             ->  GroupAggregate  (cost=0.56..1886506.08 rows=4998939 width=4)
                                                   Group Key: lineitem_1.l_orderkey
                                                   Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                   ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.56..1361617.52 rows=59987264 width=9)
                                       ->  Hash  (cost=50947.31..50947.31 rows=1500031 width=23)
                                             ->  Seq Scan on customer  (cost=0.00..50947.31 rows=1500031 width=23)
                           ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.56..1361617.52 rows=59987264 width=9)
 JIT:
   Functions: 28
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(27 rows)

query 18 run 5
SET
SET
SET
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=7005322.05..7005322.30 rows=100 width=71)
   ->  Sort  (cost=7005322.05..7055298.55 rows=19990599 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=3380347.29..6241295.73 rows=19990599 width=71)
               Group Key: orders.o_orderkey, customer.c_custkey
               ->  Incremental Sort  (cost=3380347.29..5841483.75 rows=19990599 width=44)
                     Sort Key: orders.o_orderkey, customer.c_custkey
                     Presorted Key: orders.o_orderkey
                     ->  Merge Join  (cost=3380347.17..5116553.79 rows=19990599 width=44)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Sort  (cost=3380069.90..3392567.25 rows=4998939 width=43)
                                 Sort Key: orders.o_orderkey
                                 ->  Hash Join  (cost=78488.70..2714018.19 rows=4998939 width=43)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Merge Join  (cost=1.00..2555036.25 rows=4998939 width=24)
                                             Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                             ->  Index Scan using orders_pkey on orders  (cost=0.43..568541.71 rows=15000685 width=20)
                                             ->  GroupAggregate  (cost=0.56..1886506.08 rows=4998939 width=4)
                                                   Group Key: lineitem_1.l_orderkey
                                                   Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                   ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.56..1361617.52 rows=59987264 width=9)
                                       ->  Hash  (cost=50947.31..50947.31 rows=1500031 width=23)
                                             ->  Seq Scan on customer  (cost=0.00..50947.31 rows=1500031 width=23)
                           ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.56..1361617.52 rows=59987264 width=9)
 JIT:
   Functions: 28
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(27 rows)

query 19 run 1
SET
SET
SET


 Limit  (cost=151532.63..151532.64 rows=1 width=32)
   ->  Aggregate  (cost=151532.63..151532.64 rows=1 width=32)
         ->  Nested Loop  (cost=0.56..151524.63 rows=1067 width=12)
               ->  Seq Scan on part  (cost=0.00..125983.42 rows=4903 width=30)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
               ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..5.20 rows=1 width=21)
                     Index Cond: ((l_partkey = part.p_partkey) AND (l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                     Filter: ((((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
 JIT:
   Functions: 8
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(11 rows)

query 19 run 2
SET
SET
SET


 Limit  (cost=151532.63..151532.64 rows=1 width=32)
   ->  Aggregate  (cost=151532.63..151532.64 rows=1 width=32)
         ->  Nested Loop  (cost=0.56..151524.63 rows=1067 width=12)
               ->  Seq Scan on part  (cost=0.00..125983.42 rows=4903 width=30)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
               ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..5.20 rows=1 width=21)
                     Index Cond: ((l_partkey = part.p_partkey) AND (l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                     Filter: ((((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
 JIT:
   Functions: 8
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(11 rows)

query 19 run 3
SET
SET
SET


 Limit  (cost=151532.63..151532.64 rows=1 width=32)
   ->  Aggregate  (cost=151532.63..151532.64 rows=1 width=32)
         ->  Nested Loop  (cost=0.56..151524.63 rows=1067 width=12)
               ->  Seq Scan on part  (cost=0.00..125983.42 rows=4903 width=30)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
               ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..5.20 rows=1 width=21)
                     Index Cond: ((l_partkey = part.p_partkey) AND (l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                     Filter: ((((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
 JIT:
   Functions: 8
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(11 rows)

query 19 run 4
SET
SET
SET

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=151532.63..151532.64 rows=1 width=32)
   ->  Aggregate  (cost=151532.63..151532.64 rows=1 width=32)
         ->  Nested Loop  (cost=0.56..151524.63 rows=1067 width=12)
               ->  Seq Scan on part  (cost=0.00..125983.42 rows=4903 width=30)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
               ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..5.20 rows=1 width=21)
                     Index Cond: ((l_partkey = part.p_partkey) AND (l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                     Filter: ((((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
 JIT:
   Functions: 8
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(11 rows)

query 19 run 5
SET
SET
SET

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=151532.63..151532.64 rows=1 width=32)
   ->  Aggregate  (cost=151532.63..151532.64 rows=1 width=32)
         ->  Nested Loop  (cost=0.56..151524.63 rows=1067 width=12)
               ->  Seq Scan on part  (cost=0.00..125983.42 rows=4903 width=30)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
               ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..5.20 rows=1 width=21)
                     Index Cond: ((l_partkey = part.p_partkey) AND (l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                     Filter: ((((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
 JIT:
   Functions: 8
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(11 rows)

query 20 run 1
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2781223.23..2781223.23 rows=1 width=52)
   ->  Sort  (cost=2781223.23..2781223.23 rows=1 width=52)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=2577890.92..2781223.22 rows=1 width=52)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..4472.31 rows=4000 width=56)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=60)
               ->  Materialize  (cost=2577890.92..2776570.91 rows=3 width=8)
                     ->  Hash Join  (cost=2577890.92..2776570.90 rows=3 width=8)
                           Hash Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                           Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                           ->  HashAggregate  (cost=2455745.42..2618015.47 rows=4854639 width=40)
                                 Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                 Planned Partitions: 32
                                 ->  Seq Scan on lineitem  (cost=0.00..2024951.96 rows=9159728 width=13)
                                       Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Hash  (cost=120933.71..120933.71 rows=80786 width=16)
                                 ->  Nested Loop  (cost=0.86..120933.71 rows=80786 width=16)
                                       ->  Index Only Scan using q20_idx_2 on part  (cost=0.43..64307.43 rows=20203 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.43..2.62 rows=18 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
 JIT:
   Functions: 28
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(28 rows)

query 20 run 2
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2781223.23..2781223.23 rows=1 width=52)
   ->  Sort  (cost=2781223.23..2781223.23 rows=1 width=52)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=2577890.92..2781223.22 rows=1 width=52)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..4472.31 rows=4000 width=56)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=60)
               ->  Materialize  (cost=2577890.92..2776570.91 rows=3 width=8)
                     ->  Hash Join  (cost=2577890.92..2776570.90 rows=3 width=8)
                           Hash Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                           Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                           ->  HashAggregate  (cost=2455745.42..2618015.47 rows=4854639 width=40)
                                 Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                 Planned Partitions: 32
                                 ->  Seq Scan on lineitem  (cost=0.00..2024951.96 rows=9159728 width=13)
                                       Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Hash  (cost=120933.71..120933.71 rows=80786 width=16)
                                 ->  Nested Loop  (cost=0.86..120933.71 rows=80786 width=16)
                                       ->  Index Only Scan using q20_idx_2 on part  (cost=0.43..64307.43 rows=20203 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.43..2.62 rows=18 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
 JIT:
   Functions: 28
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(28 rows)

query 20 run 3
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2781223.23..2781223.23 rows=1 width=52)
   ->  Sort  (cost=2781223.23..2781223.23 rows=1 width=52)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=2577890.92..2781223.22 rows=1 width=52)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..4472.31 rows=4000 width=56)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=60)
               ->  Materialize  (cost=2577890.92..2776570.91 rows=3 width=8)
                     ->  Hash Join  (cost=2577890.92..2776570.90 rows=3 width=8)
                           Hash Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                           Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                           ->  HashAggregate  (cost=2455745.42..2618015.47 rows=4854639 width=40)
                                 Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                 Planned Partitions: 32
                                 ->  Seq Scan on lineitem  (cost=0.00..2024951.96 rows=9159728 width=13)
                                       Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Hash  (cost=120933.71..120933.71 rows=80786 width=16)
                                 ->  Nested Loop  (cost=0.86..120933.71 rows=80786 width=16)
                                       ->  Index Only Scan using q20_idx_2 on part  (cost=0.43..64307.43 rows=20203 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.43..2.62 rows=18 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
 JIT:
   Functions: 28
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(28 rows)

query 20 run 4
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2781223.23..2781223.23 rows=1 width=52)
   ->  Sort  (cost=2781223.23..2781223.23 rows=1 width=52)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=2577890.92..2781223.22 rows=1 width=52)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..4472.31 rows=4000 width=56)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=60)
               ->  Materialize  (cost=2577890.92..2776570.91 rows=3 width=8)
                     ->  Hash Join  (cost=2577890.92..2776570.90 rows=3 width=8)
                           Hash Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                           Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                           ->  HashAggregate  (cost=2455745.42..2618015.47 rows=4854639 width=40)
                                 Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                 Planned Partitions: 32
                                 ->  Seq Scan on lineitem  (cost=0.00..2024951.96 rows=9159728 width=13)
                                       Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Hash  (cost=120933.71..120933.71 rows=80786 width=16)
                                 ->  Nested Loop  (cost=0.86..120933.71 rows=80786 width=16)
                                       ->  Index Only Scan using q20_idx_2 on part  (cost=0.43..64307.43 rows=20203 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.43..2.62 rows=18 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
 JIT:
   Functions: 28
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(28 rows)

query 20 run 5
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2781223.23..2781223.23 rows=1 width=52)
   ->  Sort  (cost=2781223.23..2781223.23 rows=1 width=52)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=2577890.92..2781223.22 rows=1 width=52)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..4472.31 rows=4000 width=56)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=60)
               ->  Materialize  (cost=2577890.92..2776570.91 rows=3 width=8)
                     ->  Hash Join  (cost=2577890.92..2776570.90 rows=3 width=8)
                           Hash Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                           Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                           ->  HashAggregate  (cost=2455745.42..2618015.47 rows=4854639 width=40)
                                 Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                 Planned Partitions: 32
                                 ->  Seq Scan on lineitem  (cost=0.00..2024951.96 rows=9159728 width=13)
                                       Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Hash  (cost=120933.71..120933.71 rows=80786 width=16)
                                 ->  Nested Loop  (cost=0.86..120933.71 rows=80786 width=16)
                                       ->  Index Only Scan using q20_idx_2 on part  (cost=0.43..64307.43 rows=20203 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.43..2.62 rows=18 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
 JIT:
   Functions: 28
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(28 rows)

query 21 run 1
SET
SET
SET
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1065000.81..1065000.82 rows=1 width=34)
   ->  Sort  (cost=1065000.81..1065000.82 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=1065000.78..1065000.80 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=1065000.78..1065000.79 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=588523.32..1065000.77 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=588522.75..1064998.13 rows=1 width=38)
                                 ->  Merge Anti Join  (cost=588522.32..1064995.68 rows=1 width=34)
                                       Merge Cond: (l1.l_orderkey = l3.l_orderkey)
                                       Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                       ->  Sort  (cost=588521.75..590521.33 rows=799830 width=34)
                                             Sort Key: l1.l_orderkey
                                             ->  Hash Join  (cost=2341.88..494478.58 rows=799830 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.56..409154.89 rows=19995755 width=8)
                                                   ->  Hash  (cost=2291.31..2291.31 rows=4000 width=30)
                                                         ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=39.29..2250.00 rows=4000 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.56..409154.89 rows=19995755 width=8)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.45 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.56..2.63 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
 JIT:
   Functions: 29
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(34 rows)

query 21 run 2
SET
SET
SET
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1065000.81..1065000.82 rows=1 width=34)
   ->  Sort  (cost=1065000.81..1065000.82 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=1065000.78..1065000.80 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=1065000.78..1065000.79 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=588523.32..1065000.77 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=588522.75..1064998.13 rows=1 width=38)
                                 ->  Merge Anti Join  (cost=588522.32..1064995.68 rows=1 width=34)
                                       Merge Cond: (l1.l_orderkey = l3.l_orderkey)
                                       Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                       ->  Sort  (cost=588521.75..590521.33 rows=799830 width=34)
                                             Sort Key: l1.l_orderkey
                                             ->  Hash Join  (cost=2341.88..494478.58 rows=799830 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.56..409154.89 rows=19995755 width=8)
                                                   ->  Hash  (cost=2291.31..2291.31 rows=4000 width=30)
                                                         ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=39.29..2250.00 rows=4000 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.56..409154.89 rows=19995755 width=8)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.45 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.56..2.63 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
 JIT:
   Functions: 29
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(34 rows)

query 21 run 3
SET
SET
SET
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1065000.81..1065000.82 rows=1 width=34)
   ->  Sort  (cost=1065000.81..1065000.82 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=1065000.78..1065000.80 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=1065000.78..1065000.79 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=588523.32..1065000.77 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=588522.75..1064998.13 rows=1 width=38)
                                 ->  Merge Anti Join  (cost=588522.32..1064995.68 rows=1 width=34)
                                       Merge Cond: (l1.l_orderkey = l3.l_orderkey)
                                       Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                       ->  Sort  (cost=588521.75..590521.33 rows=799830 width=34)
                                             Sort Key: l1.l_orderkey
                                             ->  Hash Join  (cost=2341.88..494478.58 rows=799830 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.56..409154.89 rows=19995755 width=8)
                                                   ->  Hash  (cost=2291.31..2291.31 rows=4000 width=30)
                                                         ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=39.29..2250.00 rows=4000 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.56..409154.89 rows=19995755 width=8)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.45 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.56..2.63 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
 JIT:
   Functions: 29
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(34 rows)

query 21 run 4
SET
SET
SET
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1065000.81..1065000.82 rows=1 width=34)
   ->  Sort  (cost=1065000.81..1065000.82 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=1065000.78..1065000.80 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=1065000.78..1065000.79 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=588523.32..1065000.77 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=588522.75..1064998.13 rows=1 width=38)
                                 ->  Merge Anti Join  (cost=588522.32..1064995.68 rows=1 width=34)
                                       Merge Cond: (l1.l_orderkey = l3.l_orderkey)
                                       Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                       ->  Sort  (cost=588521.75..590521.33 rows=799830 width=34)
                                             Sort Key: l1.l_orderkey
                                             ->  Hash Join  (cost=2341.88..494478.58 rows=799830 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.56..409154.89 rows=19995755 width=8)
                                                   ->  Hash  (cost=2291.31..2291.31 rows=4000 width=30)
                                                         ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=39.29..2250.00 rows=4000 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.56..409154.89 rows=19995755 width=8)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.45 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.56..2.63 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
 JIT:
   Functions: 29
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(34 rows)

query 21 run 5
SET
SET
SET
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1065000.81..1065000.82 rows=1 width=34)
   ->  Sort  (cost=1065000.81..1065000.82 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=1065000.78..1065000.80 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=1065000.78..1065000.79 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=588523.32..1065000.77 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=588522.75..1064998.13 rows=1 width=38)
                                 ->  Merge Anti Join  (cost=588522.32..1064995.68 rows=1 width=34)
                                       Merge Cond: (l1.l_orderkey = l3.l_orderkey)
                                       Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                       ->  Sort  (cost=588521.75..590521.33 rows=799830 width=34)
                                             Sort Key: l1.l_orderkey
                                             ->  Hash Join  (cost=2341.88..494478.58 rows=799830 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.56..409154.89 rows=19995755 width=8)
                                                   ->  Hash  (cost=2291.31..2291.31 rows=4000 width=30)
                                                         ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=39.29..2250.00 rows=4000 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.56..409154.89 rows=19995755 width=8)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.45 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.56..2.63 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
 JIT:
   Functions: 29
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(34 rows)

query 22 run 1
SET
SET
SET
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=162355.90..162355.93 rows=1 width=72)
   InitPlan 1
     ->  Aggregate  (cost=75441.82..75441.83 rows=1 width=32)
           ->  Seq Scan on customer customer_1  (cost=0.00..75322.81 rows=47600 width=6)
                 Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=86914.08..87124.92 rows=7667 width=72)
         Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
         ->  Sort  (cost=86914.08..86933.25 rows=7667 width=38)
               Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
               ->  Nested Loop Anti Join  (cost=0.43..86419.39 rows=7667 width=38)
                     ->  Seq Scan on customer  (cost=0.00..75322.81 rows=17500 width=26)
                           Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.65 rows=18 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
 JIT:
   Functions: 16
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(17 rows)

query 22 run 2
SET
SET
SET
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=162355.90..162355.93 rows=1 width=72)
   InitPlan 1
     ->  Aggregate  (cost=75441.82..75441.83 rows=1 width=32)
           ->  Seq Scan on customer customer_1  (cost=0.00..75322.81 rows=47600 width=6)
                 Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=86914.08..87124.92 rows=7667 width=72)
         Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
         ->  Sort  (cost=86914.08..86933.25 rows=7667 width=38)
               Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
               ->  Nested Loop Anti Join  (cost=0.43..86419.39 rows=7667 width=38)
                     ->  Seq Scan on customer  (cost=0.00..75322.81 rows=17500 width=26)
                           Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.65 rows=18 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
 JIT:
   Functions: 16
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(17 rows)

query 22 run 3
SET
SET
SET
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=162355.90..162355.93 rows=1 width=72)
   InitPlan 1
     ->  Aggregate  (cost=75441.82..75441.83 rows=1 width=32)
           ->  Seq Scan on customer customer_1  (cost=0.00..75322.81 rows=47600 width=6)
                 Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=86914.08..87124.92 rows=7667 width=72)
         Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
         ->  Sort  (cost=86914.08..86933.25 rows=7667 width=38)
               Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
               ->  Nested Loop Anti Join  (cost=0.43..86419.39 rows=7667 width=38)
                     ->  Seq Scan on customer  (cost=0.00..75322.81 rows=17500 width=26)
                           Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.65 rows=18 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
 JIT:
   Functions: 16
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(17 rows)

query 22 run 4
SET
SET
SET
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=162355.90..162355.93 rows=1 width=72)
   InitPlan 1
     ->  Aggregate  (cost=75441.82..75441.83 rows=1 width=32)
           ->  Seq Scan on customer customer_1  (cost=0.00..75322.81 rows=47600 width=6)
                 Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=86914.08..87124.92 rows=7667 width=72)
         Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
         ->  Sort  (cost=86914.08..86933.25 rows=7667 width=38)
               Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
               ->  Nested Loop Anti Join  (cost=0.43..86419.39 rows=7667 width=38)
                     ->  Seq Scan on customer  (cost=0.00..75322.81 rows=17500 width=26)
                           Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.65 rows=18 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
 JIT:
   Functions: 16
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(17 rows)

query 22 run 5
SET
SET
SET
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=162355.90..162355.93 rows=1 width=72)
   InitPlan 1
     ->  Aggregate  (cost=75441.82..75441.83 rows=1 width=32)
           ->  Seq Scan on customer customer_1  (cost=0.00..75322.81 rows=47600 width=6)
                 Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=86914.08..87124.92 rows=7667 width=72)
         Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
         ->  Sort  (cost=86914.08..86933.25 rows=7667 width=38)
               Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
               ->  Nested Loop Anti Join  (cost=0.43..86419.39 rows=7667 width=38)
                     ->  Seq Scan on customer  (cost=0.00..75322.81 rows=17500 width=26)
                           Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.65 rows=18 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
 JIT:
   Functions: 16
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(17 rows)

