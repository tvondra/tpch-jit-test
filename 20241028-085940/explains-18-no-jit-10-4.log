query 1 run 1
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1832117.03..1832117.67 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=1832117.03..1832120.85 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=1832117.03..1832119.91 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=1831116.98..1831116.99 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=1831116.76..1831116.90 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1312617.14 rows=14814275 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 1 run 2
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1832117.03..1832117.67 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=1832117.03..1832120.85 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=1832117.03..1832119.91 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=1831116.98..1831116.99 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=1831116.76..1831116.90 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1312617.14 rows=14814275 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 1 run 3
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1832117.03..1832117.67 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=1832117.03..1832120.85 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=1832117.03..1832119.91 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=1831116.98..1831116.99 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=1831116.76..1831116.90 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1312617.14 rows=14814275 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 1 run 4
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1832117.03..1832117.67 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=1832117.03..1832120.85 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=1832117.03..1832119.91 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=1831116.98..1831116.99 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=1831116.76..1831116.90 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1312617.14 rows=14814275 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 1 run 5
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1832117.03..1832117.67 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=1832117.03..1832120.85 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=1832117.03..1832119.91 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=1831116.98..1831116.99 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=1831116.76..1831116.90 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1312617.14 rows=14814275 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(11 rows)

query 2 run 1
SET
SET
SET
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=481430.78..481430.79 rows=1 width=193)
   ->  Sort  (cost=481430.78..481430.79 rows=1 width=193)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=50.37..481430.77 rows=1 width=193)
               Join Filter: (supplier.s_nationkey = nation.n_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=50.37..481428.08 rows=1 width=171)
                     ->  Nested Loop  (cost=50.37..481428.07 rows=1 width=171)
                           Join Filter: (supplier.s_suppkey = partsupp.ps_suppkey)
                           ->  Nested Loop  (cost=50.37..476957.07 rows=1 width=34)
                                 ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..54314.58 rows=8124 width=30)
                                       Index Cond: (p_size = 16)
                                       Filter: ((p_type)::text ~~ '%NICKEL'::text)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=49.94..52.01 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=49.50..49.51 rows=1 width=32)
                                               ->  Nested Loop  (cost=2.41..49.49 rows=4 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Hash Join  (cost=2.41..48.20 rows=18 width=10)
                                                           Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                                           ->  Nested Loop  (cost=0.85..46.58 rows=18 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.43..2.75 rows=18 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.42..2.43 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                                                 ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
                           ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=145)
(35 rows)

query 2 run 2
SET
SET
SET
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=481430.78..481430.79 rows=1 width=193)
   ->  Sort  (cost=481430.78..481430.79 rows=1 width=193)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=50.37..481430.77 rows=1 width=193)
               Join Filter: (supplier.s_nationkey = nation.n_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=50.37..481428.08 rows=1 width=171)
                     ->  Nested Loop  (cost=50.37..481428.07 rows=1 width=171)
                           Join Filter: (supplier.s_suppkey = partsupp.ps_suppkey)
                           ->  Nested Loop  (cost=50.37..476957.07 rows=1 width=34)
                                 ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..54314.58 rows=8124 width=30)
                                       Index Cond: (p_size = 16)
                                       Filter: ((p_type)::text ~~ '%NICKEL'::text)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=49.94..52.01 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=49.50..49.51 rows=1 width=32)
                                               ->  Nested Loop  (cost=2.41..49.49 rows=4 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Hash Join  (cost=2.41..48.20 rows=18 width=10)
                                                           Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                                           ->  Nested Loop  (cost=0.85..46.58 rows=18 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.43..2.75 rows=18 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.42..2.43 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                                                 ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
                           ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=145)
(35 rows)

query 2 run 3
SET
SET
SET
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=481430.78..481430.79 rows=1 width=193)
   ->  Sort  (cost=481430.78..481430.79 rows=1 width=193)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=50.37..481430.77 rows=1 width=193)
               Join Filter: (supplier.s_nationkey = nation.n_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=50.37..481428.08 rows=1 width=171)
                     ->  Nested Loop  (cost=50.37..481428.07 rows=1 width=171)
                           Join Filter: (supplier.s_suppkey = partsupp.ps_suppkey)
                           ->  Nested Loop  (cost=50.37..476957.07 rows=1 width=34)
                                 ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..54314.58 rows=8124 width=30)
                                       Index Cond: (p_size = 16)
                                       Filter: ((p_type)::text ~~ '%NICKEL'::text)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=49.94..52.01 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=49.50..49.51 rows=1 width=32)
                                               ->  Nested Loop  (cost=2.41..49.49 rows=4 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Hash Join  (cost=2.41..48.20 rows=18 width=10)
                                                           Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                                           ->  Nested Loop  (cost=0.85..46.58 rows=18 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.43..2.75 rows=18 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.42..2.43 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                                                 ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
                           ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=145)
(35 rows)

query 2 run 4
SET
SET
SET
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=481430.78..481430.79 rows=1 width=193)
   ->  Sort  (cost=481430.78..481430.79 rows=1 width=193)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=50.37..481430.77 rows=1 width=193)
               Join Filter: (supplier.s_nationkey = nation.n_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=50.37..481428.08 rows=1 width=171)
                     ->  Nested Loop  (cost=50.37..481428.07 rows=1 width=171)
                           Join Filter: (supplier.s_suppkey = partsupp.ps_suppkey)
                           ->  Nested Loop  (cost=50.37..476957.07 rows=1 width=34)
                                 ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..54314.58 rows=8124 width=30)
                                       Index Cond: (p_size = 16)
                                       Filter: ((p_type)::text ~~ '%NICKEL'::text)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=49.94..52.01 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=49.50..49.51 rows=1 width=32)
                                               ->  Nested Loop  (cost=2.41..49.49 rows=4 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Hash Join  (cost=2.41..48.20 rows=18 width=10)
                                                           Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                                           ->  Nested Loop  (cost=0.85..46.58 rows=18 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.43..2.75 rows=18 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.42..2.43 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                                                 ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
                           ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=145)
(35 rows)

query 2 run 5
SET
SET
SET
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=481430.78..481430.79 rows=1 width=193)
   ->  Sort  (cost=481430.78..481430.79 rows=1 width=193)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=50.37..481430.77 rows=1 width=193)
               Join Filter: (supplier.s_nationkey = nation.n_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=50.37..481428.08 rows=1 width=171)
                     ->  Nested Loop  (cost=50.37..481428.07 rows=1 width=171)
                           Join Filter: (supplier.s_suppkey = partsupp.ps_suppkey)
                           ->  Nested Loop  (cost=50.37..476957.07 rows=1 width=34)
                                 ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..54314.58 rows=8124 width=30)
                                       Index Cond: (p_size = 16)
                                       Filter: ((p_type)::text ~~ '%NICKEL'::text)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=49.94..52.01 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=49.50..49.51 rows=1 width=32)
                                               ->  Nested Loop  (cost=2.41..49.49 rows=4 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Hash Join  (cost=2.41..48.20 rows=18 width=10)
                                                           Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                                           ->  Nested Loop  (cost=0.85..46.58 rows=18 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.43..2.75 rows=18 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.42..2.43 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                                                 ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
                           ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=145)
(35 rows)

query 3 run 1
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2316367.41..2316367.44 rows=10 width=44)
   ->  Sort  (cost=2316367.41..2324126.84 rows=3103769 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=1792313.77..2249296.08 rows=3103769 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=1792313.77..2163942.44 rows=3103769 width=24)
                     Workers Planned: 4
                     ->  Sort  (cost=1791313.71..1793253.57 rows=775942 width=24)
                           Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Parallel Hash Join  (cost=358912.51..1704037.40 rows=775942 width=24)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Parallel Seq Scan on lineitem  (cost=0.00..1312617.14 rows=8151439 width=16)
                                       Filter: (l_shipdate > '1995-03-07'::date)
                                 ->  Parallel Hash  (cost=354450.14..354450.14 rows=356989 width=12)
                                       ->  Parallel Hash Join  (cost=41560.07..354450.14 rows=356989 width=12)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..308146.07 rows=1807235 width=16)
                                                   Filter: (o_orderdate < '1995-03-07'::date)
                                             ->  Parallel Hash  (cost=40634.20..40634.20 rows=74070 width=4)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..40634.20 rows=74070 width=4)
                                                         Filter: (c_mktsegment = 'BUILDING'::bpchar)
(21 rows)

query 3 run 2
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2316367.41..2316367.44 rows=10 width=44)
   ->  Sort  (cost=2316367.41..2324126.84 rows=3103769 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=1792313.77..2249296.08 rows=3103769 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=1792313.77..2163942.44 rows=3103769 width=24)
                     Workers Planned: 4
                     ->  Sort  (cost=1791313.71..1793253.57 rows=775942 width=24)
                           Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Parallel Hash Join  (cost=358912.51..1704037.40 rows=775942 width=24)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Parallel Seq Scan on lineitem  (cost=0.00..1312617.14 rows=8151439 width=16)
                                       Filter: (l_shipdate > '1995-03-07'::date)
                                 ->  Parallel Hash  (cost=354450.14..354450.14 rows=356989 width=12)
                                       ->  Parallel Hash Join  (cost=41560.07..354450.14 rows=356989 width=12)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..308146.07 rows=1807235 width=16)
                                                   Filter: (o_orderdate < '1995-03-07'::date)
                                             ->  Parallel Hash  (cost=40634.20..40634.20 rows=74070 width=4)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..40634.20 rows=74070 width=4)
                                                         Filter: (c_mktsegment = 'BUILDING'::bpchar)
(21 rows)

query 3 run 3
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2316367.41..2316367.44 rows=10 width=44)
   ->  Sort  (cost=2316367.41..2324126.84 rows=3103769 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=1792313.77..2249296.08 rows=3103769 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=1792313.77..2163942.44 rows=3103769 width=24)
                     Workers Planned: 4
                     ->  Sort  (cost=1791313.71..1793253.57 rows=775942 width=24)
                           Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Parallel Hash Join  (cost=358912.51..1704037.40 rows=775942 width=24)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Parallel Seq Scan on lineitem  (cost=0.00..1312617.14 rows=8151439 width=16)
                                       Filter: (l_shipdate > '1995-03-07'::date)
                                 ->  Parallel Hash  (cost=354450.14..354450.14 rows=356989 width=12)
                                       ->  Parallel Hash Join  (cost=41560.07..354450.14 rows=356989 width=12)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..308146.07 rows=1807235 width=16)
                                                   Filter: (o_orderdate < '1995-03-07'::date)
                                             ->  Parallel Hash  (cost=40634.20..40634.20 rows=74070 width=4)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..40634.20 rows=74070 width=4)
                                                         Filter: (c_mktsegment = 'BUILDING'::bpchar)
(21 rows)

query 3 run 4
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2316367.41..2316367.44 rows=10 width=44)
   ->  Sort  (cost=2316367.41..2324126.84 rows=3103769 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=1792313.77..2249296.08 rows=3103769 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=1792313.77..2163942.44 rows=3103769 width=24)
                     Workers Planned: 4
                     ->  Sort  (cost=1791313.71..1793253.57 rows=775942 width=24)
                           Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Parallel Hash Join  (cost=358912.51..1704037.40 rows=775942 width=24)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Parallel Seq Scan on lineitem  (cost=0.00..1312617.14 rows=8151439 width=16)
                                       Filter: (l_shipdate > '1995-03-07'::date)
                                 ->  Parallel Hash  (cost=354450.14..354450.14 rows=356989 width=12)
                                       ->  Parallel Hash Join  (cost=41560.07..354450.14 rows=356989 width=12)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..308146.07 rows=1807235 width=16)
                                                   Filter: (o_orderdate < '1995-03-07'::date)
                                             ->  Parallel Hash  (cost=40634.20..40634.20 rows=74070 width=4)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..40634.20 rows=74070 width=4)
                                                         Filter: (c_mktsegment = 'BUILDING'::bpchar)
(21 rows)

query 3 run 5
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2316367.41..2316367.44 rows=10 width=44)
   ->  Sort  (cost=2316367.41..2324126.84 rows=3103769 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=1792313.77..2249296.08 rows=3103769 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=1792313.77..2163942.44 rows=3103769 width=24)
                     Workers Planned: 4
                     ->  Sort  (cost=1791313.71..1793253.57 rows=775942 width=24)
                           Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Parallel Hash Join  (cost=358912.51..1704037.40 rows=775942 width=24)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Parallel Seq Scan on lineitem  (cost=0.00..1312617.14 rows=8151439 width=16)
                                       Filter: (l_shipdate > '1995-03-07'::date)
                                 ->  Parallel Hash  (cost=354450.14..354450.14 rows=356989 width=12)
                                       ->  Parallel Hash Join  (cost=41560.07..354450.14 rows=356989 width=12)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..308146.07 rows=1807235 width=16)
                                                   Filter: (o_orderdate < '1995-03-07'::date)
                                             ->  Parallel Hash  (cost=40634.20..40634.20 rows=74070 width=4)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..40634.20 rows=74070 width=4)
                                                         Filter: (c_mktsegment = 'BUILDING'::bpchar)
(21 rows)

query 4 run 1
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=283750.26..547893.23 rows=1 width=24)
   ->  GroupAggregate  (cost=283750.26..1604465.10 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop Semi Join  (cost=283750.26..1601573.61 rows=578288 width=16)
               ->  Gather Merge  (cost=283749.82..353005.05 rows=578406 width=20)
                     Workers Planned: 4
                     ->  Sort  (cost=282749.76..283111.26 rows=144602 width=20)
                           Sort Key: orders.o_orderpriority
                           ->  Parallel Bitmap Heap Scan on orders  (cost=6919.10..270356.12 rows=144602 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6774.50 rows=578406 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
               ->  Index Only Scan using q4_idx_1 on lineitem  (cost=0.44..2.44 rows=1 width=4)
                     Index Cond: (l_orderkey = orders.o_orderkey)
(14 rows)

query 4 run 2
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=283750.26..547893.23 rows=1 width=24)
   ->  GroupAggregate  (cost=283750.26..1604465.10 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop Semi Join  (cost=283750.26..1601573.61 rows=578288 width=16)
               ->  Gather Merge  (cost=283749.82..353005.05 rows=578406 width=20)
                     Workers Planned: 4
                     ->  Sort  (cost=282749.76..283111.26 rows=144602 width=20)
                           Sort Key: orders.o_orderpriority
                           ->  Parallel Bitmap Heap Scan on orders  (cost=6919.10..270356.12 rows=144602 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6774.50 rows=578406 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
               ->  Index Only Scan using q4_idx_1 on lineitem  (cost=0.44..2.44 rows=1 width=4)
                     Index Cond: (l_orderkey = orders.o_orderkey)
(14 rows)

query 4 run 3
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=283750.26..547893.23 rows=1 width=24)
   ->  GroupAggregate  (cost=283750.26..1604465.10 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop Semi Join  (cost=283750.26..1601573.61 rows=578288 width=16)
               ->  Gather Merge  (cost=283749.82..353005.05 rows=578406 width=20)
                     Workers Planned: 4
                     ->  Sort  (cost=282749.76..283111.26 rows=144602 width=20)
                           Sort Key: orders.o_orderpriority
                           ->  Parallel Bitmap Heap Scan on orders  (cost=6919.10..270356.12 rows=144602 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6774.50 rows=578406 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
               ->  Index Only Scan using q4_idx_1 on lineitem  (cost=0.44..2.44 rows=1 width=4)
                     Index Cond: (l_orderkey = orders.o_orderkey)
(14 rows)

query 4 run 4
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=283750.26..547893.23 rows=1 width=24)
   ->  GroupAggregate  (cost=283750.26..1604465.10 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop Semi Join  (cost=283750.26..1601573.61 rows=578288 width=16)
               ->  Gather Merge  (cost=283749.82..353005.05 rows=578406 width=20)
                     Workers Planned: 4
                     ->  Sort  (cost=282749.76..283111.26 rows=144602 width=20)
                           Sort Key: orders.o_orderpriority
                           ->  Parallel Bitmap Heap Scan on orders  (cost=6919.10..270356.12 rows=144602 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6774.50 rows=578406 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
               ->  Index Only Scan using q4_idx_1 on lineitem  (cost=0.44..2.44 rows=1 width=4)
                     Index Cond: (l_orderkey = orders.o_orderkey)
(14 rows)

query 4 run 5
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=283750.26..547893.23 rows=1 width=24)
   ->  GroupAggregate  (cost=283750.26..1604465.10 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop Semi Join  (cost=283750.26..1601573.61 rows=578288 width=16)
               ->  Gather Merge  (cost=283749.82..353005.05 rows=578406 width=20)
                     Workers Planned: 4
                     ->  Sort  (cost=282749.76..283111.26 rows=144602 width=20)
                           Sort Key: orders.o_orderpriority
                           ->  Parallel Bitmap Heap Scan on orders  (cost=6919.10..270356.12 rows=144602 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6774.50 rows=578406 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
               ->  Index Only Scan using q4_idx_1 on lineitem  (cost=0.44..2.44 rows=1 width=4)
                     Index Cond: (l_orderkey = orders.o_orderkey)
(14 rows)

query 5 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=660834.30..660834.30 rows=1 width=58)
   ->  Sort  (cost=660834.30..660834.36 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=660588.84..660834.18 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=660588.84..660833.11 rows=100 width=58)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=659588.78..659821.15 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=659588.78..659635.19 rows=18564 width=38)
                                 Sort Key: nation.n_name
                                 ->  Parallel Hash Join  (cost=74318.92..658272.57 rows=18564 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=70627.33..652137.94 rows=465340 width=50)
                                             ->  Parallel Hash Join  (cost=70626.76..343094.28 rows=116358 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=27833.95..297828.84 rows=581793 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..27252.16 rows=2327172 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Parallel Hash  (cost=41855.38..41855.38 rows=74995 width=38)
                                                         ->  Hash Join  (cost=2.51..41855.38 rows=74995 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39696.76 rows=374976 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.56..2.62 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
(35 rows)

query 5 run 2
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=660834.30..660834.30 rows=1 width=58)
   ->  Sort  (cost=660834.30..660834.36 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=660588.84..660834.18 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=660588.84..660833.11 rows=100 width=58)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=659588.78..659821.15 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=659588.78..659635.19 rows=18564 width=38)
                                 Sort Key: nation.n_name
                                 ->  Parallel Hash Join  (cost=74318.92..658272.57 rows=18564 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=70627.33..652137.94 rows=465340 width=50)
                                             ->  Parallel Hash Join  (cost=70626.76..343094.28 rows=116358 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=27833.95..297828.84 rows=581793 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..27252.16 rows=2327172 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Parallel Hash  (cost=41855.38..41855.38 rows=74995 width=38)
                                                         ->  Hash Join  (cost=2.51..41855.38 rows=74995 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39696.76 rows=374976 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.56..2.62 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
(35 rows)

query 5 run 3
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=660834.30..660834.30 rows=1 width=58)
   ->  Sort  (cost=660834.30..660834.36 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=660588.84..660834.18 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=660588.84..660833.11 rows=100 width=58)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=659588.78..659821.15 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=659588.78..659635.19 rows=18564 width=38)
                                 Sort Key: nation.n_name
                                 ->  Parallel Hash Join  (cost=74318.92..658272.57 rows=18564 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=70627.33..652137.94 rows=465340 width=50)
                                             ->  Parallel Hash Join  (cost=70626.76..343094.28 rows=116358 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=27833.95..297828.84 rows=581793 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..27252.16 rows=2327172 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Parallel Hash  (cost=41855.38..41855.38 rows=74995 width=38)
                                                         ->  Hash Join  (cost=2.51..41855.38 rows=74995 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39696.76 rows=374976 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.56..2.62 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
(35 rows)

query 5 run 4
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=660834.30..660834.30 rows=1 width=58)
   ->  Sort  (cost=660834.30..660834.36 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=660588.84..660834.18 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=660588.84..660833.11 rows=100 width=58)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=659588.78..659821.15 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=659588.78..659635.19 rows=18564 width=38)
                                 Sort Key: nation.n_name
                                 ->  Parallel Hash Join  (cost=74318.92..658272.57 rows=18564 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=70627.33..652137.94 rows=465340 width=50)
                                             ->  Parallel Hash Join  (cost=70626.76..343094.28 rows=116358 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=27833.95..297828.84 rows=581793 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..27252.16 rows=2327172 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Parallel Hash  (cost=41855.38..41855.38 rows=74995 width=38)
                                                         ->  Hash Join  (cost=2.51..41855.38 rows=74995 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39696.76 rows=374976 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.56..2.62 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
(35 rows)

query 5 run 5
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=660834.30..660834.30 rows=1 width=58)
   ->  Sort  (cost=660834.30..660834.36 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=660588.84..660834.18 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=660588.84..660833.11 rows=100 width=58)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=659588.78..659821.15 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=659588.78..659635.19 rows=18564 width=38)
                                 Sort Key: nation.n_name
                                 ->  Parallel Hash Join  (cost=74318.92..658272.57 rows=18564 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=70627.33..652137.94 rows=465340 width=50)
                                             ->  Parallel Hash Join  (cost=70626.76..343094.28 rows=116358 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=27833.95..297828.84 rows=581793 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..27252.16 rows=2327172 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Parallel Hash  (cost=41855.38..41855.38 rows=74995 width=38)
                                                         ->  Hash Join  (cost=2.51..41855.38 rows=74995 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39696.76 rows=374976 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.56..2.62 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
(35 rows)

query 6 run 1
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1360388.02..1360388.03 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1360388.02..1360388.03 rows=1 width=32)
         ->  Gather  (cost=1360387.59..1360388.00 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1359387.59..1359387.60 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=227326.41..1357915.60 rows=294398 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..227032.02 rows=1177591 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(9 rows)

query 6 run 2
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1360388.02..1360388.03 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1360388.02..1360388.03 rows=1 width=32)
         ->  Gather  (cost=1360387.59..1360388.00 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1359387.59..1359387.60 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=227326.41..1357915.60 rows=294398 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..227032.02 rows=1177591 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(9 rows)

query 6 run 3
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1360388.02..1360388.03 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1360388.02..1360388.03 rows=1 width=32)
         ->  Gather  (cost=1360387.59..1360388.00 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1359387.59..1359387.60 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=227326.41..1357915.60 rows=294398 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..227032.02 rows=1177591 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(9 rows)

query 6 run 4
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1360388.02..1360388.03 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1360388.02..1360388.03 rows=1 width=32)
         ->  Gather  (cost=1360387.59..1360388.00 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1359387.59..1359387.60 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=227326.41..1357915.60 rows=294398 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..227032.02 rows=1177591 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(9 rows)

query 6 run 5
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1360388.02..1360388.03 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1360388.02..1360388.03 rows=1 width=32)
         ->  Gather  (cost=1360387.59..1360388.00 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1359387.59..1359387.60 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=227326.41..1357915.60 rows=294398 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..227032.02 rows=1177591 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(9 rows)

query 7 run 1
SET
SET
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1421085.69..1422141.82 rows=1 width=116)
   ->  GroupAggregate  (cost=1421085.69..12028826.37 rows=10044 width=116)
         Group Key: n1.n_name, n2.n_name, EXTRACT(year FROM lineitem.l_shipdate)
         ->  Nested Loop  (cost=1421085.69..12027761.68 rows=60935 width=96)
               Join Filter: (customer.c_nationkey = n2.n_nationkey)
               ->  Nested Loop  (cost=1421085.26..8318197.11 rows=1523379 width=76)
                     ->  Gather Merge  (cost=1421084.83..1603486.07 rows=1523379 width=76)
                           Workers Planned: 4
                           ->  Sort  (cost=1420084.77..1421036.88 rows=380845 width=76)
                                 Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                                 ->  Parallel Hash Join  (cost=3140.96..1372695.14 rows=380845 width=76)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..1350111.97 rows=4587189 width=24)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                       ->  Parallel Hash  (cost=3079.76..3079.76 rows=4896 width=60)
                                             ->  Hash Join  (cost=2.87..3079.76 rows=4896 width=60)
                                                   Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                                   ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                                   ->  Hash  (cost=2.84..2.84 rows=2 width=60)
                                                         ->  Nested Loop  (cost=0.00..2.84 rows=2 width=60)
                                                               Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                                               ->  Materialize  (cost=0.00..1.39 rows=2 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                           Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                     ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.41 rows=1 width=8)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
               ->  Index Only Scan using q10_idx_1 on customer  (cost=0.43..2.42 rows=1 width=8)
                     Index Cond: (c_custkey = orders.o_custkey)
(30 rows)

query 7 run 2
SET
SET
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1421085.69..1422141.82 rows=1 width=116)
   ->  GroupAggregate  (cost=1421085.69..12028826.37 rows=10044 width=116)
         Group Key: n1.n_name, n2.n_name, EXTRACT(year FROM lineitem.l_shipdate)
         ->  Nested Loop  (cost=1421085.69..12027761.68 rows=60935 width=96)
               Join Filter: (customer.c_nationkey = n2.n_nationkey)
               ->  Nested Loop  (cost=1421085.26..8318197.11 rows=1523379 width=76)
                     ->  Gather Merge  (cost=1421084.83..1603486.07 rows=1523379 width=76)
                           Workers Planned: 4
                           ->  Sort  (cost=1420084.77..1421036.88 rows=380845 width=76)
                                 Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                                 ->  Parallel Hash Join  (cost=3140.96..1372695.14 rows=380845 width=76)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..1350111.97 rows=4587189 width=24)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                       ->  Parallel Hash  (cost=3079.76..3079.76 rows=4896 width=60)
                                             ->  Hash Join  (cost=2.87..3079.76 rows=4896 width=60)
                                                   Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                                   ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                                   ->  Hash  (cost=2.84..2.84 rows=2 width=60)
                                                         ->  Nested Loop  (cost=0.00..2.84 rows=2 width=60)
                                                               Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                                               ->  Materialize  (cost=0.00..1.39 rows=2 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                           Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                     ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.41 rows=1 width=8)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
               ->  Index Only Scan using q10_idx_1 on customer  (cost=0.43..2.42 rows=1 width=8)
                     Index Cond: (c_custkey = orders.o_custkey)
(30 rows)

query 7 run 3
SET
SET
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1421085.69..1422141.82 rows=1 width=116)
   ->  GroupAggregate  (cost=1421085.69..12028826.37 rows=10044 width=116)
         Group Key: n1.n_name, n2.n_name, EXTRACT(year FROM lineitem.l_shipdate)
         ->  Nested Loop  (cost=1421085.69..12027761.68 rows=60935 width=96)
               Join Filter: (customer.c_nationkey = n2.n_nationkey)
               ->  Nested Loop  (cost=1421085.26..8318197.11 rows=1523379 width=76)
                     ->  Gather Merge  (cost=1421084.83..1603486.07 rows=1523379 width=76)
                           Workers Planned: 4
                           ->  Sort  (cost=1420084.77..1421036.88 rows=380845 width=76)
                                 Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                                 ->  Parallel Hash Join  (cost=3140.96..1372695.14 rows=380845 width=76)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..1350111.97 rows=4587189 width=24)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                       ->  Parallel Hash  (cost=3079.76..3079.76 rows=4896 width=60)
                                             ->  Hash Join  (cost=2.87..3079.76 rows=4896 width=60)
                                                   Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                                   ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                                   ->  Hash  (cost=2.84..2.84 rows=2 width=60)
                                                         ->  Nested Loop  (cost=0.00..2.84 rows=2 width=60)
                                                               Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                                               ->  Materialize  (cost=0.00..1.39 rows=2 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                           Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                     ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.41 rows=1 width=8)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
               ->  Index Only Scan using q10_idx_1 on customer  (cost=0.43..2.42 rows=1 width=8)
                     Index Cond: (c_custkey = orders.o_custkey)
(30 rows)

query 7 run 4
SET
SET
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1421085.69..1422141.82 rows=1 width=116)
   ->  GroupAggregate  (cost=1421085.69..12028826.37 rows=10044 width=116)
         Group Key: n1.n_name, n2.n_name, EXTRACT(year FROM lineitem.l_shipdate)
         ->  Nested Loop  (cost=1421085.69..12027761.68 rows=60935 width=96)
               Join Filter: (customer.c_nationkey = n2.n_nationkey)
               ->  Nested Loop  (cost=1421085.26..8318197.11 rows=1523379 width=76)
                     ->  Gather Merge  (cost=1421084.83..1603486.07 rows=1523379 width=76)
                           Workers Planned: 4
                           ->  Sort  (cost=1420084.77..1421036.88 rows=380845 width=76)
                                 Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                                 ->  Parallel Hash Join  (cost=3140.96..1372695.14 rows=380845 width=76)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..1350111.97 rows=4587189 width=24)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                       ->  Parallel Hash  (cost=3079.76..3079.76 rows=4896 width=60)
                                             ->  Hash Join  (cost=2.87..3079.76 rows=4896 width=60)
                                                   Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                                   ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                                   ->  Hash  (cost=2.84..2.84 rows=2 width=60)
                                                         ->  Nested Loop  (cost=0.00..2.84 rows=2 width=60)
                                                               Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                                               ->  Materialize  (cost=0.00..1.39 rows=2 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                           Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                     ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.41 rows=1 width=8)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
               ->  Index Only Scan using q10_idx_1 on customer  (cost=0.43..2.42 rows=1 width=8)
                     Index Cond: (c_custkey = orders.o_custkey)
(30 rows)

query 7 run 5
SET
SET
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1421085.69..1422141.82 rows=1 width=116)
   ->  GroupAggregate  (cost=1421085.69..12028826.37 rows=10044 width=116)
         Group Key: n1.n_name, n2.n_name, EXTRACT(year FROM lineitem.l_shipdate)
         ->  Nested Loop  (cost=1421085.69..12027761.68 rows=60935 width=96)
               Join Filter: (customer.c_nationkey = n2.n_nationkey)
               ->  Nested Loop  (cost=1421085.26..8318197.11 rows=1523379 width=76)
                     ->  Gather Merge  (cost=1421084.83..1603486.07 rows=1523379 width=76)
                           Workers Planned: 4
                           ->  Sort  (cost=1420084.77..1421036.88 rows=380845 width=76)
                                 Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                                 ->  Parallel Hash Join  (cost=3140.96..1372695.14 rows=380845 width=76)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..1350111.97 rows=4587189 width=24)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                       ->  Parallel Hash  (cost=3079.76..3079.76 rows=4896 width=60)
                                             ->  Hash Join  (cost=2.87..3079.76 rows=4896 width=60)
                                                   Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                                   ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                                   ->  Hash  (cost=2.84..2.84 rows=2 width=60)
                                                         ->  Nested Loop  (cost=0.00..2.84 rows=2 width=60)
                                                               Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                                               ->  Materialize  (cost=0.00..1.39 rows=2 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                           Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                     ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.41 rows=1 width=8)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
               ->  Index Only Scan using q10_idx_1 on customer  (cost=0.43..2.42 rows=1 width=8)
                     Index Cond: (c_custkey = orders.o_custkey)
(30 rows)

query 8 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=384932.77..385087.79 rows=1 width=64)
   ->  GroupAggregate  (cost=384932.77..757912.90 rows=2406 width=64)
         Group Key: EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=384932.77..757380.80 rows=24199 width=70)
               ->  Nested Loop  (cost=384932.62..756699.65 rows=24199 width=20)
                     ->  Nested Loop  (cost=384932.20..698193.73 rows=24260 width=20)
                           Join Filter: (n1.n_regionkey = region.r_regionkey)
                           ->  Nested Loop  (cost=384932.20..696373.18 rows=121299 width=24)
                                 ->  Nested Loop  (cost=384932.05..693378.80 rows=121299 width=24)
                                       ->  Gather Merge  (cost=384931.63..399455.32 rows=121299 width=24)
                                             Workers Planned: 4
                                             ->  Sort  (cost=383931.57..384007.38 rows=30325 width=24)
                                                   Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                                                   ->  Parallel Hash Join  (cost=59806.55..381674.14 rows=30325 width=24)
                                                         Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                                         ->  Parallel Seq Scan on orders  (cost=0.00..317521.68 rows=1138693 width=12)
                                                               Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                         ->  Parallel Hash  (cost=58558.13..58558.13 rows=99874 width=20)
                                                               ->  Nested Loop  (cost=0.56..58558.13 rows=99874 width=20)
                                                                     ->  Parallel Seq Scan on part  (cost=0.00..47230.86 rows=3330 width=4)
                                                                           Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                                     ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.56..3.09 rows=31 width=24)
                                                                           Index Cond: (l_partkey = part.p_partkey)
                                       ->  Index Only Scan using q10_idx_1 on customer  (cost=0.43..2.42 rows=1 width=8)
                                             Index Cond: (c_custkey = orders.o_custkey)
                                 ->  Memoize  (cost=0.15..1.17 rows=1 width=8)
                                       Cache Key: customer.c_nationkey
                                       Cache Mode: logical
                                       ->  Index Scan using nation_pkey on nation n1  (cost=0.14..1.16 rows=1 width=8)
                                             Index Cond: (n_nationkey = customer.c_nationkey)
                           ->  Materialize  (cost=0.00..1.07 rows=1 width=4)
                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                       Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Index Only Scan using q2_idx_3 on supplier  (cost=0.42..2.41 rows=1 width=8)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
               ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                     Cache Key: supplier.s_nationkey
                     Cache Mode: logical
                     ->  Index Scan using nation_pkey on nation n2  (cost=0.14..1.16 rows=1 width=30)
                           Index Cond: (n_nationkey = supplier.s_nationkey)
(40 rows)

query 8 run 2
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=384932.77..385087.79 rows=1 width=64)
   ->  GroupAggregate  (cost=384932.77..757912.90 rows=2406 width=64)
         Group Key: EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=384932.77..757380.80 rows=24199 width=70)
               ->  Nested Loop  (cost=384932.62..756699.65 rows=24199 width=20)
                     ->  Nested Loop  (cost=384932.20..698193.73 rows=24260 width=20)
                           Join Filter: (n1.n_regionkey = region.r_regionkey)
                           ->  Nested Loop  (cost=384932.20..696373.18 rows=121299 width=24)
                                 ->  Nested Loop  (cost=384932.05..693378.80 rows=121299 width=24)
                                       ->  Gather Merge  (cost=384931.63..399455.32 rows=121299 width=24)
                                             Workers Planned: 4
                                             ->  Sort  (cost=383931.57..384007.38 rows=30325 width=24)
                                                   Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                                                   ->  Parallel Hash Join  (cost=59806.55..381674.14 rows=30325 width=24)
                                                         Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                                         ->  Parallel Seq Scan on orders  (cost=0.00..317521.68 rows=1138693 width=12)
                                                               Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                         ->  Parallel Hash  (cost=58558.13..58558.13 rows=99874 width=20)
                                                               ->  Nested Loop  (cost=0.56..58558.13 rows=99874 width=20)
                                                                     ->  Parallel Seq Scan on part  (cost=0.00..47230.86 rows=3330 width=4)
                                                                           Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                                     ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.56..3.09 rows=31 width=24)
                                                                           Index Cond: (l_partkey = part.p_partkey)
                                       ->  Index Only Scan using q10_idx_1 on customer  (cost=0.43..2.42 rows=1 width=8)
                                             Index Cond: (c_custkey = orders.o_custkey)
                                 ->  Memoize  (cost=0.15..1.17 rows=1 width=8)
                                       Cache Key: customer.c_nationkey
                                       Cache Mode: logical
                                       ->  Index Scan using nation_pkey on nation n1  (cost=0.14..1.16 rows=1 width=8)
                                             Index Cond: (n_nationkey = customer.c_nationkey)
                           ->  Materialize  (cost=0.00..1.07 rows=1 width=4)
                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                       Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Index Only Scan using q2_idx_3 on supplier  (cost=0.42..2.41 rows=1 width=8)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
               ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                     Cache Key: supplier.s_nationkey
                     Cache Mode: logical
                     ->  Index Scan using nation_pkey on nation n2  (cost=0.14..1.16 rows=1 width=30)
                           Index Cond: (n_nationkey = supplier.s_nationkey)
(40 rows)

query 8 run 3
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=384932.77..385087.79 rows=1 width=64)
   ->  GroupAggregate  (cost=384932.77..757912.90 rows=2406 width=64)
         Group Key: EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=384932.77..757380.80 rows=24199 width=70)
               ->  Nested Loop  (cost=384932.62..756699.65 rows=24199 width=20)
                     ->  Nested Loop  (cost=384932.20..698193.73 rows=24260 width=20)
                           Join Filter: (n1.n_regionkey = region.r_regionkey)
                           ->  Nested Loop  (cost=384932.20..696373.18 rows=121299 width=24)
                                 ->  Nested Loop  (cost=384932.05..693378.80 rows=121299 width=24)
                                       ->  Gather Merge  (cost=384931.63..399455.32 rows=121299 width=24)
                                             Workers Planned: 4
                                             ->  Sort  (cost=383931.57..384007.38 rows=30325 width=24)
                                                   Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                                                   ->  Parallel Hash Join  (cost=59806.55..381674.14 rows=30325 width=24)
                                                         Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                                         ->  Parallel Seq Scan on orders  (cost=0.00..317521.68 rows=1138693 width=12)
                                                               Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                         ->  Parallel Hash  (cost=58558.13..58558.13 rows=99874 width=20)
                                                               ->  Nested Loop  (cost=0.56..58558.13 rows=99874 width=20)
                                                                     ->  Parallel Seq Scan on part  (cost=0.00..47230.86 rows=3330 width=4)
                                                                           Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                                     ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.56..3.09 rows=31 width=24)
                                                                           Index Cond: (l_partkey = part.p_partkey)
                                       ->  Index Only Scan using q10_idx_1 on customer  (cost=0.43..2.42 rows=1 width=8)
                                             Index Cond: (c_custkey = orders.o_custkey)
                                 ->  Memoize  (cost=0.15..1.17 rows=1 width=8)
                                       Cache Key: customer.c_nationkey
                                       Cache Mode: logical
                                       ->  Index Scan using nation_pkey on nation n1  (cost=0.14..1.16 rows=1 width=8)
                                             Index Cond: (n_nationkey = customer.c_nationkey)
                           ->  Materialize  (cost=0.00..1.07 rows=1 width=4)
                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                       Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Index Only Scan using q2_idx_3 on supplier  (cost=0.42..2.41 rows=1 width=8)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
               ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                     Cache Key: supplier.s_nationkey
                     Cache Mode: logical
                     ->  Index Scan using nation_pkey on nation n2  (cost=0.14..1.16 rows=1 width=30)
                           Index Cond: (n_nationkey = supplier.s_nationkey)
(40 rows)

query 8 run 4
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=384932.77..385087.79 rows=1 width=64)
   ->  GroupAggregate  (cost=384932.77..757912.90 rows=2406 width=64)
         Group Key: EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=384932.77..757380.80 rows=24199 width=70)
               ->  Nested Loop  (cost=384932.62..756699.65 rows=24199 width=20)
                     ->  Nested Loop  (cost=384932.20..698193.73 rows=24260 width=20)
                           Join Filter: (n1.n_regionkey = region.r_regionkey)
                           ->  Nested Loop  (cost=384932.20..696373.18 rows=121299 width=24)
                                 ->  Nested Loop  (cost=384932.05..693378.80 rows=121299 width=24)
                                       ->  Gather Merge  (cost=384931.63..399455.32 rows=121299 width=24)
                                             Workers Planned: 4
                                             ->  Sort  (cost=383931.57..384007.38 rows=30325 width=24)
                                                   Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                                                   ->  Parallel Hash Join  (cost=59806.55..381674.14 rows=30325 width=24)
                                                         Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                                         ->  Parallel Seq Scan on orders  (cost=0.00..317521.68 rows=1138693 width=12)
                                                               Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                         ->  Parallel Hash  (cost=58558.13..58558.13 rows=99874 width=20)
                                                               ->  Nested Loop  (cost=0.56..58558.13 rows=99874 width=20)
                                                                     ->  Parallel Seq Scan on part  (cost=0.00..47230.86 rows=3330 width=4)
                                                                           Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                                     ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.56..3.09 rows=31 width=24)
                                                                           Index Cond: (l_partkey = part.p_partkey)
                                       ->  Index Only Scan using q10_idx_1 on customer  (cost=0.43..2.42 rows=1 width=8)
                                             Index Cond: (c_custkey = orders.o_custkey)
                                 ->  Memoize  (cost=0.15..1.17 rows=1 width=8)
                                       Cache Key: customer.c_nationkey
                                       Cache Mode: logical
                                       ->  Index Scan using nation_pkey on nation n1  (cost=0.14..1.16 rows=1 width=8)
                                             Index Cond: (n_nationkey = customer.c_nationkey)
                           ->  Materialize  (cost=0.00..1.07 rows=1 width=4)
                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                       Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Index Only Scan using q2_idx_3 on supplier  (cost=0.42..2.41 rows=1 width=8)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
               ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                     Cache Key: supplier.s_nationkey
                     Cache Mode: logical
                     ->  Index Scan using nation_pkey on nation n2  (cost=0.14..1.16 rows=1 width=30)
                           Index Cond: (n_nationkey = supplier.s_nationkey)
(40 rows)

query 8 run 5
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=384932.77..385087.79 rows=1 width=64)
   ->  GroupAggregate  (cost=384932.77..757912.90 rows=2406 width=64)
         Group Key: EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=384932.77..757380.80 rows=24199 width=70)
               ->  Nested Loop  (cost=384932.62..756699.65 rows=24199 width=20)
                     ->  Nested Loop  (cost=384932.20..698193.73 rows=24260 width=20)
                           Join Filter: (n1.n_regionkey = region.r_regionkey)
                           ->  Nested Loop  (cost=384932.20..696373.18 rows=121299 width=24)
                                 ->  Nested Loop  (cost=384932.05..693378.80 rows=121299 width=24)
                                       ->  Gather Merge  (cost=384931.63..399455.32 rows=121299 width=24)
                                             Workers Planned: 4
                                             ->  Sort  (cost=383931.57..384007.38 rows=30325 width=24)
                                                   Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                                                   ->  Parallel Hash Join  (cost=59806.55..381674.14 rows=30325 width=24)
                                                         Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                                         ->  Parallel Seq Scan on orders  (cost=0.00..317521.68 rows=1138693 width=12)
                                                               Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                         ->  Parallel Hash  (cost=58558.13..58558.13 rows=99874 width=20)
                                                               ->  Nested Loop  (cost=0.56..58558.13 rows=99874 width=20)
                                                                     ->  Parallel Seq Scan on part  (cost=0.00..47230.86 rows=3330 width=4)
                                                                           Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                                     ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.56..3.09 rows=31 width=24)
                                                                           Index Cond: (l_partkey = part.p_partkey)
                                       ->  Index Only Scan using q10_idx_1 on customer  (cost=0.43..2.42 rows=1 width=8)
                                             Index Cond: (c_custkey = orders.o_custkey)
                                 ->  Memoize  (cost=0.15..1.17 rows=1 width=8)
                                       Cache Key: customer.c_nationkey
                                       Cache Mode: logical
                                       ->  Index Scan using nation_pkey on nation n1  (cost=0.14..1.16 rows=1 width=8)
                                             Index Cond: (n_nationkey = customer.c_nationkey)
                           ->  Materialize  (cost=0.00..1.07 rows=1 width=4)
                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                       Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Index Only Scan using q2_idx_3 on supplier  (cost=0.42..2.41 rows=1 width=8)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
               ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                     Cache Key: supplier.s_nationkey
                     Cache Mode: logical
                     ->  Index Scan using nation_pkey on nation n2  (cost=0.14..1.16 rows=1 width=30)
                           Index Cond: (n_nationkey = supplier.s_nationkey)
(40 rows)

query 9 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=598833.23..598989.09 rows=1 width=90)
   ->  GroupAggregate  (cost=598833.23..9973583.39 rows=60150 width=90)
         Group Key: nation.n_name, EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=598833.23..9909213.10 rows=3626745 width=81)
               Join Filter: (supplier.s_suppkey = partsupp.ps_suppkey)
               ->  Gather Merge  (cost=598832.80..1033079.81 rows=3626745 width=63)
                     Workers Planned: 4
                     ->  Sort  (cost=597832.74..600099.46 rows=906686 width=63)
                           Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
                           ->  Hash Join  (cost=165880.96..483765.06 rows=906686 width=63)
                                 Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                 ->  Parallel Hash Join  (cost=165879.39..480979.98 rows=906686 width=41)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..298770.45 rows=3750245 width=8)
                                       ->  Parallel Hash  (cost=154545.82..154545.82 rows=906686 width=41)
                                             ->  Parallel Hash Join  (cost=3545.53..154545.82 rows=906686 width=41)
                                                   Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                                   ->  Nested Loop  (cost=0.99..148615.16 rows=908962 width=33)
                                                         ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.43..45556.07 rows=30302 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..3.09 rows=31 width=29)
                                                               Index Cond: (l_partkey = part.p_partkey)
                                                   ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                                         ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
               ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.43..2.43 rows=1 width=14)
                     Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
(28 rows)

query 9 run 2
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=598833.23..598989.09 rows=1 width=90)
   ->  GroupAggregate  (cost=598833.23..9973583.39 rows=60150 width=90)
         Group Key: nation.n_name, EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=598833.23..9909213.10 rows=3626745 width=81)
               Join Filter: (supplier.s_suppkey = partsupp.ps_suppkey)
               ->  Gather Merge  (cost=598832.80..1033079.81 rows=3626745 width=63)
                     Workers Planned: 4
                     ->  Sort  (cost=597832.74..600099.46 rows=906686 width=63)
                           Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
                           ->  Hash Join  (cost=165880.96..483765.06 rows=906686 width=63)
                                 Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                 ->  Parallel Hash Join  (cost=165879.39..480979.98 rows=906686 width=41)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..298770.45 rows=3750245 width=8)
                                       ->  Parallel Hash  (cost=154545.82..154545.82 rows=906686 width=41)
                                             ->  Parallel Hash Join  (cost=3545.53..154545.82 rows=906686 width=41)
                                                   Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                                   ->  Nested Loop  (cost=0.99..148615.16 rows=908962 width=33)
                                                         ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.43..45556.07 rows=30302 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..3.09 rows=31 width=29)
                                                               Index Cond: (l_partkey = part.p_partkey)
                                                   ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                                         ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
               ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.43..2.43 rows=1 width=14)
                     Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
(28 rows)

query 9 run 3
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=598833.23..598989.09 rows=1 width=90)
   ->  GroupAggregate  (cost=598833.23..9973583.39 rows=60150 width=90)
         Group Key: nation.n_name, EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=598833.23..9909213.10 rows=3626745 width=81)
               Join Filter: (supplier.s_suppkey = partsupp.ps_suppkey)
               ->  Gather Merge  (cost=598832.80..1033079.81 rows=3626745 width=63)
                     Workers Planned: 4
                     ->  Sort  (cost=597832.74..600099.46 rows=906686 width=63)
                           Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
                           ->  Hash Join  (cost=165880.96..483765.06 rows=906686 width=63)
                                 Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                 ->  Parallel Hash Join  (cost=165879.39..480979.98 rows=906686 width=41)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..298770.45 rows=3750245 width=8)
                                       ->  Parallel Hash  (cost=154545.82..154545.82 rows=906686 width=41)
                                             ->  Parallel Hash Join  (cost=3545.53..154545.82 rows=906686 width=41)
                                                   Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                                   ->  Nested Loop  (cost=0.99..148615.16 rows=908962 width=33)
                                                         ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.43..45556.07 rows=30302 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..3.09 rows=31 width=29)
                                                               Index Cond: (l_partkey = part.p_partkey)
                                                   ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                                         ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
               ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.43..2.43 rows=1 width=14)
                     Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
(28 rows)

query 9 run 4
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=598833.23..598989.09 rows=1 width=90)
   ->  GroupAggregate  (cost=598833.23..9973583.39 rows=60150 width=90)
         Group Key: nation.n_name, EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=598833.23..9909213.10 rows=3626745 width=81)
               Join Filter: (supplier.s_suppkey = partsupp.ps_suppkey)
               ->  Gather Merge  (cost=598832.80..1033079.81 rows=3626745 width=63)
                     Workers Planned: 4
                     ->  Sort  (cost=597832.74..600099.46 rows=906686 width=63)
                           Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
                           ->  Hash Join  (cost=165880.96..483765.06 rows=906686 width=63)
                                 Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                 ->  Parallel Hash Join  (cost=165879.39..480979.98 rows=906686 width=41)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..298770.45 rows=3750245 width=8)
                                       ->  Parallel Hash  (cost=154545.82..154545.82 rows=906686 width=41)
                                             ->  Parallel Hash Join  (cost=3545.53..154545.82 rows=906686 width=41)
                                                   Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                                   ->  Nested Loop  (cost=0.99..148615.16 rows=908962 width=33)
                                                         ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.43..45556.07 rows=30302 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..3.09 rows=31 width=29)
                                                               Index Cond: (l_partkey = part.p_partkey)
                                                   ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                                         ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
               ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.43..2.43 rows=1 width=14)
                     Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
(28 rows)

query 9 run 5
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=598833.23..598989.09 rows=1 width=90)
   ->  GroupAggregate  (cost=598833.23..9973583.39 rows=60150 width=90)
         Group Key: nation.n_name, EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=598833.23..9909213.10 rows=3626745 width=81)
               Join Filter: (supplier.s_suppkey = partsupp.ps_suppkey)
               ->  Gather Merge  (cost=598832.80..1033079.81 rows=3626745 width=63)
                     Workers Planned: 4
                     ->  Sort  (cost=597832.74..600099.46 rows=906686 width=63)
                           Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
                           ->  Hash Join  (cost=165880.96..483765.06 rows=906686 width=63)
                                 Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                 ->  Parallel Hash Join  (cost=165879.39..480979.98 rows=906686 width=41)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..298770.45 rows=3750245 width=8)
                                       ->  Parallel Hash  (cost=154545.82..154545.82 rows=906686 width=41)
                                             ->  Parallel Hash Join  (cost=3545.53..154545.82 rows=906686 width=41)
                                                   Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                                   ->  Nested Loop  (cost=0.99..148615.16 rows=908962 width=33)
                                                         ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.43..45556.07 rows=30302 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..3.09 rows=31 width=29)
                                                               Index Cond: (l_partkey = part.p_partkey)
                                                   ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                                         ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
               ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.43..2.43 rows=1 width=14)
                     Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
(28 rows)

query 10 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=781505.80..781505.85 rows=20 width=201)
   ->  Sort  (cost=781505.80..782873.79 rows=547193 width=201)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=687747.41..766945.19 rows=547193 width=201)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=687747.41..753265.37 rows=547193 width=181)
                     Workers Planned: 4
                     ->  Sort  (cost=686747.35..687089.35 rows=136798 width=181)
                           Sort Key: customer.c_custkey, nation.n_name
                           ->  Hash Join  (cost=631806.28..675077.33 rows=136798 width=181)
                                 Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                 ->  Parallel Hash Join  (cost=631804.72..674655.80 rows=136798 width=159)
                                       Hash Cond: (customer.c_custkey = orders.o_custkey)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..39696.76 rows=374976 width=147)
                                       ->  Parallel Hash  (cost=630094.74..630094.74 rows=136798 width=16)
                                             ->  Nested Loop  (cost=6687.59..630094.74 rows=136798 width=16)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=6687.03..270051.58 rows=139770 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6547.26 rows=559082 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                   ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.56..2.57 rows=1 width=16)
                                                         Index Cond: ((l_orderkey = orders.o_orderkey) AND (l_returnflag = 'R'::bpchar))
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(24 rows)

query 10 run 2
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=781505.80..781505.85 rows=20 width=201)
   ->  Sort  (cost=781505.80..782873.79 rows=547193 width=201)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=687747.41..766945.19 rows=547193 width=201)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=687747.41..753265.37 rows=547193 width=181)
                     Workers Planned: 4
                     ->  Sort  (cost=686747.35..687089.35 rows=136798 width=181)
                           Sort Key: customer.c_custkey, nation.n_name
                           ->  Hash Join  (cost=631806.28..675077.33 rows=136798 width=181)
                                 Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                 ->  Parallel Hash Join  (cost=631804.72..674655.80 rows=136798 width=159)
                                       Hash Cond: (customer.c_custkey = orders.o_custkey)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..39696.76 rows=374976 width=147)
                                       ->  Parallel Hash  (cost=630094.74..630094.74 rows=136798 width=16)
                                             ->  Nested Loop  (cost=6687.59..630094.74 rows=136798 width=16)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=6687.03..270051.58 rows=139770 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6547.26 rows=559082 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                   ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.56..2.57 rows=1 width=16)
                                                         Index Cond: ((l_orderkey = orders.o_orderkey) AND (l_returnflag = 'R'::bpchar))
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(24 rows)

query 10 run 3
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=781505.80..781505.85 rows=20 width=201)
   ->  Sort  (cost=781505.80..782873.79 rows=547193 width=201)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=687747.41..766945.19 rows=547193 width=201)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=687747.41..753265.37 rows=547193 width=181)
                     Workers Planned: 4
                     ->  Sort  (cost=686747.35..687089.35 rows=136798 width=181)
                           Sort Key: customer.c_custkey, nation.n_name
                           ->  Hash Join  (cost=631806.28..675077.33 rows=136798 width=181)
                                 Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                 ->  Parallel Hash Join  (cost=631804.72..674655.80 rows=136798 width=159)
                                       Hash Cond: (customer.c_custkey = orders.o_custkey)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..39696.76 rows=374976 width=147)
                                       ->  Parallel Hash  (cost=630094.74..630094.74 rows=136798 width=16)
                                             ->  Nested Loop  (cost=6687.59..630094.74 rows=136798 width=16)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=6687.03..270051.58 rows=139770 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6547.26 rows=559082 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                   ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.56..2.57 rows=1 width=16)
                                                         Index Cond: ((l_orderkey = orders.o_orderkey) AND (l_returnflag = 'R'::bpchar))
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(24 rows)

query 10 run 4
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=781505.80..781505.85 rows=20 width=201)
   ->  Sort  (cost=781505.80..782873.79 rows=547193 width=201)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=687747.41..766945.19 rows=547193 width=201)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=687747.41..753265.37 rows=547193 width=181)
                     Workers Planned: 4
                     ->  Sort  (cost=686747.35..687089.35 rows=136798 width=181)
                           Sort Key: customer.c_custkey, nation.n_name
                           ->  Hash Join  (cost=631806.28..675077.33 rows=136798 width=181)
                                 Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                 ->  Parallel Hash Join  (cost=631804.72..674655.80 rows=136798 width=159)
                                       Hash Cond: (customer.c_custkey = orders.o_custkey)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..39696.76 rows=374976 width=147)
                                       ->  Parallel Hash  (cost=630094.74..630094.74 rows=136798 width=16)
                                             ->  Nested Loop  (cost=6687.59..630094.74 rows=136798 width=16)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=6687.03..270051.58 rows=139770 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6547.26 rows=559082 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                   ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.56..2.57 rows=1 width=16)
                                                         Index Cond: ((l_orderkey = orders.o_orderkey) AND (l_returnflag = 'R'::bpchar))
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(24 rows)

query 10 run 5
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=781505.80..781505.85 rows=20 width=201)
   ->  Sort  (cost=781505.80..782873.79 rows=547193 width=201)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=687747.41..766945.19 rows=547193 width=201)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=687747.41..753265.37 rows=547193 width=181)
                     Workers Planned: 4
                     ->  Sort  (cost=686747.35..687089.35 rows=136798 width=181)
                           Sort Key: customer.c_custkey, nation.n_name
                           ->  Hash Join  (cost=631806.28..675077.33 rows=136798 width=181)
                                 Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                 ->  Parallel Hash Join  (cost=631804.72..674655.80 rows=136798 width=159)
                                       Hash Cond: (customer.c_custkey = orders.o_custkey)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..39696.76 rows=374976 width=147)
                                       ->  Parallel Hash  (cost=630094.74..630094.74 rows=136798 width=16)
                                             ->  Nested Loop  (cost=6687.59..630094.74 rows=136798 width=16)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=6687.03..270051.58 rows=139770 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6547.26 rows=559082 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                   ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.56..2.57 rows=1 width=16)
                                                         Index Cond: ((l_orderkey = orders.o_orderkey) AND (l_returnflag = 'R'::bpchar))
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(24 rows)

query 11 run 1
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=467663.96..467663.96 rows=1 width=36)
   InitPlan 1
     ->  Finalize Aggregate  (cost=207455.48..207455.50 rows=1 width=32)
           ->  Gather  (cost=207455.05..207455.46 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=206455.05..206455.06 rows=1 width=32)
                       ->  Hash Join  (cost=2341.31..205855.16 rows=79985 width=10)
                             Hash Cond: (partsupp_1.ps_suppkey = supplier_1.s_suppkey)
                             ->  Parallel Seq Scan on partsupp partsupp_1  (cost=0.00..195218.20 rows=1999620 width=14)
                             ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                                   ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                         ->  Bitmap Heap Scan on supplier supplier_1  (cost=39.29..2250.00 rows=4000 width=8)
                                               Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                                               ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                     Index Cond: (s_nationkey = nation_1.n_nationkey)
   ->  Sort  (cost=260208.46..260475.08 rows=106646 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  GroupAggregate  (cost=213368.97..259675.23 rows=106646 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               ->  Gather Merge  (cost=213368.97..251676.76 rows=319939 width=14)
                     Workers Planned: 4
                     ->  Sort  (cost=212368.92..212568.88 rows=79985 width=14)
                           Sort Key: partsupp.ps_partkey
                           ->  Hash Join  (cost=2341.31..205855.16 rows=79985 width=14)
                                 Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                 ->  Parallel Seq Scan on partsupp  (cost=0.00..195218.20 rows=1999620 width=18)
                                 ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                                       ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                             ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                             ->  Bitmap Heap Scan on supplier  (cost=39.29..2250.00 rows=4000 width=8)
                                                   Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                         Index Cond: (s_nationkey = nation.n_nationkey)
(37 rows)

query 11 run 2
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=467663.96..467663.96 rows=1 width=36)
   InitPlan 1
     ->  Finalize Aggregate  (cost=207455.48..207455.50 rows=1 width=32)
           ->  Gather  (cost=207455.05..207455.46 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=206455.05..206455.06 rows=1 width=32)
                       ->  Hash Join  (cost=2341.31..205855.16 rows=79985 width=10)
                             Hash Cond: (partsupp_1.ps_suppkey = supplier_1.s_suppkey)
                             ->  Parallel Seq Scan on partsupp partsupp_1  (cost=0.00..195218.20 rows=1999620 width=14)
                             ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                                   ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                         ->  Bitmap Heap Scan on supplier supplier_1  (cost=39.29..2250.00 rows=4000 width=8)
                                               Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                                               ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                     Index Cond: (s_nationkey = nation_1.n_nationkey)
   ->  Sort  (cost=260208.46..260475.08 rows=106646 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  GroupAggregate  (cost=213368.97..259675.23 rows=106646 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               ->  Gather Merge  (cost=213368.97..251676.76 rows=319939 width=14)
                     Workers Planned: 4
                     ->  Sort  (cost=212368.92..212568.88 rows=79985 width=14)
                           Sort Key: partsupp.ps_partkey
                           ->  Hash Join  (cost=2341.31..205855.16 rows=79985 width=14)
                                 Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                 ->  Parallel Seq Scan on partsupp  (cost=0.00..195218.20 rows=1999620 width=18)
                                 ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                                       ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                             ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                             ->  Bitmap Heap Scan on supplier  (cost=39.29..2250.00 rows=4000 width=8)
                                                   Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                         Index Cond: (s_nationkey = nation.n_nationkey)
(37 rows)

query 11 run 3
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=467663.96..467663.96 rows=1 width=36)
   InitPlan 1
     ->  Finalize Aggregate  (cost=207455.48..207455.50 rows=1 width=32)
           ->  Gather  (cost=207455.05..207455.46 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=206455.05..206455.06 rows=1 width=32)
                       ->  Hash Join  (cost=2341.31..205855.16 rows=79985 width=10)
                             Hash Cond: (partsupp_1.ps_suppkey = supplier_1.s_suppkey)
                             ->  Parallel Seq Scan on partsupp partsupp_1  (cost=0.00..195218.20 rows=1999620 width=14)
                             ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                                   ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                         ->  Bitmap Heap Scan on supplier supplier_1  (cost=39.29..2250.00 rows=4000 width=8)
                                               Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                                               ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                     Index Cond: (s_nationkey = nation_1.n_nationkey)
   ->  Sort  (cost=260208.46..260475.08 rows=106646 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  GroupAggregate  (cost=213368.97..259675.23 rows=106646 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               ->  Gather Merge  (cost=213368.97..251676.76 rows=319939 width=14)
                     Workers Planned: 4
                     ->  Sort  (cost=212368.92..212568.88 rows=79985 width=14)
                           Sort Key: partsupp.ps_partkey
                           ->  Hash Join  (cost=2341.31..205855.16 rows=79985 width=14)
                                 Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                 ->  Parallel Seq Scan on partsupp  (cost=0.00..195218.20 rows=1999620 width=18)
                                 ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                                       ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                             ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                             ->  Bitmap Heap Scan on supplier  (cost=39.29..2250.00 rows=4000 width=8)
                                                   Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                         Index Cond: (s_nationkey = nation.n_nationkey)
(37 rows)

query 11 run 4
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=467663.96..467663.96 rows=1 width=36)
   InitPlan 1
     ->  Finalize Aggregate  (cost=207455.48..207455.50 rows=1 width=32)
           ->  Gather  (cost=207455.05..207455.46 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=206455.05..206455.06 rows=1 width=32)
                       ->  Hash Join  (cost=2341.31..205855.16 rows=79985 width=10)
                             Hash Cond: (partsupp_1.ps_suppkey = supplier_1.s_suppkey)
                             ->  Parallel Seq Scan on partsupp partsupp_1  (cost=0.00..195218.20 rows=1999620 width=14)
                             ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                                   ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                         ->  Bitmap Heap Scan on supplier supplier_1  (cost=39.29..2250.00 rows=4000 width=8)
                                               Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                                               ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                     Index Cond: (s_nationkey = nation_1.n_nationkey)
   ->  Sort  (cost=260208.46..260475.08 rows=106646 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  GroupAggregate  (cost=213368.97..259675.23 rows=106646 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               ->  Gather Merge  (cost=213368.97..251676.76 rows=319939 width=14)
                     Workers Planned: 4
                     ->  Sort  (cost=212368.92..212568.88 rows=79985 width=14)
                           Sort Key: partsupp.ps_partkey
                           ->  Hash Join  (cost=2341.31..205855.16 rows=79985 width=14)
                                 Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                 ->  Parallel Seq Scan on partsupp  (cost=0.00..195218.20 rows=1999620 width=18)
                                 ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                                       ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                             ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                             ->  Bitmap Heap Scan on supplier  (cost=39.29..2250.00 rows=4000 width=8)
                                                   Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                         Index Cond: (s_nationkey = nation.n_nationkey)
(37 rows)

query 11 run 5
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=467663.96..467663.96 rows=1 width=36)
   InitPlan 1
     ->  Finalize Aggregate  (cost=207455.48..207455.50 rows=1 width=32)
           ->  Gather  (cost=207455.05..207455.46 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=206455.05..206455.06 rows=1 width=32)
                       ->  Hash Join  (cost=2341.31..205855.16 rows=79985 width=10)
                             Hash Cond: (partsupp_1.ps_suppkey = supplier_1.s_suppkey)
                             ->  Parallel Seq Scan on partsupp partsupp_1  (cost=0.00..195218.20 rows=1999620 width=14)
                             ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                                   ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                         ->  Bitmap Heap Scan on supplier supplier_1  (cost=39.29..2250.00 rows=4000 width=8)
                                               Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                                               ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                     Index Cond: (s_nationkey = nation_1.n_nationkey)
   ->  Sort  (cost=260208.46..260475.08 rows=106646 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  GroupAggregate  (cost=213368.97..259675.23 rows=106646 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               ->  Gather Merge  (cost=213368.97..251676.76 rows=319939 width=14)
                     Workers Planned: 4
                     ->  Sort  (cost=212368.92..212568.88 rows=79985 width=14)
                           Sort Key: partsupp.ps_partkey
                           ->  Hash Join  (cost=2341.31..205855.16 rows=79985 width=14)
                                 Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                 ->  Parallel Seq Scan on partsupp  (cost=0.00..195218.20 rows=1999620 width=18)
                                 ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                                       ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                             ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                             ->  Bitmap Heap Scan on supplier  (cost=39.29..2250.00 rows=4000 width=8)
                                                   Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                         Index Cond: (s_nationkey = nation.n_nationkey)
(37 rows)

query 12 run 1
SET
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=154158.16..338416.39 rows=1 width=27)
   ->  GroupAggregate  (cost=154158.16..1443965.74 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Nested Loop  (cost=154158.16..1438998.24 rows=283853 width=27)
               ->  Gather Merge  (cost=154157.73..188144.76 rows=283853 width=15)
                     Workers Planned: 4
                     ->  Sort  (cost=153157.67..153335.08 rows=70963 width=15)
                           Sort Key: lineitem.l_shipmode
                           ->  Parallel Index Only Scan using q12_idx_1 on lineitem  (cost=0.43..147439.90 rows=70963 width=15)
                                 Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
               ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.41 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
(12 rows)

query 12 run 2
SET
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=154158.16..338416.39 rows=1 width=27)
   ->  GroupAggregate  (cost=154158.16..1443965.74 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Nested Loop  (cost=154158.16..1438998.24 rows=283853 width=27)
               ->  Gather Merge  (cost=154157.73..188144.76 rows=283853 width=15)
                     Workers Planned: 4
                     ->  Sort  (cost=153157.67..153335.08 rows=70963 width=15)
                           Sort Key: lineitem.l_shipmode
                           ->  Parallel Index Only Scan using q12_idx_1 on lineitem  (cost=0.43..147439.90 rows=70963 width=15)
                                 Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
               ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.41 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
(12 rows)

query 12 run 3
SET
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=154158.16..338416.39 rows=1 width=27)
   ->  GroupAggregate  (cost=154158.16..1443965.74 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Nested Loop  (cost=154158.16..1438998.24 rows=283853 width=27)
               ->  Gather Merge  (cost=154157.73..188144.76 rows=283853 width=15)
                     Workers Planned: 4
                     ->  Sort  (cost=153157.67..153335.08 rows=70963 width=15)
                           Sort Key: lineitem.l_shipmode
                           ->  Parallel Index Only Scan using q12_idx_1 on lineitem  (cost=0.43..147439.90 rows=70963 width=15)
                                 Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
               ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.41 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
(12 rows)

query 12 run 4
SET
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=154158.16..338416.39 rows=1 width=27)
   ->  GroupAggregate  (cost=154158.16..1443965.74 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Nested Loop  (cost=154158.16..1438998.24 rows=283853 width=27)
               ->  Gather Merge  (cost=154157.73..188144.76 rows=283853 width=15)
                     Workers Planned: 4
                     ->  Sort  (cost=153157.67..153335.08 rows=70963 width=15)
                           Sort Key: lineitem.l_shipmode
                           ->  Parallel Index Only Scan using q12_idx_1 on lineitem  (cost=0.43..147439.90 rows=70963 width=15)
                                 Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
               ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.41 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
(12 rows)

query 12 run 5
SET
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=154158.16..338416.39 rows=1 width=27)
   ->  GroupAggregate  (cost=154158.16..1443965.74 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Nested Loop  (cost=154158.16..1438998.24 rows=283853 width=27)
               ->  Gather Merge  (cost=154157.73..188144.76 rows=283853 width=15)
                     Workers Planned: 4
                     ->  Sort  (cost=153157.67..153335.08 rows=70963 width=15)
                           Sort Key: lineitem.l_shipmode
                           ->  Parallel Index Only Scan using q12_idx_1 on lineitem  (cost=0.43..147439.90 rows=70963 width=15)
                                 Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
               ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.41 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
(12 rows)

query 13 run 1
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1421741.11..1421741.11 rows=1 width=16)
   ->  Sort  (cost=1421741.11..1421741.61 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1421738.11..1421740.11 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=1268229.13..1399239.55 rows=1499904 width=12)
                     Group Key: customer.c_custkey
                     Planned Partitions: 4
                     ->  Hash Right Join  (cost=55338.79..664969.98 rows=14849456 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..448780.26 rows=14849456 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=30730.99..30730.99 rows=1499904 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.43..30730.99 rows=1499904 width=4)
(14 rows)

query 13 run 2
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1421741.11..1421741.11 rows=1 width=16)
   ->  Sort  (cost=1421741.11..1421741.61 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1421738.11..1421740.11 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=1268229.13..1399239.55 rows=1499904 width=12)
                     Group Key: customer.c_custkey
                     Planned Partitions: 4
                     ->  Hash Right Join  (cost=55338.79..664969.98 rows=14849456 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..448780.26 rows=14849456 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=30730.99..30730.99 rows=1499904 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.43..30730.99 rows=1499904 width=4)
(14 rows)

query 13 run 3
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1421741.11..1421741.11 rows=1 width=16)
   ->  Sort  (cost=1421741.11..1421741.61 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1421738.11..1421740.11 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=1268229.13..1399239.55 rows=1499904 width=12)
                     Group Key: customer.c_custkey
                     Planned Partitions: 4
                     ->  Hash Right Join  (cost=55338.79..664969.98 rows=14849456 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..448780.26 rows=14849456 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=30730.99..30730.99 rows=1499904 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.43..30730.99 rows=1499904 width=4)
(14 rows)

query 13 run 4
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1421741.11..1421741.11 rows=1 width=16)
   ->  Sort  (cost=1421741.11..1421741.61 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1421738.11..1421740.11 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=1268229.13..1399239.55 rows=1499904 width=12)
                     Group Key: customer.c_custkey
                     Planned Partitions: 4
                     ->  Hash Right Join  (cost=55338.79..664969.98 rows=14849456 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..448780.26 rows=14849456 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=30730.99..30730.99 rows=1499904 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.43..30730.99 rows=1499904 width=4)
(14 rows)

query 13 run 5
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1421741.11..1421741.11 rows=1 width=16)
   ->  Sort  (cost=1421741.11..1421741.61 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1421738.11..1421740.11 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=1268229.13..1399239.55 rows=1499904 width=12)
                     Group Key: customer.c_custkey
                     Planned Partitions: 4
                     ->  Hash Right Join  (cost=55338.79..664969.98 rows=14849456 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..448780.26 rows=14849456 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=30730.99..30730.99 rows=1499904 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.43..30730.99 rows=1499904 width=4)
(14 rows)

query 14 run 1
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=960803.70..960803.71 rows=1 width=32)
   ->  Finalize Aggregate  (cost=960803.70..960803.71 rows=1 width=32)
         ->  Gather  (cost=960803.24..960803.65 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=959803.24..959803.25 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=66894.30..956231.96 rows=204073 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=14663.55..903465.52 rows=204073 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..14459.48 rows=816291 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=45980.89..45980.89 rows=499989 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..45980.89 rows=499989 width=25)
(13 rows)

query 14 run 2
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=960803.70..960803.71 rows=1 width=32)
   ->  Finalize Aggregate  (cost=960803.70..960803.71 rows=1 width=32)
         ->  Gather  (cost=960803.24..960803.65 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=959803.24..959803.25 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=66894.30..956231.96 rows=204073 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=14663.55..903465.52 rows=204073 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..14459.48 rows=816291 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=45980.89..45980.89 rows=499989 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..45980.89 rows=499989 width=25)
(13 rows)

query 14 run 3
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=960803.70..960803.71 rows=1 width=32)
   ->  Finalize Aggregate  (cost=960803.70..960803.71 rows=1 width=32)
         ->  Gather  (cost=960803.24..960803.65 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=959803.24..959803.25 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=66894.30..956231.96 rows=204073 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=14663.55..903465.52 rows=204073 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..14459.48 rows=816291 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=45980.89..45980.89 rows=499989 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..45980.89 rows=499989 width=25)
(13 rows)

query 14 run 4
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=960803.70..960803.71 rows=1 width=32)
   ->  Finalize Aggregate  (cost=960803.70..960803.71 rows=1 width=32)
         ->  Gather  (cost=960803.24..960803.65 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=959803.24..959803.25 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=66894.30..956231.96 rows=204073 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=14663.55..903465.52 rows=204073 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..14459.48 rows=816291 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=45980.89..45980.89 rows=499989 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..45980.89 rows=499989 width=25)
(13 rows)

query 14 run 5
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=960803.70..960803.71 rows=1 width=32)
   ->  Finalize Aggregate  (cost=960803.70..960803.71 rows=1 width=32)
         ->  Gather  (cost=960803.24..960803.65 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=959803.24..959803.25 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=66894.30..956231.96 rows=204073 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=14663.55..903465.52 rows=204073 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..14459.48 rows=816291 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=45980.89..45980.89 rows=499989 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..45980.89 rows=499989 width=25)
(13 rows)

query 15 run 1
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2738919.84..2739027.85 rows=1 width=104)
   InitPlan 1
     ->  Aggregate  (cost=1388103.10..1388103.11 rows=1 width=32)
           ->  Finalize HashAggregate  (cost=1385596.83..1386849.97 rows=100251 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather  (cost=1341235.76..1382589.30 rows=401004 width=36)
                       Workers Planned: 4
                       ->  Partial HashAggregate  (cost=1340235.76..1341488.90 rows=100251 width=36)
                             Group Key: lineitem_1.l_suppkey
                             ->  Parallel Bitmap Heap Scan on lineitem lineitem_1  (cost=39802.14..1334695.86 rows=553990 width=16)
                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..39248.15 rows=2215959 width=0)
                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=1350816.73..1404930.12 rows=501 width=104)
         ->  Finalize GroupAggregate  (cost=1350816.43..1403341.80 rows=501 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
               ->  Gather Merge  (cost=1350816.43..1398830.50 rows=401004 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=1349816.38..1350067.00 rows=100251 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=1340235.76..1341488.90 rows=100251 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=39802.14..1334695.86 rows=553990 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..39248.15 rows=2215959 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..3.16 rows=1 width=72)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
(29 rows)

DROP VIEW
query 15 run 2
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2738919.84..2739027.85 rows=1 width=104)
   InitPlan 1
     ->  Aggregate  (cost=1388103.10..1388103.11 rows=1 width=32)
           ->  Finalize HashAggregate  (cost=1385596.83..1386849.97 rows=100251 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather  (cost=1341235.76..1382589.30 rows=401004 width=36)
                       Workers Planned: 4
                       ->  Partial HashAggregate  (cost=1340235.76..1341488.90 rows=100251 width=36)
                             Group Key: lineitem_1.l_suppkey
                             ->  Parallel Bitmap Heap Scan on lineitem lineitem_1  (cost=39802.14..1334695.86 rows=553990 width=16)
                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..39248.15 rows=2215959 width=0)
                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=1350816.73..1404930.12 rows=501 width=104)
         ->  Finalize GroupAggregate  (cost=1350816.43..1403341.80 rows=501 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
               ->  Gather Merge  (cost=1350816.43..1398830.50 rows=401004 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=1349816.38..1350067.00 rows=100251 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=1340235.76..1341488.90 rows=100251 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=39802.14..1334695.86 rows=553990 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..39248.15 rows=2215959 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..3.16 rows=1 width=72)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
(29 rows)

DROP VIEW
query 15 run 3
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2738919.84..2739027.85 rows=1 width=104)
   InitPlan 1
     ->  Aggregate  (cost=1388103.10..1388103.11 rows=1 width=32)
           ->  Finalize HashAggregate  (cost=1385596.83..1386849.97 rows=100251 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather  (cost=1341235.76..1382589.30 rows=401004 width=36)
                       Workers Planned: 4
                       ->  Partial HashAggregate  (cost=1340235.76..1341488.90 rows=100251 width=36)
                             Group Key: lineitem_1.l_suppkey
                             ->  Parallel Bitmap Heap Scan on lineitem lineitem_1  (cost=39802.14..1334695.86 rows=553990 width=16)
                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..39248.15 rows=2215959 width=0)
                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=1350816.73..1404930.12 rows=501 width=104)
         ->  Finalize GroupAggregate  (cost=1350816.43..1403341.80 rows=501 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
               ->  Gather Merge  (cost=1350816.43..1398830.50 rows=401004 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=1349816.38..1350067.00 rows=100251 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=1340235.76..1341488.90 rows=100251 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=39802.14..1334695.86 rows=553990 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..39248.15 rows=2215959 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..3.16 rows=1 width=72)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
(29 rows)

DROP VIEW
query 15 run 4
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2738919.84..2739027.85 rows=1 width=104)
   InitPlan 1
     ->  Aggregate  (cost=1388103.10..1388103.11 rows=1 width=32)
           ->  Finalize HashAggregate  (cost=1385596.83..1386849.97 rows=100251 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather  (cost=1341235.76..1382589.30 rows=401004 width=36)
                       Workers Planned: 4
                       ->  Partial HashAggregate  (cost=1340235.76..1341488.90 rows=100251 width=36)
                             Group Key: lineitem_1.l_suppkey
                             ->  Parallel Bitmap Heap Scan on lineitem lineitem_1  (cost=39802.14..1334695.86 rows=553990 width=16)
                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..39248.15 rows=2215959 width=0)
                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=1350816.73..1404930.12 rows=501 width=104)
         ->  Finalize GroupAggregate  (cost=1350816.43..1403341.80 rows=501 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
               ->  Gather Merge  (cost=1350816.43..1398830.50 rows=401004 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=1349816.38..1350067.00 rows=100251 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=1340235.76..1341488.90 rows=100251 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=39802.14..1334695.86 rows=553990 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..39248.15 rows=2215959 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..3.16 rows=1 width=72)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
(29 rows)

DROP VIEW
query 15 run 5
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2738919.84..2739027.85 rows=1 width=104)
   InitPlan 1
     ->  Aggregate  (cost=1388103.10..1388103.11 rows=1 width=32)
           ->  Finalize HashAggregate  (cost=1385596.83..1386849.97 rows=100251 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather  (cost=1341235.76..1382589.30 rows=401004 width=36)
                       Workers Planned: 4
                       ->  Partial HashAggregate  (cost=1340235.76..1341488.90 rows=100251 width=36)
                             Group Key: lineitem_1.l_suppkey
                             ->  Parallel Bitmap Heap Scan on lineitem lineitem_1  (cost=39802.14..1334695.86 rows=553990 width=16)
                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..39248.15 rows=2215959 width=0)
                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=1350816.73..1404930.12 rows=501 width=104)
         ->  Finalize GroupAggregate  (cost=1350816.43..1403341.80 rows=501 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
               ->  Gather Merge  (cost=1350816.43..1398830.50 rows=401004 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=1349816.38..1350067.00 rows=100251 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=1340235.76..1341488.90 rows=100251 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=39802.14..1334695.86 rows=553990 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..39248.15 rows=2215959 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..3.16 rows=1 width=72)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
(29 rows)

DROP VIEW
query 16 run 1
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=261931.47..261931.47 rows=1 width=44)
   ->  Sort  (cost=261931.47..262314.91 rows=153377 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=183033.80..261164.59 rows=153377 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Gather Merge  (cost=183033.80..253726.69 rows=590413 width=40)
                     Workers Planned: 4
                     ->  Sort  (cost=182033.74..182402.75 rows=147603 width=40)
                           Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                           ->  Parallel Hash Join  (cost=57874.86..169361.02 rows=147603 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..112333.12 rows=999810 width=8)
                                       Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=53480.72..53480.72 rows=73814 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..53480.72 rows=73814 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 16 run 2
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=261931.47..261931.47 rows=1 width=44)
   ->  Sort  (cost=261931.47..262314.91 rows=153377 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=183033.80..261164.59 rows=153377 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Gather Merge  (cost=183033.80..253726.69 rows=590413 width=40)
                     Workers Planned: 4
                     ->  Sort  (cost=182033.74..182402.75 rows=147603 width=40)
                           Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                           ->  Parallel Hash Join  (cost=57874.86..169361.02 rows=147603 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..112333.12 rows=999810 width=8)
                                       Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=53480.72..53480.72 rows=73814 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..53480.72 rows=73814 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 16 run 3
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=261931.47..261931.47 rows=1 width=44)
   ->  Sort  (cost=261931.47..262314.91 rows=153377 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=183033.80..261164.59 rows=153377 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Gather Merge  (cost=183033.80..253726.69 rows=590413 width=40)
                     Workers Planned: 4
                     ->  Sort  (cost=182033.74..182402.75 rows=147603 width=40)
                           Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                           ->  Parallel Hash Join  (cost=57874.86..169361.02 rows=147603 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..112333.12 rows=999810 width=8)
                                       Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=53480.72..53480.72 rows=73814 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..53480.72 rows=73814 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 16 run 4
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=261931.47..261931.47 rows=1 width=44)
   ->  Sort  (cost=261931.47..262314.91 rows=153377 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=183033.80..261164.59 rows=153377 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Gather Merge  (cost=183033.80..253726.69 rows=590413 width=40)
                     Workers Planned: 4
                     ->  Sort  (cost=182033.74..182402.75 rows=147603 width=40)
                           Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                           ->  Parallel Hash Join  (cost=57874.86..169361.02 rows=147603 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..112333.12 rows=999810 width=8)
                                       Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=53480.72..53480.72 rows=73814 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..53480.72 rows=73814 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 16 run 5
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=261931.47..261931.47 rows=1 width=44)
   ->  Sort  (cost=261931.47..262314.91 rows=153377 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=183033.80..261164.59 rows=153377 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Gather Merge  (cost=183033.80..253726.69 rows=590413 width=40)
                     Workers Planned: 4
                     ->  Sort  (cost=182033.74..182402.75 rows=147603 width=40)
                           Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                           ->  Parallel Hash Join  (cost=57874.86..169361.02 rows=147603 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..112333.12 rows=999810 width=8)
                                       Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=53480.72..53480.72 rows=73814 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..53480.72 rows=73814 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(19 rows)

query 17 run 1
SET
SET
SET
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1747123.80..1747123.81 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1747123.80..1747123.81 rows=1 width=32)
         ->  Gather  (cost=1747123.37..1747123.78 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1746123.37..1746123.38 rows=1 width=32)
                     ->  Nested Loop  (cost=48503.65..1746111.49 rows=4750 width=8)
                           Join Filter: (part.p_partkey = lineitem.l_partkey)
                           ->  Merge Join  (cost=48503.09..1744649.16 rows=475 width=40)
                                 Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                                 ->  Sort  (cost=48502.52..48503.74 rows=486 width=4)
                                       Sort Key: part.p_partkey
                                       ->  Parallel Seq Scan on part  (cost=0.00..48480.83 rows=486 width=4)
                                             Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  GroupAggregate  (cost=0.56..1691249.97 rows=1955795 width=36)
                                       Group Key: lineitem_1.l_partkey
                                       ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.56..1361954.42 rows=59991724 width=9)
                           ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..2.95 rows=10 width=17)
                                 Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
(18 rows)

query 17 run 2
SET
SET
SET
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1747123.80..1747123.81 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1747123.80..1747123.81 rows=1 width=32)
         ->  Gather  (cost=1747123.37..1747123.78 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1746123.37..1746123.38 rows=1 width=32)
                     ->  Nested Loop  (cost=48503.65..1746111.49 rows=4750 width=8)
                           Join Filter: (part.p_partkey = lineitem.l_partkey)
                           ->  Merge Join  (cost=48503.09..1744649.16 rows=475 width=40)
                                 Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                                 ->  Sort  (cost=48502.52..48503.74 rows=486 width=4)
                                       Sort Key: part.p_partkey
                                       ->  Parallel Seq Scan on part  (cost=0.00..48480.83 rows=486 width=4)
                                             Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  GroupAggregate  (cost=0.56..1691249.97 rows=1955795 width=36)
                                       Group Key: lineitem_1.l_partkey
                                       ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.56..1361954.42 rows=59991724 width=9)
                           ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..2.95 rows=10 width=17)
                                 Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
(18 rows)

query 17 run 3
SET
SET
SET
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1747123.80..1747123.81 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1747123.80..1747123.81 rows=1 width=32)
         ->  Gather  (cost=1747123.37..1747123.78 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1746123.37..1746123.38 rows=1 width=32)
                     ->  Nested Loop  (cost=48503.65..1746111.49 rows=4750 width=8)
                           Join Filter: (part.p_partkey = lineitem.l_partkey)
                           ->  Merge Join  (cost=48503.09..1744649.16 rows=475 width=40)
                                 Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                                 ->  Sort  (cost=48502.52..48503.74 rows=486 width=4)
                                       Sort Key: part.p_partkey
                                       ->  Parallel Seq Scan on part  (cost=0.00..48480.83 rows=486 width=4)
                                             Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  GroupAggregate  (cost=0.56..1691249.97 rows=1955795 width=36)
                                       Group Key: lineitem_1.l_partkey
                                       ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.56..1361954.42 rows=59991724 width=9)
                           ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..2.95 rows=10 width=17)
                                 Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
(18 rows)

query 17 run 4
SET
SET
SET
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1747123.80..1747123.81 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1747123.80..1747123.81 rows=1 width=32)
         ->  Gather  (cost=1747123.37..1747123.78 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1746123.37..1746123.38 rows=1 width=32)
                     ->  Nested Loop  (cost=48503.65..1746111.49 rows=4750 width=8)
                           Join Filter: (part.p_partkey = lineitem.l_partkey)
                           ->  Merge Join  (cost=48503.09..1744649.16 rows=475 width=40)
                                 Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                                 ->  Sort  (cost=48502.52..48503.74 rows=486 width=4)
                                       Sort Key: part.p_partkey
                                       ->  Parallel Seq Scan on part  (cost=0.00..48480.83 rows=486 width=4)
                                             Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  GroupAggregate  (cost=0.56..1691249.97 rows=1955795 width=36)
                                       Group Key: lineitem_1.l_partkey
                                       ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.56..1361954.42 rows=59991724 width=9)
                           ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..2.95 rows=10 width=17)
                                 Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
(18 rows)

query 17 run 5
SET
SET
SET
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1747123.80..1747123.81 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1747123.80..1747123.81 rows=1 width=32)
         ->  Gather  (cost=1747123.37..1747123.78 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1746123.37..1746123.38 rows=1 width=32)
                     ->  Nested Loop  (cost=48503.65..1746111.49 rows=4750 width=8)
                           Join Filter: (part.p_partkey = lineitem.l_partkey)
                           ->  Merge Join  (cost=48503.09..1744649.16 rows=475 width=40)
                                 Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                                 ->  Sort  (cost=48502.52..48503.74 rows=486 width=4)
                                       Sort Key: part.p_partkey
                                       ->  Parallel Seq Scan on part  (cost=0.00..48480.83 rows=486 width=4)
                                             Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  GroupAggregate  (cost=0.56..1691249.97 rows=1955795 width=36)
                                       Group Key: lineitem_1.l_partkey
                                       ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.56..1361954.42 rows=59991724 width=9)
                           ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..2.95 rows=10 width=17)
                                 Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
(18 rows)

query 18 run 1
SET
SET
SET
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=6975525.42..6975525.67 rows=100 width=71)
   ->  Sort  (cost=6975525.42..7025508.36 rows=19993174 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=836907.76..6211400.69 rows=19993174 width=71)
               Group Key: orders.o_orderkey, customer.c_custkey
               ->  Incremental Sort  (cost=836907.76..5811537.21 rows=19993174 width=44)
                     Sort Key: orders.o_orderkey, customer.c_custkey
                     Presorted Key: orders.o_orderkey
                     ->  Merge Join  (cost=836907.46..5086571.13 rows=19993174 width=44)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Gather Merge  (cost=836746.59..3362571.82 rows=4999310 width=43)
                                 Workers Planned: 4
                                 ->  Merge Join  (cost=835746.53..2766105.75 rows=1249828 width=43)
                                       Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Sort  (cost=835745.97..845121.58 rows=3750245 width=39)
                                             Sort Key: orders.o_orderkey
                                             ->  Parallel Hash Join  (cost=44383.96..352998.84 rows=3750245 width=39)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..298770.45 rows=3750245 width=20)
                                                   ->  Parallel Hash  (cost=39696.76..39696.76 rows=374976 width=23)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..39696.76 rows=374976 width=23)
                                       ->  GroupAggregate  (cost=0.56..1886612.01 rows=4999310 width=4)
                                             Group Key: lineitem_1.l_orderkey
                                             Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                             ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.56..1361684.42 rows=59991724 width=9)
                           ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.56..1361684.42 rows=59991724 width=9)
(26 rows)

query 18 run 2
SET
SET
SET
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=6975525.42..6975525.67 rows=100 width=71)
   ->  Sort  (cost=6975525.42..7025508.36 rows=19993174 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=836907.76..6211400.69 rows=19993174 width=71)
               Group Key: orders.o_orderkey, customer.c_custkey
               ->  Incremental Sort  (cost=836907.76..5811537.21 rows=19993174 width=44)
                     Sort Key: orders.o_orderkey, customer.c_custkey
                     Presorted Key: orders.o_orderkey
                     ->  Merge Join  (cost=836907.46..5086571.13 rows=19993174 width=44)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Gather Merge  (cost=836746.59..3362571.82 rows=4999310 width=43)
                                 Workers Planned: 4
                                 ->  Merge Join  (cost=835746.53..2766105.75 rows=1249828 width=43)
                                       Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Sort  (cost=835745.97..845121.58 rows=3750245 width=39)
                                             Sort Key: orders.o_orderkey
                                             ->  Parallel Hash Join  (cost=44383.96..352998.84 rows=3750245 width=39)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..298770.45 rows=3750245 width=20)
                                                   ->  Parallel Hash  (cost=39696.76..39696.76 rows=374976 width=23)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..39696.76 rows=374976 width=23)
                                       ->  GroupAggregate  (cost=0.56..1886612.01 rows=4999310 width=4)
                                             Group Key: lineitem_1.l_orderkey
                                             Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                             ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.56..1361684.42 rows=59991724 width=9)
                           ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.56..1361684.42 rows=59991724 width=9)
(26 rows)

query 18 run 3
SET
SET
SET
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=6975525.42..6975525.67 rows=100 width=71)
   ->  Sort  (cost=6975525.42..7025508.36 rows=19993174 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=836907.76..6211400.69 rows=19993174 width=71)
               Group Key: orders.o_orderkey, customer.c_custkey
               ->  Incremental Sort  (cost=836907.76..5811537.21 rows=19993174 width=44)
                     Sort Key: orders.o_orderkey, customer.c_custkey
                     Presorted Key: orders.o_orderkey
                     ->  Merge Join  (cost=836907.46..5086571.13 rows=19993174 width=44)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Gather Merge  (cost=836746.59..3362571.82 rows=4999310 width=43)
                                 Workers Planned: 4
                                 ->  Merge Join  (cost=835746.53..2766105.75 rows=1249828 width=43)
                                       Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Sort  (cost=835745.97..845121.58 rows=3750245 width=39)
                                             Sort Key: orders.o_orderkey
                                             ->  Parallel Hash Join  (cost=44383.96..352998.84 rows=3750245 width=39)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..298770.45 rows=3750245 width=20)
                                                   ->  Parallel Hash  (cost=39696.76..39696.76 rows=374976 width=23)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..39696.76 rows=374976 width=23)
                                       ->  GroupAggregate  (cost=0.56..1886612.01 rows=4999310 width=4)
                                             Group Key: lineitem_1.l_orderkey
                                             Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                             ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.56..1361684.42 rows=59991724 width=9)
                           ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.56..1361684.42 rows=59991724 width=9)
(26 rows)

query 18 run 4
SET
SET
SET
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=6975525.42..6975525.67 rows=100 width=71)
   ->  Sort  (cost=6975525.42..7025508.36 rows=19993174 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=836907.76..6211400.69 rows=19993174 width=71)
               Group Key: orders.o_orderkey, customer.c_custkey
               ->  Incremental Sort  (cost=836907.76..5811537.21 rows=19993174 width=44)
                     Sort Key: orders.o_orderkey, customer.c_custkey
                     Presorted Key: orders.o_orderkey
                     ->  Merge Join  (cost=836907.46..5086571.13 rows=19993174 width=44)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Gather Merge  (cost=836746.59..3362571.82 rows=4999310 width=43)
                                 Workers Planned: 4
                                 ->  Merge Join  (cost=835746.53..2766105.75 rows=1249828 width=43)
                                       Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Sort  (cost=835745.97..845121.58 rows=3750245 width=39)
                                             Sort Key: orders.o_orderkey
                                             ->  Parallel Hash Join  (cost=44383.96..352998.84 rows=3750245 width=39)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..298770.45 rows=3750245 width=20)
                                                   ->  Parallel Hash  (cost=39696.76..39696.76 rows=374976 width=23)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..39696.76 rows=374976 width=23)
                                       ->  GroupAggregate  (cost=0.56..1886612.01 rows=4999310 width=4)
                                             Group Key: lineitem_1.l_orderkey
                                             Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                             ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.56..1361684.42 rows=59991724 width=9)
                           ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.56..1361684.42 rows=59991724 width=9)
(26 rows)

query 18 run 5
SET
SET
SET
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=6975525.42..6975525.67 rows=100 width=71)
   ->  Sort  (cost=6975525.42..7025508.36 rows=19993174 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=836907.76..6211400.69 rows=19993174 width=71)
               Group Key: orders.o_orderkey, customer.c_custkey
               ->  Incremental Sort  (cost=836907.76..5811537.21 rows=19993174 width=44)
                     Sort Key: orders.o_orderkey, customer.c_custkey
                     Presorted Key: orders.o_orderkey
                     ->  Merge Join  (cost=836907.46..5086571.13 rows=19993174 width=44)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Gather Merge  (cost=836746.59..3362571.82 rows=4999310 width=43)
                                 Workers Planned: 4
                                 ->  Merge Join  (cost=835746.53..2766105.75 rows=1249828 width=43)
                                       Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Sort  (cost=835745.97..845121.58 rows=3750245 width=39)
                                             Sort Key: orders.o_orderkey
                                             ->  Parallel Hash Join  (cost=44383.96..352998.84 rows=3750245 width=39)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..298770.45 rows=3750245 width=20)
                                                   ->  Parallel Hash  (cost=39696.76..39696.76 rows=374976 width=23)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..39696.76 rows=374976 width=23)
                                       ->  GroupAggregate  (cost=0.56..1886612.01 rows=4999310 width=4)
                                             Group Key: lineitem_1.l_orderkey
                                             Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                             ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.56..1361684.42 rows=59991724 width=9)
                           ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.56..1361684.42 rows=59991724 width=9)
(26 rows)

query 19 run 1
SET
SET
SET


 Limit  (cost=69578.32..69578.33 rows=1 width=32)
   ->  Finalize Aggregate  (cost=69578.32..69578.33 rows=1 width=32)
         ->  Gather  (cost=69577.89..69578.30 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=68577.89..68577.90 rows=1 width=32)
                     ->  Nested Loop  (cost=0.56..68575.76 rows=283 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..62230.53 rows=1218 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..5.20 rows=1 width=21)
                                 Index Cond: ((l_partkey = part.p_partkey) AND (l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                                 Filter: ((((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 19 run 2
SET
SET
SET


 Limit  (cost=69578.32..69578.33 rows=1 width=32)
   ->  Finalize Aggregate  (cost=69578.32..69578.33 rows=1 width=32)
         ->  Gather  (cost=69577.89..69578.30 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=68577.89..68577.90 rows=1 width=32)
                     ->  Nested Loop  (cost=0.56..68575.76 rows=283 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..62230.53 rows=1218 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..5.20 rows=1 width=21)
                                 Index Cond: ((l_partkey = part.p_partkey) AND (l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                                 Filter: ((((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 19 run 3
SET
SET
SET


 Limit  (cost=69578.32..69578.33 rows=1 width=32)
   ->  Finalize Aggregate  (cost=69578.32..69578.33 rows=1 width=32)
         ->  Gather  (cost=69577.89..69578.30 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=68577.89..68577.90 rows=1 width=32)
                     ->  Nested Loop  (cost=0.56..68575.76 rows=283 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..62230.53 rows=1218 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..5.20 rows=1 width=21)
                                 Index Cond: ((l_partkey = part.p_partkey) AND (l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                                 Filter: ((((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 19 run 4
SET
SET
SET


 Limit  (cost=69578.32..69578.33 rows=1 width=32)
   ->  Finalize Aggregate  (cost=69578.32..69578.33 rows=1 width=32)
         ->  Gather  (cost=69577.89..69578.30 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=68577.89..68577.90 rows=1 width=32)
                     ->  Nested Loop  (cost=0.56..68575.76 rows=283 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..62230.53 rows=1218 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..5.20 rows=1 width=21)
                                 Index Cond: ((l_partkey = part.p_partkey) AND (l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                                 Filter: ((((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 19 run 5
SET
SET
SET
                                                                                                                                                                                                                                                                                                                                                                                                                                                              QUERY PLAN                                                                                                                                                                                                                                                                                                                                                                                                                                                              

 Limit  (cost=69578.32..69578.33 rows=1 width=32)
   ->  Finalize Aggregate  (cost=69578.32..69578.33 rows=1 width=32)
         ->  Gather  (cost=69577.89..69578.30 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=68577.89..68577.90 rows=1 width=32)
                     ->  Nested Loop  (cost=0.56..68575.76 rows=283 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..62230.53 rows=1218 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..5.20 rows=1 width=21)
                                 Index Cond: ((l_partkey = part.p_partkey) AND (l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                                 Filter: ((((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 20 run 1
SET
SET
SET
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2533542.62..2733997.53 rows=1 width=52)
   ->  Nested Loop Semi Join  (cost=2533542.62..2733997.53 rows=1 width=52)
         Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
         ->  Gather Merge  (cost=4122.93..4578.81 rows=4000 width=56)
               Workers Planned: 1
               ->  Sort  (cost=3122.92..3128.80 rows=2353 width=56)
                     Sort Key: supplier.s_name
                     ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=56)
                           Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=60)
                           ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'IRAQ'::bpchar)
         ->  Materialize  (cost=2529419.69..2729238.72 rows=3 width=8)
               ->  Hash Join  (cost=2529419.69..2729238.71 rows=3 width=8)
                     Hash Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                     Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                     ->  HashAggregate  (cost=2459417.87..2622696.84 rows=4871989 width=40)
                           Group Key: lineitem.l_partkey, lineitem.l_suppkey
                           Planned Partitions: 32
                           ->  Seq Scan on lineitem  (cost=0.00..2025018.86 rows=9236391 width=13)
                                 Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                     ->  Hash  (cost=68789.91..68789.91 rows=80794 width=16)
                           ->  Gather  (cost=1000.86..68789.91 rows=80794 width=16)
                                 Workers Planned: 4
                                 ->  Nested Loop  (cost=0.86..59710.51 rows=20198 width=16)
                                       ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.43..45556.07 rows=5050 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.43..2.62 rows=18 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
(30 rows)

query 20 run 2
SET
SET
SET
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2533542.62..2733997.53 rows=1 width=52)
   ->  Nested Loop Semi Join  (cost=2533542.62..2733997.53 rows=1 width=52)
         Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
         ->  Gather Merge  (cost=4122.93..4578.81 rows=4000 width=56)
               Workers Planned: 1
               ->  Sort  (cost=3122.92..3128.80 rows=2353 width=56)
                     Sort Key: supplier.s_name
                     ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=56)
                           Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=60)
                           ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'IRAQ'::bpchar)
         ->  Materialize  (cost=2529419.69..2729238.72 rows=3 width=8)
               ->  Hash Join  (cost=2529419.69..2729238.71 rows=3 width=8)
                     Hash Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                     Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                     ->  HashAggregate  (cost=2459417.87..2622696.84 rows=4871989 width=40)
                           Group Key: lineitem.l_partkey, lineitem.l_suppkey
                           Planned Partitions: 32
                           ->  Seq Scan on lineitem  (cost=0.00..2025018.86 rows=9236391 width=13)
                                 Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                     ->  Hash  (cost=68789.91..68789.91 rows=80794 width=16)
                           ->  Gather  (cost=1000.86..68789.91 rows=80794 width=16)
                                 Workers Planned: 4
                                 ->  Nested Loop  (cost=0.86..59710.51 rows=20198 width=16)
                                       ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.43..45556.07 rows=5050 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.43..2.62 rows=18 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
(30 rows)

query 20 run 3
SET
SET
SET
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2533542.62..2733997.53 rows=1 width=52)
   ->  Nested Loop Semi Join  (cost=2533542.62..2733997.53 rows=1 width=52)
         Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
         ->  Gather Merge  (cost=4122.93..4578.81 rows=4000 width=56)
               Workers Planned: 1
               ->  Sort  (cost=3122.92..3128.80 rows=2353 width=56)
                     Sort Key: supplier.s_name
                     ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=56)
                           Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=60)
                           ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'IRAQ'::bpchar)
         ->  Materialize  (cost=2529419.69..2729238.72 rows=3 width=8)
               ->  Hash Join  (cost=2529419.69..2729238.71 rows=3 width=8)
                     Hash Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                     Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                     ->  HashAggregate  (cost=2459417.87..2622696.84 rows=4871989 width=40)
                           Group Key: lineitem.l_partkey, lineitem.l_suppkey
                           Planned Partitions: 32
                           ->  Seq Scan on lineitem  (cost=0.00..2025018.86 rows=9236391 width=13)
                                 Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                     ->  Hash  (cost=68789.91..68789.91 rows=80794 width=16)
                           ->  Gather  (cost=1000.86..68789.91 rows=80794 width=16)
                                 Workers Planned: 4
                                 ->  Nested Loop  (cost=0.86..59710.51 rows=20198 width=16)
                                       ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.43..45556.07 rows=5050 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.43..2.62 rows=18 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
(30 rows)

query 20 run 4
SET
SET
SET
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2533542.62..2733997.53 rows=1 width=52)
   ->  Nested Loop Semi Join  (cost=2533542.62..2733997.53 rows=1 width=52)
         Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
         ->  Gather Merge  (cost=4122.93..4578.81 rows=4000 width=56)
               Workers Planned: 1
               ->  Sort  (cost=3122.92..3128.80 rows=2353 width=56)
                     Sort Key: supplier.s_name
                     ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=56)
                           Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=60)
                           ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'IRAQ'::bpchar)
         ->  Materialize  (cost=2529419.69..2729238.72 rows=3 width=8)
               ->  Hash Join  (cost=2529419.69..2729238.71 rows=3 width=8)
                     Hash Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                     Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                     ->  HashAggregate  (cost=2459417.87..2622696.84 rows=4871989 width=40)
                           Group Key: lineitem.l_partkey, lineitem.l_suppkey
                           Planned Partitions: 32
                           ->  Seq Scan on lineitem  (cost=0.00..2025018.86 rows=9236391 width=13)
                                 Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                     ->  Hash  (cost=68789.91..68789.91 rows=80794 width=16)
                           ->  Gather  (cost=1000.86..68789.91 rows=80794 width=16)
                                 Workers Planned: 4
                                 ->  Nested Loop  (cost=0.86..59710.51 rows=20198 width=16)
                                       ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.43..45556.07 rows=5050 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.43..2.62 rows=18 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
(30 rows)

query 20 run 5
SET
SET
SET
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2533542.62..2733997.53 rows=1 width=52)
   ->  Nested Loop Semi Join  (cost=2533542.62..2733997.53 rows=1 width=52)
         Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
         ->  Gather Merge  (cost=4122.93..4578.81 rows=4000 width=56)
               Workers Planned: 1
               ->  Sort  (cost=3122.92..3128.80 rows=2353 width=56)
                     Sort Key: supplier.s_name
                     ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=56)
                           Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=60)
                           ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'IRAQ'::bpchar)
         ->  Materialize  (cost=2529419.69..2729238.72 rows=3 width=8)
               ->  Hash Join  (cost=2529419.69..2729238.71 rows=3 width=8)
                     Hash Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                     Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                     ->  HashAggregate  (cost=2459417.87..2622696.84 rows=4871989 width=40)
                           Group Key: lineitem.l_partkey, lineitem.l_suppkey
                           Planned Partitions: 32
                           ->  Seq Scan on lineitem  (cost=0.00..2025018.86 rows=9236391 width=13)
                                 Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                     ->  Hash  (cost=68789.91..68789.91 rows=80794 width=16)
                           ->  Gather  (cost=1000.86..68789.91 rows=80794 width=16)
                                 Workers Planned: 4
                                 ->  Nested Loop  (cost=0.86..59710.51 rows=20198 width=16)
                                       ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.43..45556.07 rows=5050 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.43..2.62 rows=18 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
(30 rows)

query 21 run 1
SET
SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=566022.29..566022.30 rows=1 width=34)
   ->  Sort  (cost=566022.29..566022.30 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=566022.26..566022.28 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=566022.26..566022.27 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=286438.20..566022.25 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=286437.64..566019.61 rows=1 width=38)
                                 ->  Gather  (cost=286437.20..566017.16 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Parallel Hash Right Anti Join  (cost=285437.20..565017.06 rows=1 width=34)
                                             Hash Cond: (l3.l_orderkey = l1.l_orderkey)
                                             Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                             ->  Parallel Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.56..260001.87 rows=4999310 width=8)
                                             ->  Parallel Hash  (cost=282943.24..282943.24 rows=199472 width=34)
                                                   ->  Parallel Hash Join  (cost=3021.13..282943.24 rows=199472 width=34)
                                                         Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                         ->  Parallel Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.56..260001.87 rows=4999310 width=8)
                                                         ->  Parallel Hash  (cost=2991.15..2991.15 rows=2353 width=30)
                                                               ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=30)
                                                                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                                     ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=34)
                                                                     ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                                 Filter: (n_name = 'PERU'::bpchar)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.45 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.56..2.63 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(31 rows)

query 21 run 2
SET
SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=566022.29..566022.30 rows=1 width=34)
   ->  Sort  (cost=566022.29..566022.30 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=566022.26..566022.28 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=566022.26..566022.27 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=286438.20..566022.25 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=286437.64..566019.61 rows=1 width=38)
                                 ->  Gather  (cost=286437.20..566017.16 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Parallel Hash Right Anti Join  (cost=285437.20..565017.06 rows=1 width=34)
                                             Hash Cond: (l3.l_orderkey = l1.l_orderkey)
                                             Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                             ->  Parallel Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.56..260001.87 rows=4999310 width=8)
                                             ->  Parallel Hash  (cost=282943.24..282943.24 rows=199472 width=34)
                                                   ->  Parallel Hash Join  (cost=3021.13..282943.24 rows=199472 width=34)
                                                         Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                         ->  Parallel Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.56..260001.87 rows=4999310 width=8)
                                                         ->  Parallel Hash  (cost=2991.15..2991.15 rows=2353 width=30)
                                                               ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=30)
                                                                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                                     ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=34)
                                                                     ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                                 Filter: (n_name = 'PERU'::bpchar)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.45 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.56..2.63 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(31 rows)

query 21 run 3
SET
SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=566022.29..566022.30 rows=1 width=34)
   ->  Sort  (cost=566022.29..566022.30 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=566022.26..566022.28 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=566022.26..566022.27 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=286438.20..566022.25 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=286437.64..566019.61 rows=1 width=38)
                                 ->  Gather  (cost=286437.20..566017.16 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Parallel Hash Right Anti Join  (cost=285437.20..565017.06 rows=1 width=34)
                                             Hash Cond: (l3.l_orderkey = l1.l_orderkey)
                                             Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                             ->  Parallel Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.56..260001.87 rows=4999310 width=8)
                                             ->  Parallel Hash  (cost=282943.24..282943.24 rows=199472 width=34)
                                                   ->  Parallel Hash Join  (cost=3021.13..282943.24 rows=199472 width=34)
                                                         Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                         ->  Parallel Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.56..260001.87 rows=4999310 width=8)
                                                         ->  Parallel Hash  (cost=2991.15..2991.15 rows=2353 width=30)
                                                               ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=30)
                                                                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                                     ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=34)
                                                                     ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                                 Filter: (n_name = 'PERU'::bpchar)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.45 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.56..2.63 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(31 rows)

query 21 run 4
SET
SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=566022.29..566022.30 rows=1 width=34)
   ->  Sort  (cost=566022.29..566022.30 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=566022.26..566022.28 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=566022.26..566022.27 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=286438.20..566022.25 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=286437.64..566019.61 rows=1 width=38)
                                 ->  Gather  (cost=286437.20..566017.16 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Parallel Hash Right Anti Join  (cost=285437.20..565017.06 rows=1 width=34)
                                             Hash Cond: (l3.l_orderkey = l1.l_orderkey)
                                             Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                             ->  Parallel Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.56..260001.87 rows=4999310 width=8)
                                             ->  Parallel Hash  (cost=282943.24..282943.24 rows=199472 width=34)
                                                   ->  Parallel Hash Join  (cost=3021.13..282943.24 rows=199472 width=34)
                                                         Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                         ->  Parallel Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.56..260001.87 rows=4999310 width=8)
                                                         ->  Parallel Hash  (cost=2991.15..2991.15 rows=2353 width=30)
                                                               ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=30)
                                                                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                                     ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=34)
                                                                     ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                                 Filter: (n_name = 'PERU'::bpchar)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.45 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.56..2.63 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(31 rows)

query 21 run 5
SET
SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=566022.29..566022.30 rows=1 width=34)
   ->  Sort  (cost=566022.29..566022.30 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=566022.26..566022.28 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=566022.26..566022.27 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=286438.20..566022.25 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=286437.64..566019.61 rows=1 width=38)
                                 ->  Gather  (cost=286437.20..566017.16 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Parallel Hash Right Anti Join  (cost=285437.20..565017.06 rows=1 width=34)
                                             Hash Cond: (l3.l_orderkey = l1.l_orderkey)
                                             Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                             ->  Parallel Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.56..260001.87 rows=4999310 width=8)
                                             ->  Parallel Hash  (cost=282943.24..282943.24 rows=199472 width=34)
                                                   ->  Parallel Hash Join  (cost=3021.13..282943.24 rows=199472 width=34)
                                                         Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                         ->  Parallel Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.56..260001.87 rows=4999310 width=8)
                                                         ->  Parallel Hash  (cost=2991.15..2991.15 rows=2353 width=30)
                                                               ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=30)
                                                                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                                     ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=34)
                                                                     ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                                 Filter: (n_name = 'PERU'::bpchar)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.45 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.56..2.63 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(31 rows)

query 22 run 1
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=93875.51..93877.39 rows=1 width=72)
   InitPlan 1
     ->  Finalize Aggregate  (cost=46820.31..46820.32 rows=1 width=32)
           ->  Gather  (cost=46819.88..46820.29 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=45819.88..45819.89 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..45790.12 rows=11902 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=47055.19..60609.17 rows=7218 width=72)
         Group Key: SUBSTRING(customer.c_phone FROM 1 FOR 2)
         ->  Nested Loop Anti Join  (cost=47055.19..60428.72 rows=7218 width=38)
               ->  Gather Merge  (cost=47054.76..49149.99 rows=17499 width=26)
                     Workers Planned: 4
                     ->  Sort  (cost=46054.70..46065.64 rows=4375 width=26)
                           Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                           ->  Parallel Seq Scan on customer  (cost=0.00..45790.12 rows=4375 width=26)
                                 Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
               ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.63 rows=17 width=4)
                     Index Cond: (o_custkey = customer.c_custkey)
(19 rows)

query 22 run 2
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=93875.51..93877.39 rows=1 width=72)
   InitPlan 1
     ->  Finalize Aggregate  (cost=46820.31..46820.32 rows=1 width=32)
           ->  Gather  (cost=46819.88..46820.29 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=45819.88..45819.89 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..45790.12 rows=11902 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=47055.19..60609.17 rows=7218 width=72)
         Group Key: SUBSTRING(customer.c_phone FROM 1 FOR 2)
         ->  Nested Loop Anti Join  (cost=47055.19..60428.72 rows=7218 width=38)
               ->  Gather Merge  (cost=47054.76..49149.99 rows=17499 width=26)
                     Workers Planned: 4
                     ->  Sort  (cost=46054.70..46065.64 rows=4375 width=26)
                           Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                           ->  Parallel Seq Scan on customer  (cost=0.00..45790.12 rows=4375 width=26)
                                 Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
               ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.63 rows=17 width=4)
                     Index Cond: (o_custkey = customer.c_custkey)
(19 rows)

query 22 run 3
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=93875.51..93877.39 rows=1 width=72)
   InitPlan 1
     ->  Finalize Aggregate  (cost=46820.31..46820.32 rows=1 width=32)
           ->  Gather  (cost=46819.88..46820.29 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=45819.88..45819.89 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..45790.12 rows=11902 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=47055.19..60609.17 rows=7218 width=72)
         Group Key: SUBSTRING(customer.c_phone FROM 1 FOR 2)
         ->  Nested Loop Anti Join  (cost=47055.19..60428.72 rows=7218 width=38)
               ->  Gather Merge  (cost=47054.76..49149.99 rows=17499 width=26)
                     Workers Planned: 4
                     ->  Sort  (cost=46054.70..46065.64 rows=4375 width=26)
                           Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                           ->  Parallel Seq Scan on customer  (cost=0.00..45790.12 rows=4375 width=26)
                                 Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
               ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.63 rows=17 width=4)
                     Index Cond: (o_custkey = customer.c_custkey)
(19 rows)

query 22 run 4
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=93875.51..93877.39 rows=1 width=72)
   InitPlan 1
     ->  Finalize Aggregate  (cost=46820.31..46820.32 rows=1 width=32)
           ->  Gather  (cost=46819.88..46820.29 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=45819.88..45819.89 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..45790.12 rows=11902 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=47055.19..60609.17 rows=7218 width=72)
         Group Key: SUBSTRING(customer.c_phone FROM 1 FOR 2)
         ->  Nested Loop Anti Join  (cost=47055.19..60428.72 rows=7218 width=38)
               ->  Gather Merge  (cost=47054.76..49149.99 rows=17499 width=26)
                     Workers Planned: 4
                     ->  Sort  (cost=46054.70..46065.64 rows=4375 width=26)
                           Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                           ->  Parallel Seq Scan on customer  (cost=0.00..45790.12 rows=4375 width=26)
                                 Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
               ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.63 rows=17 width=4)
                     Index Cond: (o_custkey = customer.c_custkey)
(19 rows)

query 22 run 5
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=93875.51..93877.39 rows=1 width=72)
   InitPlan 1
     ->  Finalize Aggregate  (cost=46820.31..46820.32 rows=1 width=32)
           ->  Gather  (cost=46819.88..46820.29 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=45819.88..45819.89 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..45790.12 rows=11902 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=47055.19..60609.17 rows=7218 width=72)
         Group Key: SUBSTRING(customer.c_phone FROM 1 FOR 2)
         ->  Nested Loop Anti Join  (cost=47055.19..60428.72 rows=7218 width=38)
               ->  Gather Merge  (cost=47054.76..49149.99 rows=17499 width=26)
                     Workers Planned: 4
                     ->  Sort  (cost=46054.70..46065.64 rows=4375 width=26)
                           Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                           ->  Parallel Seq Scan on customer  (cost=0.00..45790.12 rows=4375 width=26)
                                 Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
               ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.63 rows=17 width=4)
                     Index Cond: (o_custkey = customer.c_custkey)
(19 rows)

