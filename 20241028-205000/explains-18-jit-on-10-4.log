query 1 run 1
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1832673.92..1832674.56 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=1832673.92..1832677.74 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=1832673.92..1832676.79 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=1831673.86..1831673.88 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=1831673.65..1831673.78 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1312613.50 rows=14830290 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
 JIT:
   Functions: 10
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(14 rows)

query 1 run 2
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1832673.92..1832674.56 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=1832673.92..1832677.74 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=1832673.92..1832676.79 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=1831673.86..1831673.88 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=1831673.65..1831673.78 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1312613.50 rows=14830290 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
 JIT:
   Functions: 10
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(14 rows)

query 1 run 3
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1832673.92..1832674.56 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=1832673.92..1832677.74 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=1832673.92..1832676.79 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=1831673.86..1831673.88 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=1831673.65..1831673.78 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1312613.50 rows=14830290 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
 JIT:
   Functions: 10
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(14 rows)

query 1 run 4
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1832673.92..1832674.56 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=1832673.92..1832677.74 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=1832673.92..1832676.79 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=1831673.86..1831673.88 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=1831673.65..1831673.78 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1312613.50 rows=14830290 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
 JIT:
   Functions: 10
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(14 rows)

query 1 run 5
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1832673.92..1832674.56 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=1832673.92..1832677.74 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=1832673.92..1832676.79 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=1831673.86..1831673.88 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=1831673.65..1831673.78 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1312613.50 rows=14830290 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
 JIT:
   Functions: 10
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(14 rows)

query 2 run 1
SET
SET
SET
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=506871.69..506871.69 rows=1 width=192)
   ->  Sort  (cost=506871.69..506871.69 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=52.83..506871.68 rows=1 width=192)
               Join Filter: (supplier.s_nationkey = nation.n_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=52.83..506868.98 rows=1 width=170)
                     ->  Nested Loop  (cost=52.83..506868.98 rows=1 width=170)
                           Join Filter: (supplier.s_suppkey = partsupp.ps_suppkey)
                           ->  Nested Loop  (cost=52.83..502397.98 rows=1 width=34)
                                 ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..54341.51 rows=8221 width=30)
                                       Index Cond: (p_size = 16)
                                       Filter: ((p_type)::text ~~ '%NICKEL'::text)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=52.41..54.49 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=51.96..51.97 rows=1 width=32)
                                               ->  Nested Loop  (cost=2.41..51.95 rows=4 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Hash Join  (cost=2.41..50.65 rows=19 width=10)
                                                           Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                                           ->  Nested Loop  (cost=0.85..49.03 rows=19 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.43..2.77 rows=19 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.42..2.43 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                                                 ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
                           ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=144)
 JIT:
   Functions: 38
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(38 rows)

query 2 run 2
SET
SET
SET
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=506871.69..506871.69 rows=1 width=192)
   ->  Sort  (cost=506871.69..506871.69 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=52.83..506871.68 rows=1 width=192)
               Join Filter: (supplier.s_nationkey = nation.n_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=52.83..506868.98 rows=1 width=170)
                     ->  Nested Loop  (cost=52.83..506868.98 rows=1 width=170)
                           Join Filter: (supplier.s_suppkey = partsupp.ps_suppkey)
                           ->  Nested Loop  (cost=52.83..502397.98 rows=1 width=34)
                                 ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..54341.51 rows=8221 width=30)
                                       Index Cond: (p_size = 16)
                                       Filter: ((p_type)::text ~~ '%NICKEL'::text)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=52.41..54.49 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=51.96..51.97 rows=1 width=32)
                                               ->  Nested Loop  (cost=2.41..51.95 rows=4 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Hash Join  (cost=2.41..50.65 rows=19 width=10)
                                                           Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                                           ->  Nested Loop  (cost=0.85..49.03 rows=19 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.43..2.77 rows=19 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.42..2.43 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                                                 ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
                           ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=144)
 JIT:
   Functions: 38
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(38 rows)

query 2 run 3
SET
SET
SET
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=506871.69..506871.69 rows=1 width=192)
   ->  Sort  (cost=506871.69..506871.69 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=52.83..506871.68 rows=1 width=192)
               Join Filter: (supplier.s_nationkey = nation.n_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=52.83..506868.98 rows=1 width=170)
                     ->  Nested Loop  (cost=52.83..506868.98 rows=1 width=170)
                           Join Filter: (supplier.s_suppkey = partsupp.ps_suppkey)
                           ->  Nested Loop  (cost=52.83..502397.98 rows=1 width=34)
                                 ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..54341.51 rows=8221 width=30)
                                       Index Cond: (p_size = 16)
                                       Filter: ((p_type)::text ~~ '%NICKEL'::text)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=52.41..54.49 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=51.96..51.97 rows=1 width=32)
                                               ->  Nested Loop  (cost=2.41..51.95 rows=4 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Hash Join  (cost=2.41..50.65 rows=19 width=10)
                                                           Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                                           ->  Nested Loop  (cost=0.85..49.03 rows=19 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.43..2.77 rows=19 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.42..2.43 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                                                 ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
                           ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=144)
 JIT:
   Functions: 38
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(38 rows)

query 2 run 4
SET
SET
SET
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=506871.69..506871.69 rows=1 width=192)
   ->  Sort  (cost=506871.69..506871.69 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=52.83..506871.68 rows=1 width=192)
               Join Filter: (supplier.s_nationkey = nation.n_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=52.83..506868.98 rows=1 width=170)
                     ->  Nested Loop  (cost=52.83..506868.98 rows=1 width=170)
                           Join Filter: (supplier.s_suppkey = partsupp.ps_suppkey)
                           ->  Nested Loop  (cost=52.83..502397.98 rows=1 width=34)
                                 ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..54341.51 rows=8221 width=30)
                                       Index Cond: (p_size = 16)
                                       Filter: ((p_type)::text ~~ '%NICKEL'::text)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=52.41..54.49 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=51.96..51.97 rows=1 width=32)
                                               ->  Nested Loop  (cost=2.41..51.95 rows=4 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Hash Join  (cost=2.41..50.65 rows=19 width=10)
                                                           Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                                           ->  Nested Loop  (cost=0.85..49.03 rows=19 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.43..2.77 rows=19 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.42..2.43 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                                                 ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
                           ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=144)
 JIT:
   Functions: 38
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(38 rows)

query 2 run 5
SET
SET
SET
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=506871.69..506871.69 rows=1 width=192)
   ->  Sort  (cost=506871.69..506871.69 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=52.83..506871.68 rows=1 width=192)
               Join Filter: (supplier.s_nationkey = nation.n_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=52.83..506868.98 rows=1 width=170)
                     ->  Nested Loop  (cost=52.83..506868.98 rows=1 width=170)
                           Join Filter: (supplier.s_suppkey = partsupp.ps_suppkey)
                           ->  Nested Loop  (cost=52.83..502397.98 rows=1 width=34)
                                 ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..54341.51 rows=8221 width=30)
                                       Index Cond: (p_size = 16)
                                       Filter: ((p_type)::text ~~ '%NICKEL'::text)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=52.41..54.49 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=51.96..51.97 rows=1 width=32)
                                               ->  Nested Loop  (cost=2.41..51.95 rows=4 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Hash Join  (cost=2.41..50.65 rows=19 width=10)
                                                           Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                                           ->  Nested Loop  (cost=0.85..49.03 rows=19 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.43..2.77 rows=19 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.42..2.43 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                                                 ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
                           ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=144)
 JIT:
   Functions: 38
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(38 rows)

query 3 run 1
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2321075.44..2321075.46 rows=10 width=44)
   ->  Sort  (cost=2321075.44..2328893.56 rows=3127249 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=1793057.33..2253496.71 rows=3127249 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=1793057.33..2167497.37 rows=3127249 width=24)
                     Workers Planned: 4
                     ->  Sort  (cost=1792057.27..1794011.80 rows=781812 width=24)
                           Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Parallel Hash Join  (cost=358955.68..1704079.21 rows=781812 width=24)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Parallel Seq Scan on lineitem  (cost=0.00..1312613.50 rows=8148134 width=16)
                                       Filter: (l_shipdate > '1995-03-07'::date)
                                 ->  Parallel Hash  (cost=354457.99..354457.99 rows=359815 width=12)
                                       ->  Parallel Hash Join  (cost=41566.68..354457.99 rows=359815 width=12)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..308143.40 rows=1808722 width=16)
                                                   Filter: (o_orderdate < '1995-03-07'::date)
                                             ->  Parallel Hash  (cost=40634.23..40634.23 rows=74596 width=4)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..40634.23 rows=74596 width=4)
                                                         Filter: (c_mktsegment = 'BUILDING'::bpchar)
 JIT:
   Functions: 29
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(24 rows)

query 3 run 2
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2321075.44..2321075.46 rows=10 width=44)
   ->  Sort  (cost=2321075.44..2328893.56 rows=3127249 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=1793057.33..2253496.71 rows=3127249 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=1793057.33..2167497.37 rows=3127249 width=24)
                     Workers Planned: 4
                     ->  Sort  (cost=1792057.27..1794011.80 rows=781812 width=24)
                           Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Parallel Hash Join  (cost=358955.68..1704079.21 rows=781812 width=24)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Parallel Seq Scan on lineitem  (cost=0.00..1312613.50 rows=8148134 width=16)
                                       Filter: (l_shipdate > '1995-03-07'::date)
                                 ->  Parallel Hash  (cost=354457.99..354457.99 rows=359815 width=12)
                                       ->  Parallel Hash Join  (cost=41566.68..354457.99 rows=359815 width=12)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..308143.40 rows=1808722 width=16)
                                                   Filter: (o_orderdate < '1995-03-07'::date)
                                             ->  Parallel Hash  (cost=40634.23..40634.23 rows=74596 width=4)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..40634.23 rows=74596 width=4)
                                                         Filter: (c_mktsegment = 'BUILDING'::bpchar)
 JIT:
   Functions: 29
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(24 rows)

query 3 run 3
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2321075.44..2321075.46 rows=10 width=44)
   ->  Sort  (cost=2321075.44..2328893.56 rows=3127249 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=1793057.33..2253496.71 rows=3127249 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=1793057.33..2167497.37 rows=3127249 width=24)
                     Workers Planned: 4
                     ->  Sort  (cost=1792057.27..1794011.80 rows=781812 width=24)
                           Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Parallel Hash Join  (cost=358955.68..1704079.21 rows=781812 width=24)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Parallel Seq Scan on lineitem  (cost=0.00..1312613.50 rows=8148134 width=16)
                                       Filter: (l_shipdate > '1995-03-07'::date)
                                 ->  Parallel Hash  (cost=354457.99..354457.99 rows=359815 width=12)
                                       ->  Parallel Hash Join  (cost=41566.68..354457.99 rows=359815 width=12)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..308143.40 rows=1808722 width=16)
                                                   Filter: (o_orderdate < '1995-03-07'::date)
                                             ->  Parallel Hash  (cost=40634.23..40634.23 rows=74596 width=4)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..40634.23 rows=74596 width=4)
                                                         Filter: (c_mktsegment = 'BUILDING'::bpchar)
 JIT:
   Functions: 29
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(24 rows)

query 3 run 4
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2321075.44..2321075.46 rows=10 width=44)
   ->  Sort  (cost=2321075.44..2328893.56 rows=3127249 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=1793057.33..2253496.71 rows=3127249 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=1793057.33..2167497.37 rows=3127249 width=24)
                     Workers Planned: 4
                     ->  Sort  (cost=1792057.27..1794011.80 rows=781812 width=24)
                           Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Parallel Hash Join  (cost=358955.68..1704079.21 rows=781812 width=24)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Parallel Seq Scan on lineitem  (cost=0.00..1312613.50 rows=8148134 width=16)
                                       Filter: (l_shipdate > '1995-03-07'::date)
                                 ->  Parallel Hash  (cost=354457.99..354457.99 rows=359815 width=12)
                                       ->  Parallel Hash Join  (cost=41566.68..354457.99 rows=359815 width=12)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..308143.40 rows=1808722 width=16)
                                                   Filter: (o_orderdate < '1995-03-07'::date)
                                             ->  Parallel Hash  (cost=40634.23..40634.23 rows=74596 width=4)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..40634.23 rows=74596 width=4)
                                                         Filter: (c_mktsegment = 'BUILDING'::bpchar)
 JIT:
   Functions: 29
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(24 rows)

query 3 run 5
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2321075.44..2321075.46 rows=10 width=44)
   ->  Sort  (cost=2321075.44..2328893.56 rows=3127249 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=1793057.33..2253496.71 rows=3127249 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=1793057.33..2167497.37 rows=3127249 width=24)
                     Workers Planned: 4
                     ->  Sort  (cost=1792057.27..1794011.80 rows=781812 width=24)
                           Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Parallel Hash Join  (cost=358955.68..1704079.21 rows=781812 width=24)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Parallel Seq Scan on lineitem  (cost=0.00..1312613.50 rows=8148134 width=16)
                                       Filter: (l_shipdate > '1995-03-07'::date)
                                 ->  Parallel Hash  (cost=354457.99..354457.99 rows=359815 width=12)
                                       ->  Parallel Hash Join  (cost=41566.68..354457.99 rows=359815 width=12)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..308143.40 rows=1808722 width=16)
                                                   Filter: (o_orderdate < '1995-03-07'::date)
                                             ->  Parallel Hash  (cost=40634.23..40634.23 rows=74596 width=4)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..40634.23 rows=74596 width=4)
                                                         Filter: (c_mktsegment = 'BUILDING'::bpchar)
 JIT:
   Functions: 29
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(24 rows)

query 4 run 1
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=282223.96..528448.92 rows=1 width=24)
   ->  GroupAggregate  (cost=282223.96..1513348.76 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop Semi Join  (cost=282223.96..1510653.29 rows=539083 width=16)
               ->  Gather Merge  (cost=282223.52..346781.09 rows=539172 width=20)
                     Workers Planned: 4
                     ->  Sort  (cost=281223.47..281560.45 rows=134793 width=20)
                           Sort Key: orders.o_orderpriority
                           ->  Parallel Bitmap Heap Scan on orders  (cost=6448.95..269738.84 rows=134793 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6314.16 rows=539172 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
               ->  Index Only Scan using q4_idx_1 on lineitem  (cost=0.44..2.44 rows=1 width=4)
                     Index Cond: (l_orderkey = orders.o_orderkey)
 JIT:
   Functions: 10
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(17 rows)

query 4 run 2
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=282223.96..528448.92 rows=1 width=24)
   ->  GroupAggregate  (cost=282223.96..1513348.76 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop Semi Join  (cost=282223.96..1510653.29 rows=539083 width=16)
               ->  Gather Merge  (cost=282223.52..346781.09 rows=539172 width=20)
                     Workers Planned: 4
                     ->  Sort  (cost=281223.47..281560.45 rows=134793 width=20)
                           Sort Key: orders.o_orderpriority
                           ->  Parallel Bitmap Heap Scan on orders  (cost=6448.95..269738.84 rows=134793 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6314.16 rows=539172 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
               ->  Index Only Scan using q4_idx_1 on lineitem  (cost=0.44..2.44 rows=1 width=4)
                     Index Cond: (l_orderkey = orders.o_orderkey)
 JIT:
   Functions: 10
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(17 rows)

query 4 run 3
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=282223.96..528448.92 rows=1 width=24)
   ->  GroupAggregate  (cost=282223.96..1513348.76 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop Semi Join  (cost=282223.96..1510653.29 rows=539083 width=16)
               ->  Gather Merge  (cost=282223.52..346781.09 rows=539172 width=20)
                     Workers Planned: 4
                     ->  Sort  (cost=281223.47..281560.45 rows=134793 width=20)
                           Sort Key: orders.o_orderpriority
                           ->  Parallel Bitmap Heap Scan on orders  (cost=6448.95..269738.84 rows=134793 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6314.16 rows=539172 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
               ->  Index Only Scan using q4_idx_1 on lineitem  (cost=0.44..2.44 rows=1 width=4)
                     Index Cond: (l_orderkey = orders.o_orderkey)
 JIT:
   Functions: 10
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(17 rows)

query 4 run 4
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=282223.96..528448.92 rows=1 width=24)
   ->  GroupAggregate  (cost=282223.96..1513348.76 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop Semi Join  (cost=282223.96..1510653.29 rows=539083 width=16)
               ->  Gather Merge  (cost=282223.52..346781.09 rows=539172 width=20)
                     Workers Planned: 4
                     ->  Sort  (cost=281223.47..281560.45 rows=134793 width=20)
                           Sort Key: orders.o_orderpriority
                           ->  Parallel Bitmap Heap Scan on orders  (cost=6448.95..269738.84 rows=134793 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6314.16 rows=539172 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
               ->  Index Only Scan using q4_idx_1 on lineitem  (cost=0.44..2.44 rows=1 width=4)
                     Index Cond: (l_orderkey = orders.o_orderkey)
 JIT:
   Functions: 10
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(17 rows)

query 4 run 5
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=282223.96..528448.92 rows=1 width=24)
   ->  GroupAggregate  (cost=282223.96..1513348.76 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop Semi Join  (cost=282223.96..1510653.29 rows=539083 width=16)
               ->  Gather Merge  (cost=282223.52..346781.09 rows=539172 width=20)
                     Workers Planned: 4
                     ->  Sort  (cost=281223.47..281560.45 rows=134793 width=20)
                           Sort Key: orders.o_orderpriority
                           ->  Parallel Bitmap Heap Scan on orders  (cost=6448.95..269738.84 rows=134793 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6314.16 rows=539172 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
               ->  Index Only Scan using q4_idx_1 on lineitem  (cost=0.44..2.44 rows=1 width=4)
                     Index Cond: (l_orderkey = orders.o_orderkey)
 JIT:
   Functions: 10
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(17 rows)

query 5 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=656586.08..656586.08 rows=1 width=58)
   ->  Sort  (cost=656586.08..656586.14 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=656342.80..656585.95 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=656342.80..656584.89 rows=100 width=58)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=655342.74..655572.92 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=655342.74..655388.72 rows=18389 width=38)
                                 Sort Key: nation.n_name
                                 ->  Parallel Hash Join  (cost=73982.85..654040.20 rows=18389 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=70291.25..647934.99 rows=459736 width=50)
                                             ->  Parallel Hash Join  (cost=70290.69..342622.92 rows=114953 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=27497.81..297387.29 rows=574765 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..26923.05 rows=2299061 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Parallel Hash  (cost=41855.43..41855.43 rows=74996 width=38)
                                                         ->  Hash Join  (cost=2.51..41855.43 rows=74996 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39696.79 rows=374979 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.56..2.62 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
 JIT:
   Functions: 50
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(38 rows)

query 5 run 2
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=656586.08..656586.08 rows=1 width=58)
   ->  Sort  (cost=656586.08..656586.14 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=656342.80..656585.95 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=656342.80..656584.89 rows=100 width=58)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=655342.74..655572.92 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=655342.74..655388.72 rows=18389 width=38)
                                 Sort Key: nation.n_name
                                 ->  Parallel Hash Join  (cost=73982.85..654040.20 rows=18389 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=70291.25..647934.99 rows=459736 width=50)
                                             ->  Parallel Hash Join  (cost=70290.69..342622.92 rows=114953 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=27497.81..297387.29 rows=574765 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..26923.05 rows=2299061 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Parallel Hash  (cost=41855.43..41855.43 rows=74996 width=38)
                                                         ->  Hash Join  (cost=2.51..41855.43 rows=74996 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39696.79 rows=374979 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.56..2.62 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
 JIT:
   Functions: 50
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(38 rows)

query 5 run 3
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=656586.08..656586.08 rows=1 width=58)
   ->  Sort  (cost=656586.08..656586.14 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=656342.80..656585.95 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=656342.80..656584.89 rows=100 width=58)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=655342.74..655572.92 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=655342.74..655388.72 rows=18389 width=38)
                                 Sort Key: nation.n_name
                                 ->  Parallel Hash Join  (cost=73982.85..654040.20 rows=18389 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=70291.25..647934.99 rows=459736 width=50)
                                             ->  Parallel Hash Join  (cost=70290.69..342622.92 rows=114953 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=27497.81..297387.29 rows=574765 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..26923.05 rows=2299061 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Parallel Hash  (cost=41855.43..41855.43 rows=74996 width=38)
                                                         ->  Hash Join  (cost=2.51..41855.43 rows=74996 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39696.79 rows=374979 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.56..2.62 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
 JIT:
   Functions: 50
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(38 rows)

query 5 run 4
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=656586.08..656586.08 rows=1 width=58)
   ->  Sort  (cost=656586.08..656586.14 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=656342.80..656585.95 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=656342.80..656584.89 rows=100 width=58)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=655342.74..655572.92 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=655342.74..655388.72 rows=18389 width=38)
                                 Sort Key: nation.n_name
                                 ->  Parallel Hash Join  (cost=73982.85..654040.20 rows=18389 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=70291.25..647934.99 rows=459736 width=50)
                                             ->  Parallel Hash Join  (cost=70290.69..342622.92 rows=114953 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=27497.81..297387.29 rows=574765 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..26923.05 rows=2299061 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Parallel Hash  (cost=41855.43..41855.43 rows=74996 width=38)
                                                         ->  Hash Join  (cost=2.51..41855.43 rows=74996 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39696.79 rows=374979 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.56..2.62 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
 JIT:
   Functions: 50
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(38 rows)

query 5 run 5
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=656586.08..656586.08 rows=1 width=58)
   ->  Sort  (cost=656586.08..656586.14 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=656342.80..656585.95 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=656342.80..656584.89 rows=100 width=58)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=655342.74..655572.92 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=655342.74..655388.72 rows=18389 width=38)
                                 Sort Key: nation.n_name
                                 ->  Parallel Hash Join  (cost=73982.85..654040.20 rows=18389 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=70291.25..647934.99 rows=459736 width=50)
                                             ->  Parallel Hash Join  (cost=70290.69..342622.92 rows=114953 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=27497.81..297387.29 rows=574765 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..26923.05 rows=2299061 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Parallel Hash  (cost=41855.43..41855.43 rows=74996 width=38)
                                                         ->  Hash Join  (cost=2.51..41855.43 rows=74996 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39696.79 rows=374979 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.56..2.62 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
 JIT:
   Functions: 50
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(38 rows)

query 6 run 1
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1380576.51..1380576.52 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1380576.51..1380576.52 rows=1 width=32)
         ->  Gather  (cost=1380576.08..1380576.49 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1379576.08..1379576.09 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=232607.22..1378055.45 rows=304125 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..232303.10 rows=1216500 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
 JIT:
   Functions: 8
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(12 rows)

query 6 run 2
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1380576.51..1380576.52 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1380576.51..1380576.52 rows=1 width=32)
         ->  Gather  (cost=1380576.08..1380576.49 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1379576.08..1379576.09 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=232607.22..1378055.45 rows=304125 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..232303.10 rows=1216500 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
 JIT:
   Functions: 8
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(12 rows)

query 6 run 3
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1380576.51..1380576.52 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1380576.51..1380576.52 rows=1 width=32)
         ->  Gather  (cost=1380576.08..1380576.49 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1379576.08..1379576.09 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=232607.22..1378055.45 rows=304125 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..232303.10 rows=1216500 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
 JIT:
   Functions: 8
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(12 rows)

query 6 run 4
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1380576.51..1380576.52 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1380576.51..1380576.52 rows=1 width=32)
         ->  Gather  (cost=1380576.08..1380576.49 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1379576.08..1379576.09 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=232607.22..1378055.45 rows=304125 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..232303.10 rows=1216500 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
 JIT:
   Functions: 8
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(12 rows)

query 6 run 5
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1380576.51..1380576.52 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1380576.51..1380576.52 rows=1 width=32)
         ->  Gather  (cost=1380576.08..1380576.49 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1379576.08..1379576.09 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=232607.22..1378055.45 rows=304125 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..232303.10 rows=1216500 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
 JIT:
   Functions: 8
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(12 rows)

query 7 run 1
SET
SET
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1421230.62..1422291.33 rows=1 width=116)
   ->  GroupAggregate  (cost=1421230.62..12058042.50 rows=10028 width=116)
         Group Key: n1.n_name, n2.n_name, EXTRACT(year FROM lineitem.l_shipdate)
         ->  Nested Loop  (cost=1421230.62..12056975.55 rows=61102 width=96)
               Join Filter: (customer.c_nationkey = n2.n_nationkey)
               ->  Nested Loop  (cost=1421230.19..8337244.40 rows=1527554 width=76)
                     ->  Gather Merge  (cost=1421229.76..1604130.89 rows=1527554 width=76)
                           Workers Planned: 4
                           ->  Sort  (cost=1420229.70..1421184.42 rows=381888 width=76)
                                 Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                                 ->  Parallel Hash Join  (cost=3140.96..1372700.86 rows=381888 width=76)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..1350107.60 rows=4588240 width=24)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                       ->  Parallel Hash  (cost=3079.76..3079.76 rows=4896 width=60)
                                             ->  Hash Join  (cost=2.87..3079.76 rows=4896 width=60)
                                                   Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                                   ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                                   ->  Hash  (cost=2.84..2.84 rows=2 width=60)
                                                         ->  Nested Loop  (cost=0.00..2.84 rows=2 width=60)
                                                               Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                                               ->  Materialize  (cost=0.00..1.39 rows=2 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                           Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                     ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.41 rows=1 width=8)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
               ->  Index Only Scan using q10_idx_1 on customer  (cost=0.43..2.42 rows=1 width=8)
                     Index Cond: (c_custkey = orders.o_custkey)
 JIT:
   Functions: 44
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(33 rows)

query 7 run 2
SET
SET
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1421230.62..1422291.33 rows=1 width=116)
   ->  GroupAggregate  (cost=1421230.62..12058042.50 rows=10028 width=116)
         Group Key: n1.n_name, n2.n_name, EXTRACT(year FROM lineitem.l_shipdate)
         ->  Nested Loop  (cost=1421230.62..12056975.55 rows=61102 width=96)
               Join Filter: (customer.c_nationkey = n2.n_nationkey)
               ->  Nested Loop  (cost=1421230.19..8337244.40 rows=1527554 width=76)
                     ->  Gather Merge  (cost=1421229.76..1604130.89 rows=1527554 width=76)
                           Workers Planned: 4
                           ->  Sort  (cost=1420229.70..1421184.42 rows=381888 width=76)
                                 Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                                 ->  Parallel Hash Join  (cost=3140.96..1372700.86 rows=381888 width=76)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..1350107.60 rows=4588240 width=24)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                       ->  Parallel Hash  (cost=3079.76..3079.76 rows=4896 width=60)
                                             ->  Hash Join  (cost=2.87..3079.76 rows=4896 width=60)
                                                   Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                                   ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                                   ->  Hash  (cost=2.84..2.84 rows=2 width=60)
                                                         ->  Nested Loop  (cost=0.00..2.84 rows=2 width=60)
                                                               Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                                               ->  Materialize  (cost=0.00..1.39 rows=2 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                           Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                     ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.41 rows=1 width=8)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
               ->  Index Only Scan using q10_idx_1 on customer  (cost=0.43..2.42 rows=1 width=8)
                     Index Cond: (c_custkey = orders.o_custkey)
 JIT:
   Functions: 44
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(33 rows)

query 7 run 3
SET
SET
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1421230.62..1422291.33 rows=1 width=116)
   ->  GroupAggregate  (cost=1421230.62..12058042.50 rows=10028 width=116)
         Group Key: n1.n_name, n2.n_name, EXTRACT(year FROM lineitem.l_shipdate)
         ->  Nested Loop  (cost=1421230.62..12056975.55 rows=61102 width=96)
               Join Filter: (customer.c_nationkey = n2.n_nationkey)
               ->  Nested Loop  (cost=1421230.19..8337244.40 rows=1527554 width=76)
                     ->  Gather Merge  (cost=1421229.76..1604130.89 rows=1527554 width=76)
                           Workers Planned: 4
                           ->  Sort  (cost=1420229.70..1421184.42 rows=381888 width=76)
                                 Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                                 ->  Parallel Hash Join  (cost=3140.96..1372700.86 rows=381888 width=76)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..1350107.60 rows=4588240 width=24)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                       ->  Parallel Hash  (cost=3079.76..3079.76 rows=4896 width=60)
                                             ->  Hash Join  (cost=2.87..3079.76 rows=4896 width=60)
                                                   Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                                   ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                                   ->  Hash  (cost=2.84..2.84 rows=2 width=60)
                                                         ->  Nested Loop  (cost=0.00..2.84 rows=2 width=60)
                                                               Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                                               ->  Materialize  (cost=0.00..1.39 rows=2 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                           Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                     ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.41 rows=1 width=8)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
               ->  Index Only Scan using q10_idx_1 on customer  (cost=0.43..2.42 rows=1 width=8)
                     Index Cond: (c_custkey = orders.o_custkey)
 JIT:
   Functions: 44
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(33 rows)

query 7 run 4
SET
SET
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1421230.62..1422291.33 rows=1 width=116)
   ->  GroupAggregate  (cost=1421230.62..12058042.50 rows=10028 width=116)
         Group Key: n1.n_name, n2.n_name, EXTRACT(year FROM lineitem.l_shipdate)
         ->  Nested Loop  (cost=1421230.62..12056975.55 rows=61102 width=96)
               Join Filter: (customer.c_nationkey = n2.n_nationkey)
               ->  Nested Loop  (cost=1421230.19..8337244.40 rows=1527554 width=76)
                     ->  Gather Merge  (cost=1421229.76..1604130.89 rows=1527554 width=76)
                           Workers Planned: 4
                           ->  Sort  (cost=1420229.70..1421184.42 rows=381888 width=76)
                                 Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                                 ->  Parallel Hash Join  (cost=3140.96..1372700.86 rows=381888 width=76)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..1350107.60 rows=4588240 width=24)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                       ->  Parallel Hash  (cost=3079.76..3079.76 rows=4896 width=60)
                                             ->  Hash Join  (cost=2.87..3079.76 rows=4896 width=60)
                                                   Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                                   ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                                   ->  Hash  (cost=2.84..2.84 rows=2 width=60)
                                                         ->  Nested Loop  (cost=0.00..2.84 rows=2 width=60)
                                                               Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                                               ->  Materialize  (cost=0.00..1.39 rows=2 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                           Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                     ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.41 rows=1 width=8)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
               ->  Index Only Scan using q10_idx_1 on customer  (cost=0.43..2.42 rows=1 width=8)
                     Index Cond: (c_custkey = orders.o_custkey)
 JIT:
   Functions: 44
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(33 rows)

query 7 run 5
SET
SET
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1421230.62..1422291.33 rows=1 width=116)
   ->  GroupAggregate  (cost=1421230.62..12058042.50 rows=10028 width=116)
         Group Key: n1.n_name, n2.n_name, EXTRACT(year FROM lineitem.l_shipdate)
         ->  Nested Loop  (cost=1421230.62..12056975.55 rows=61102 width=96)
               Join Filter: (customer.c_nationkey = n2.n_nationkey)
               ->  Nested Loop  (cost=1421230.19..8337244.40 rows=1527554 width=76)
                     ->  Gather Merge  (cost=1421229.76..1604130.89 rows=1527554 width=76)
                           Workers Planned: 4
                           ->  Sort  (cost=1420229.70..1421184.42 rows=381888 width=76)
                                 Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                                 ->  Parallel Hash Join  (cost=3140.96..1372700.86 rows=381888 width=76)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..1350107.60 rows=4588240 width=24)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                       ->  Parallel Hash  (cost=3079.76..3079.76 rows=4896 width=60)
                                             ->  Hash Join  (cost=2.87..3079.76 rows=4896 width=60)
                                                   Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                                   ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                                   ->  Hash  (cost=2.84..2.84 rows=2 width=60)
                                                         ->  Nested Loop  (cost=0.00..2.84 rows=2 width=60)
                                                               Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                                               ->  Materialize  (cost=0.00..1.39 rows=2 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                           Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                     ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.41 rows=1 width=8)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
               ->  Index Only Scan using q10_idx_1 on customer  (cost=0.43..2.42 rows=1 width=8)
                     Index Cond: (c_custkey = orders.o_custkey)
 JIT:
   Functions: 44
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(33 rows)

query 8 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=384893.34..385048.52 rows=1 width=64)
   ->  GroupAggregate  (cost=384893.34..758235.04 rows=2406 width=64)
         Group Key: EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=384893.34..757701.26 rows=24283 width=70)
               ->  Nested Loop  (cost=384893.20..757017.83 rows=24283 width=20)
                     ->  Nested Loop  (cost=384892.78..698456.45 rows=24283 width=20)
                           Join Filter: (n1.n_regionkey = region.r_regionkey)
                           ->  Nested Loop  (cost=384892.78..696634.14 rows=121416 width=24)
                                 ->  Nested Loop  (cost=384892.63..693636.91 rows=121416 width=24)
                                       ->  Gather Merge  (cost=384892.20..399429.91 rows=121416 width=24)
                                             Workers Planned: 4
                                             ->  Sort  (cost=383892.15..383968.03 rows=30354 width=24)
                                                   Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                                                   ->  Parallel Hash Join  (cost=59742.92..381632.35 rows=30354 width=24)
                                                         Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                                         ->  Parallel Seq Scan on orders  (cost=0.00..317518.48 rows=1145353 width=12)
                                                               Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                         ->  Parallel Hash  (cost=58500.65..58500.65 rows=99382 width=20)
                                                               ->  Nested Loop  (cost=0.56..58500.65 rows=99382 width=20)
                                                                     ->  Parallel Seq Scan on part  (cost=0.00..47230.97 rows=3313 width=4)
                                                                           Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                                     ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.56..3.09 rows=31 width=24)
                                                                           Index Cond: (l_partkey = part.p_partkey)
                                       ->  Index Only Scan using q10_idx_1 on customer  (cost=0.43..2.42 rows=1 width=8)
                                             Index Cond: (c_custkey = orders.o_custkey)
                                 ->  Memoize  (cost=0.15..1.17 rows=1 width=8)
                                       Cache Key: customer.c_nationkey
                                       Cache Mode: logical
                                       ->  Index Scan using nation_pkey on nation n1  (cost=0.14..1.16 rows=1 width=8)
                                             Index Cond: (n_nationkey = customer.c_nationkey)
                           ->  Materialize  (cost=0.00..1.07 rows=1 width=4)
                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                       Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Index Only Scan using q2_idx_3 on supplier  (cost=0.42..2.41 rows=1 width=8)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
               ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                     Cache Key: supplier.s_nationkey
                     Cache Mode: logical
                     ->  Index Scan using nation_pkey on nation n2  (cost=0.14..1.16 rows=1 width=30)
                           Index Cond: (n_nationkey = supplier.s_nationkey)
 JIT:
   Functions: 49
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(43 rows)

query 8 run 2
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=384893.34..385048.52 rows=1 width=64)
   ->  GroupAggregate  (cost=384893.34..758235.04 rows=2406 width=64)
         Group Key: EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=384893.34..757701.26 rows=24283 width=70)
               ->  Nested Loop  (cost=384893.20..757017.83 rows=24283 width=20)
                     ->  Nested Loop  (cost=384892.78..698456.45 rows=24283 width=20)
                           Join Filter: (n1.n_regionkey = region.r_regionkey)
                           ->  Nested Loop  (cost=384892.78..696634.14 rows=121416 width=24)
                                 ->  Nested Loop  (cost=384892.63..693636.91 rows=121416 width=24)
                                       ->  Gather Merge  (cost=384892.20..399429.91 rows=121416 width=24)
                                             Workers Planned: 4
                                             ->  Sort  (cost=383892.15..383968.03 rows=30354 width=24)
                                                   Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                                                   ->  Parallel Hash Join  (cost=59742.92..381632.35 rows=30354 width=24)
                                                         Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                                         ->  Parallel Seq Scan on orders  (cost=0.00..317518.48 rows=1145353 width=12)
                                                               Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                         ->  Parallel Hash  (cost=58500.65..58500.65 rows=99382 width=20)
                                                               ->  Nested Loop  (cost=0.56..58500.65 rows=99382 width=20)
                                                                     ->  Parallel Seq Scan on part  (cost=0.00..47230.97 rows=3313 width=4)
                                                                           Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                                     ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.56..3.09 rows=31 width=24)
                                                                           Index Cond: (l_partkey = part.p_partkey)
                                       ->  Index Only Scan using q10_idx_1 on customer  (cost=0.43..2.42 rows=1 width=8)
                                             Index Cond: (c_custkey = orders.o_custkey)
                                 ->  Memoize  (cost=0.15..1.17 rows=1 width=8)
                                       Cache Key: customer.c_nationkey
                                       Cache Mode: logical
                                       ->  Index Scan using nation_pkey on nation n1  (cost=0.14..1.16 rows=1 width=8)
                                             Index Cond: (n_nationkey = customer.c_nationkey)
                           ->  Materialize  (cost=0.00..1.07 rows=1 width=4)
                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                       Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Index Only Scan using q2_idx_3 on supplier  (cost=0.42..2.41 rows=1 width=8)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
               ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                     Cache Key: supplier.s_nationkey
                     Cache Mode: logical
                     ->  Index Scan using nation_pkey on nation n2  (cost=0.14..1.16 rows=1 width=30)
                           Index Cond: (n_nationkey = supplier.s_nationkey)
 JIT:
   Functions: 49
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(43 rows)

query 8 run 3
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=384893.34..385048.52 rows=1 width=64)
   ->  GroupAggregate  (cost=384893.34..758235.04 rows=2406 width=64)
         Group Key: EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=384893.34..757701.26 rows=24283 width=70)
               ->  Nested Loop  (cost=384893.20..757017.83 rows=24283 width=20)
                     ->  Nested Loop  (cost=384892.78..698456.45 rows=24283 width=20)
                           Join Filter: (n1.n_regionkey = region.r_regionkey)
                           ->  Nested Loop  (cost=384892.78..696634.14 rows=121416 width=24)
                                 ->  Nested Loop  (cost=384892.63..693636.91 rows=121416 width=24)
                                       ->  Gather Merge  (cost=384892.20..399429.91 rows=121416 width=24)
                                             Workers Planned: 4
                                             ->  Sort  (cost=383892.15..383968.03 rows=30354 width=24)
                                                   Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                                                   ->  Parallel Hash Join  (cost=59742.92..381632.35 rows=30354 width=24)
                                                         Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                                         ->  Parallel Seq Scan on orders  (cost=0.00..317518.48 rows=1145353 width=12)
                                                               Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                         ->  Parallel Hash  (cost=58500.65..58500.65 rows=99382 width=20)
                                                               ->  Nested Loop  (cost=0.56..58500.65 rows=99382 width=20)
                                                                     ->  Parallel Seq Scan on part  (cost=0.00..47230.97 rows=3313 width=4)
                                                                           Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                                     ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.56..3.09 rows=31 width=24)
                                                                           Index Cond: (l_partkey = part.p_partkey)
                                       ->  Index Only Scan using q10_idx_1 on customer  (cost=0.43..2.42 rows=1 width=8)
                                             Index Cond: (c_custkey = orders.o_custkey)
                                 ->  Memoize  (cost=0.15..1.17 rows=1 width=8)
                                       Cache Key: customer.c_nationkey
                                       Cache Mode: logical
                                       ->  Index Scan using nation_pkey on nation n1  (cost=0.14..1.16 rows=1 width=8)
                                             Index Cond: (n_nationkey = customer.c_nationkey)
                           ->  Materialize  (cost=0.00..1.07 rows=1 width=4)
                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                       Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Index Only Scan using q2_idx_3 on supplier  (cost=0.42..2.41 rows=1 width=8)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
               ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                     Cache Key: supplier.s_nationkey
                     Cache Mode: logical
                     ->  Index Scan using nation_pkey on nation n2  (cost=0.14..1.16 rows=1 width=30)
                           Index Cond: (n_nationkey = supplier.s_nationkey)
 JIT:
   Functions: 49
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(43 rows)

query 8 run 4
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=384893.34..385048.52 rows=1 width=64)
   ->  GroupAggregate  (cost=384893.34..758235.04 rows=2406 width=64)
         Group Key: EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=384893.34..757701.26 rows=24283 width=70)
               ->  Nested Loop  (cost=384893.20..757017.83 rows=24283 width=20)
                     ->  Nested Loop  (cost=384892.78..698456.45 rows=24283 width=20)
                           Join Filter: (n1.n_regionkey = region.r_regionkey)
                           ->  Nested Loop  (cost=384892.78..696634.14 rows=121416 width=24)
                                 ->  Nested Loop  (cost=384892.63..693636.91 rows=121416 width=24)
                                       ->  Gather Merge  (cost=384892.20..399429.91 rows=121416 width=24)
                                             Workers Planned: 4
                                             ->  Sort  (cost=383892.15..383968.03 rows=30354 width=24)
                                                   Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                                                   ->  Parallel Hash Join  (cost=59742.92..381632.35 rows=30354 width=24)
                                                         Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                                         ->  Parallel Seq Scan on orders  (cost=0.00..317518.48 rows=1145353 width=12)
                                                               Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                         ->  Parallel Hash  (cost=58500.65..58500.65 rows=99382 width=20)
                                                               ->  Nested Loop  (cost=0.56..58500.65 rows=99382 width=20)
                                                                     ->  Parallel Seq Scan on part  (cost=0.00..47230.97 rows=3313 width=4)
                                                                           Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                                     ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.56..3.09 rows=31 width=24)
                                                                           Index Cond: (l_partkey = part.p_partkey)
                                       ->  Index Only Scan using q10_idx_1 on customer  (cost=0.43..2.42 rows=1 width=8)
                                             Index Cond: (c_custkey = orders.o_custkey)
                                 ->  Memoize  (cost=0.15..1.17 rows=1 width=8)
                                       Cache Key: customer.c_nationkey
                                       Cache Mode: logical
                                       ->  Index Scan using nation_pkey on nation n1  (cost=0.14..1.16 rows=1 width=8)
                                             Index Cond: (n_nationkey = customer.c_nationkey)
                           ->  Materialize  (cost=0.00..1.07 rows=1 width=4)
                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                       Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Index Only Scan using q2_idx_3 on supplier  (cost=0.42..2.41 rows=1 width=8)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
               ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                     Cache Key: supplier.s_nationkey
                     Cache Mode: logical
                     ->  Index Scan using nation_pkey on nation n2  (cost=0.14..1.16 rows=1 width=30)
                           Index Cond: (n_nationkey = supplier.s_nationkey)
 JIT:
   Functions: 49
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(43 rows)

query 8 run 5
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=384893.34..385048.52 rows=1 width=64)
   ->  GroupAggregate  (cost=384893.34..758235.04 rows=2406 width=64)
         Group Key: EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=384893.34..757701.26 rows=24283 width=70)
               ->  Nested Loop  (cost=384893.20..757017.83 rows=24283 width=20)
                     ->  Nested Loop  (cost=384892.78..698456.45 rows=24283 width=20)
                           Join Filter: (n1.n_regionkey = region.r_regionkey)
                           ->  Nested Loop  (cost=384892.78..696634.14 rows=121416 width=24)
                                 ->  Nested Loop  (cost=384892.63..693636.91 rows=121416 width=24)
                                       ->  Gather Merge  (cost=384892.20..399429.91 rows=121416 width=24)
                                             Workers Planned: 4
                                             ->  Sort  (cost=383892.15..383968.03 rows=30354 width=24)
                                                   Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                                                   ->  Parallel Hash Join  (cost=59742.92..381632.35 rows=30354 width=24)
                                                         Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                                         ->  Parallel Seq Scan on orders  (cost=0.00..317518.48 rows=1145353 width=12)
                                                               Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                         ->  Parallel Hash  (cost=58500.65..58500.65 rows=99382 width=20)
                                                               ->  Nested Loop  (cost=0.56..58500.65 rows=99382 width=20)
                                                                     ->  Parallel Seq Scan on part  (cost=0.00..47230.97 rows=3313 width=4)
                                                                           Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                                     ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.56..3.09 rows=31 width=24)
                                                                           Index Cond: (l_partkey = part.p_partkey)
                                       ->  Index Only Scan using q10_idx_1 on customer  (cost=0.43..2.42 rows=1 width=8)
                                             Index Cond: (c_custkey = orders.o_custkey)
                                 ->  Memoize  (cost=0.15..1.17 rows=1 width=8)
                                       Cache Key: customer.c_nationkey
                                       Cache Mode: logical
                                       ->  Index Scan using nation_pkey on nation n1  (cost=0.14..1.16 rows=1 width=8)
                                             Index Cond: (n_nationkey = customer.c_nationkey)
                           ->  Materialize  (cost=0.00..1.07 rows=1 width=4)
                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                       Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Index Only Scan using q2_idx_3 on supplier  (cost=0.42..2.41 rows=1 width=8)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
               ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                     Cache Key: supplier.s_nationkey
                     Cache Mode: logical
                     ->  Index Scan using nation_pkey on nation n2  (cost=0.14..1.16 rows=1 width=30)
                           Index Cond: (n_nationkey = supplier.s_nationkey)
 JIT:
   Functions: 49
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(43 rows)

query 9 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=558805.84..558936.05 rows=1 width=90)
   ->  GroupAggregate  (cost=558805.84..8390768.40 rows=60150 width=90)
         Group Key: nation.n_name, EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=558805.84..8336843.95 rows=3029840 width=81)
               Join Filter: (supplier.s_suppkey = partsupp.ps_suppkey)
               ->  Gather Merge  (cost=558805.41..921582.21 rows=3029840 width=63)
                     Workers Planned: 4
                     ->  Sort  (cost=557805.35..559699.00 rows=757460 width=63)
                           Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
                           ->  Hash Join  (cost=146443.83..463493.81 rows=757460 width=63)
                                 Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                 ->  Parallel Hash Join  (cost=146442.26..461166.85 rows=757460 width=41)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..298768.32 rows=3750032 width=8)
                                       ->  Parallel Hash  (cost=136974.01..136974.01 rows=757460 width=41)
                                             ->  Parallel Hash Join  (cost=3545.53..136974.01 rows=757460 width=41)
                                                   Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                                   ->  Nested Loop  (cost=0.99..131441.06 rows=757460 width=33)
                                                         ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.43..45556.34 rows=25252 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..3.09 rows=31 width=29)
                                                               Index Cond: (l_partkey = part.p_partkey)
                                                   ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                                         ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
               ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.43..2.43 rows=1 width=14)
                     Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
 JIT:
   Functions: 36
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(31 rows)

query 9 run 2
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=558805.84..558936.05 rows=1 width=90)
   ->  GroupAggregate  (cost=558805.84..8390768.40 rows=60150 width=90)
         Group Key: nation.n_name, EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=558805.84..8336843.95 rows=3029840 width=81)
               Join Filter: (supplier.s_suppkey = partsupp.ps_suppkey)
               ->  Gather Merge  (cost=558805.41..921582.21 rows=3029840 width=63)
                     Workers Planned: 4
                     ->  Sort  (cost=557805.35..559699.00 rows=757460 width=63)
                           Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
                           ->  Hash Join  (cost=146443.83..463493.81 rows=757460 width=63)
                                 Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                 ->  Parallel Hash Join  (cost=146442.26..461166.85 rows=757460 width=41)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..298768.32 rows=3750032 width=8)
                                       ->  Parallel Hash  (cost=136974.01..136974.01 rows=757460 width=41)
                                             ->  Parallel Hash Join  (cost=3545.53..136974.01 rows=757460 width=41)
                                                   Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                                   ->  Nested Loop  (cost=0.99..131441.06 rows=757460 width=33)
                                                         ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.43..45556.34 rows=25252 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..3.09 rows=31 width=29)
                                                               Index Cond: (l_partkey = part.p_partkey)
                                                   ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                                         ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
               ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.43..2.43 rows=1 width=14)
                     Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
 JIT:
   Functions: 36
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(31 rows)

query 9 run 3
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=558805.84..558936.05 rows=1 width=90)
   ->  GroupAggregate  (cost=558805.84..8390768.40 rows=60150 width=90)
         Group Key: nation.n_name, EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=558805.84..8336843.95 rows=3029840 width=81)
               Join Filter: (supplier.s_suppkey = partsupp.ps_suppkey)
               ->  Gather Merge  (cost=558805.41..921582.21 rows=3029840 width=63)
                     Workers Planned: 4
                     ->  Sort  (cost=557805.35..559699.00 rows=757460 width=63)
                           Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
                           ->  Hash Join  (cost=146443.83..463493.81 rows=757460 width=63)
                                 Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                 ->  Parallel Hash Join  (cost=146442.26..461166.85 rows=757460 width=41)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..298768.32 rows=3750032 width=8)
                                       ->  Parallel Hash  (cost=136974.01..136974.01 rows=757460 width=41)
                                             ->  Parallel Hash Join  (cost=3545.53..136974.01 rows=757460 width=41)
                                                   Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                                   ->  Nested Loop  (cost=0.99..131441.06 rows=757460 width=33)
                                                         ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.43..45556.34 rows=25252 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..3.09 rows=31 width=29)
                                                               Index Cond: (l_partkey = part.p_partkey)
                                                   ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                                         ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
               ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.43..2.43 rows=1 width=14)
                     Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
 JIT:
   Functions: 36
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(31 rows)

query 9 run 4
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=558805.84..558936.05 rows=1 width=90)
   ->  GroupAggregate  (cost=558805.84..8390768.40 rows=60150 width=90)
         Group Key: nation.n_name, EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=558805.84..8336843.95 rows=3029840 width=81)
               Join Filter: (supplier.s_suppkey = partsupp.ps_suppkey)
               ->  Gather Merge  (cost=558805.41..921582.21 rows=3029840 width=63)
                     Workers Planned: 4
                     ->  Sort  (cost=557805.35..559699.00 rows=757460 width=63)
                           Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
                           ->  Hash Join  (cost=146443.83..463493.81 rows=757460 width=63)
                                 Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                 ->  Parallel Hash Join  (cost=146442.26..461166.85 rows=757460 width=41)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..298768.32 rows=3750032 width=8)
                                       ->  Parallel Hash  (cost=136974.01..136974.01 rows=757460 width=41)
                                             ->  Parallel Hash Join  (cost=3545.53..136974.01 rows=757460 width=41)
                                                   Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                                   ->  Nested Loop  (cost=0.99..131441.06 rows=757460 width=33)
                                                         ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.43..45556.34 rows=25252 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..3.09 rows=31 width=29)
                                                               Index Cond: (l_partkey = part.p_partkey)
                                                   ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                                         ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
               ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.43..2.43 rows=1 width=14)
                     Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
 JIT:
   Functions: 36
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(31 rows)

query 9 run 5
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=558805.84..558936.05 rows=1 width=90)
   ->  GroupAggregate  (cost=558805.84..8390768.40 rows=60150 width=90)
         Group Key: nation.n_name, EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=558805.84..8336843.95 rows=3029840 width=81)
               Join Filter: (supplier.s_suppkey = partsupp.ps_suppkey)
               ->  Gather Merge  (cost=558805.41..921582.21 rows=3029840 width=63)
                     Workers Planned: 4
                     ->  Sort  (cost=557805.35..559699.00 rows=757460 width=63)
                           Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
                           ->  Hash Join  (cost=146443.83..463493.81 rows=757460 width=63)
                                 Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                 ->  Parallel Hash Join  (cost=146442.26..461166.85 rows=757460 width=41)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Parallel Seq Scan on orders  (cost=0.00..298768.32 rows=3750032 width=8)
                                       ->  Parallel Hash  (cost=136974.01..136974.01 rows=757460 width=41)
                                             ->  Parallel Hash Join  (cost=3545.53..136974.01 rows=757460 width=41)
                                                   Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                                   ->  Nested Loop  (cost=0.99..131441.06 rows=757460 width=33)
                                                         ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.43..45556.34 rows=25252 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..3.09 rows=31 width=29)
                                                               Index Cond: (l_partkey = part.p_partkey)
                                                   ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                                         ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
               ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.43..2.43 rows=1 width=14)
                     Index Cond: ((ps_partkey = lineitem.l_partkey) AND (ps_suppkey = lineitem.l_suppkey))
 JIT:
   Functions: 36
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(31 rows)

query 10 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=818467.51..818467.56 rows=20 width=202)
   ->  Sort  (cost=818467.51..819956.96 rows=595782 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=716383.67..802613.96 rows=595782 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=716383.67..787719.41 rows=595782 width=182)
                     Workers Planned: 4
                     ->  Sort  (cost=715383.61..715755.97 rows=148946 width=182)
                           Sort Key: customer.c_custkey, nation.n_name
                           ->  Hash Join  (cost=659247.08..702585.85 rows=148946 width=182)
                                 Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                 ->  Parallel Hash Join  (cost=659245.52..702127.02 rows=148946 width=160)
                                       Hash Cond: (customer.c_custkey = orders.o_custkey)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..39696.79 rows=374979 width=148)
                                       ->  Parallel Hash  (cost=657383.70..657383.70 rows=148946 width=16)
                                             ->  Nested Loop  (cost=7183.55..657383.70 rows=148946 width=16)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=7182.99..270702.65 rows=150111 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..7032.88 rows=600444 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                   ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.56..2.57 rows=1 width=16)
                                                         Index Cond: ((l_orderkey = orders.o_orderkey) AND (l_returnflag = 'R'::bpchar))
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
 JIT:
   Functions: 26
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(27 rows)

query 10 run 2
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=818467.51..818467.56 rows=20 width=202)
   ->  Sort  (cost=818467.51..819956.96 rows=595782 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=716383.67..802613.96 rows=595782 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=716383.67..787719.41 rows=595782 width=182)
                     Workers Planned: 4
                     ->  Sort  (cost=715383.61..715755.97 rows=148946 width=182)
                           Sort Key: customer.c_custkey, nation.n_name
                           ->  Hash Join  (cost=659247.08..702585.85 rows=148946 width=182)
                                 Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                 ->  Parallel Hash Join  (cost=659245.52..702127.02 rows=148946 width=160)
                                       Hash Cond: (customer.c_custkey = orders.o_custkey)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..39696.79 rows=374979 width=148)
                                       ->  Parallel Hash  (cost=657383.70..657383.70 rows=148946 width=16)
                                             ->  Nested Loop  (cost=7183.55..657383.70 rows=148946 width=16)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=7182.99..270702.65 rows=150111 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..7032.88 rows=600444 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                   ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.56..2.57 rows=1 width=16)
                                                         Index Cond: ((l_orderkey = orders.o_orderkey) AND (l_returnflag = 'R'::bpchar))
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
 JIT:
   Functions: 26
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(27 rows)

query 10 run 3
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=818467.51..818467.56 rows=20 width=202)
   ->  Sort  (cost=818467.51..819956.96 rows=595782 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=716383.67..802613.96 rows=595782 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=716383.67..787719.41 rows=595782 width=182)
                     Workers Planned: 4
                     ->  Sort  (cost=715383.61..715755.97 rows=148946 width=182)
                           Sort Key: customer.c_custkey, nation.n_name
                           ->  Hash Join  (cost=659247.08..702585.85 rows=148946 width=182)
                                 Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                 ->  Parallel Hash Join  (cost=659245.52..702127.02 rows=148946 width=160)
                                       Hash Cond: (customer.c_custkey = orders.o_custkey)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..39696.79 rows=374979 width=148)
                                       ->  Parallel Hash  (cost=657383.70..657383.70 rows=148946 width=16)
                                             ->  Nested Loop  (cost=7183.55..657383.70 rows=148946 width=16)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=7182.99..270702.65 rows=150111 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..7032.88 rows=600444 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                   ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.56..2.57 rows=1 width=16)
                                                         Index Cond: ((l_orderkey = orders.o_orderkey) AND (l_returnflag = 'R'::bpchar))
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
 JIT:
   Functions: 26
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(27 rows)

query 10 run 4
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=818467.51..818467.56 rows=20 width=202)
   ->  Sort  (cost=818467.51..819956.96 rows=595782 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=716383.67..802613.96 rows=595782 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=716383.67..787719.41 rows=595782 width=182)
                     Workers Planned: 4
                     ->  Sort  (cost=715383.61..715755.97 rows=148946 width=182)
                           Sort Key: customer.c_custkey, nation.n_name
                           ->  Hash Join  (cost=659247.08..702585.85 rows=148946 width=182)
                                 Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                 ->  Parallel Hash Join  (cost=659245.52..702127.02 rows=148946 width=160)
                                       Hash Cond: (customer.c_custkey = orders.o_custkey)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..39696.79 rows=374979 width=148)
                                       ->  Parallel Hash  (cost=657383.70..657383.70 rows=148946 width=16)
                                             ->  Nested Loop  (cost=7183.55..657383.70 rows=148946 width=16)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=7182.99..270702.65 rows=150111 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..7032.88 rows=600444 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                   ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.56..2.57 rows=1 width=16)
                                                         Index Cond: ((l_orderkey = orders.o_orderkey) AND (l_returnflag = 'R'::bpchar))
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
 JIT:
   Functions: 26
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(27 rows)

query 10 run 5
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=818467.51..818467.56 rows=20 width=202)
   ->  Sort  (cost=818467.51..819956.96 rows=595782 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=716383.67..802613.96 rows=595782 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=716383.67..787719.41 rows=595782 width=182)
                     Workers Planned: 4
                     ->  Sort  (cost=715383.61..715755.97 rows=148946 width=182)
                           Sort Key: customer.c_custkey, nation.n_name
                           ->  Hash Join  (cost=659247.08..702585.85 rows=148946 width=182)
                                 Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                 ->  Parallel Hash Join  (cost=659245.52..702127.02 rows=148946 width=160)
                                       Hash Cond: (customer.c_custkey = orders.o_custkey)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..39696.79 rows=374979 width=148)
                                       ->  Parallel Hash  (cost=657383.70..657383.70 rows=148946 width=16)
                                             ->  Nested Loop  (cost=7183.55..657383.70 rows=148946 width=16)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=7182.99..270702.65 rows=150111 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..7032.88 rows=600444 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                   ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.56..2.57 rows=1 width=16)
                                                         Index Cond: ((l_orderkey = orders.o_orderkey) AND (l_returnflag = 'R'::bpchar))
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
 JIT:
   Functions: 26
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(27 rows)

query 11 run 1
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=467668.34..467668.34 rows=1 width=36)
   InitPlan 1
     ->  Finalize Aggregate  (cost=207457.01..207457.02 rows=1 width=32)
           ->  Gather  (cost=207456.57..207456.98 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=206456.57..206456.58 rows=1 width=32)
                       ->  Hash Join  (cost=2341.31..205856.67 rows=79987 width=10)
                             Hash Cond: (partsupp_1.ps_suppkey = supplier_1.s_suppkey)
                             ->  Parallel Seq Scan on partsupp partsupp_1  (cost=0.00..195218.71 rows=1999672 width=14)
                             ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                                   ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                         ->  Bitmap Heap Scan on supplier supplier_1  (cost=39.29..2250.00 rows=4000 width=8)
                                               Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                                               ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                     Index Cond: (s_nationkey = nation_1.n_nationkey)
   ->  Sort  (cost=260211.32..260477.94 rows=106649 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  GroupAggregate  (cost=213370.66..259678.07 rows=106649 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               ->  Gather Merge  (cost=213370.66..251679.40 rows=319947 width=14)
                     Workers Planned: 4
                     ->  Sort  (cost=212370.60..212570.57 rows=79987 width=14)
                           Sort Key: partsupp.ps_partkey
                           ->  Hash Join  (cost=2341.31..205856.67 rows=79987 width=14)
                                 Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                 ->  Parallel Seq Scan on partsupp  (cost=0.00..195218.71 rows=1999672 width=18)
                                 ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                                       ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                             ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                             ->  Bitmap Heap Scan on supplier  (cost=39.29..2250.00 rows=4000 width=8)
                                                   Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                         Index Cond: (s_nationkey = nation.n_nationkey)
 JIT:
   Functions: 37
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(40 rows)

query 11 run 2
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=467668.34..467668.34 rows=1 width=36)
   InitPlan 1
     ->  Finalize Aggregate  (cost=207457.01..207457.02 rows=1 width=32)
           ->  Gather  (cost=207456.57..207456.98 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=206456.57..206456.58 rows=1 width=32)
                       ->  Hash Join  (cost=2341.31..205856.67 rows=79987 width=10)
                             Hash Cond: (partsupp_1.ps_suppkey = supplier_1.s_suppkey)
                             ->  Parallel Seq Scan on partsupp partsupp_1  (cost=0.00..195218.71 rows=1999672 width=14)
                             ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                                   ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                         ->  Bitmap Heap Scan on supplier supplier_1  (cost=39.29..2250.00 rows=4000 width=8)
                                               Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                                               ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                     Index Cond: (s_nationkey = nation_1.n_nationkey)
   ->  Sort  (cost=260211.32..260477.94 rows=106649 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  GroupAggregate  (cost=213370.66..259678.07 rows=106649 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               ->  Gather Merge  (cost=213370.66..251679.40 rows=319947 width=14)
                     Workers Planned: 4
                     ->  Sort  (cost=212370.60..212570.57 rows=79987 width=14)
                           Sort Key: partsupp.ps_partkey
                           ->  Hash Join  (cost=2341.31..205856.67 rows=79987 width=14)
                                 Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                 ->  Parallel Seq Scan on partsupp  (cost=0.00..195218.71 rows=1999672 width=18)
                                 ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                                       ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                             ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                             ->  Bitmap Heap Scan on supplier  (cost=39.29..2250.00 rows=4000 width=8)
                                                   Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                         Index Cond: (s_nationkey = nation.n_nationkey)
 JIT:
   Functions: 37
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(40 rows)

query 11 run 3
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=467668.34..467668.34 rows=1 width=36)
   InitPlan 1
     ->  Finalize Aggregate  (cost=207457.01..207457.02 rows=1 width=32)
           ->  Gather  (cost=207456.57..207456.98 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=206456.57..206456.58 rows=1 width=32)
                       ->  Hash Join  (cost=2341.31..205856.67 rows=79987 width=10)
                             Hash Cond: (partsupp_1.ps_suppkey = supplier_1.s_suppkey)
                             ->  Parallel Seq Scan on partsupp partsupp_1  (cost=0.00..195218.71 rows=1999672 width=14)
                             ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                                   ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                         ->  Bitmap Heap Scan on supplier supplier_1  (cost=39.29..2250.00 rows=4000 width=8)
                                               Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                                               ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                     Index Cond: (s_nationkey = nation_1.n_nationkey)
   ->  Sort  (cost=260211.32..260477.94 rows=106649 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  GroupAggregate  (cost=213370.66..259678.07 rows=106649 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               ->  Gather Merge  (cost=213370.66..251679.40 rows=319947 width=14)
                     Workers Planned: 4
                     ->  Sort  (cost=212370.60..212570.57 rows=79987 width=14)
                           Sort Key: partsupp.ps_partkey
                           ->  Hash Join  (cost=2341.31..205856.67 rows=79987 width=14)
                                 Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                 ->  Parallel Seq Scan on partsupp  (cost=0.00..195218.71 rows=1999672 width=18)
                                 ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                                       ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                             ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                             ->  Bitmap Heap Scan on supplier  (cost=39.29..2250.00 rows=4000 width=8)
                                                   Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                         Index Cond: (s_nationkey = nation.n_nationkey)
 JIT:
   Functions: 37
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(40 rows)

query 11 run 4
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=467668.34..467668.34 rows=1 width=36)
   InitPlan 1
     ->  Finalize Aggregate  (cost=207457.01..207457.02 rows=1 width=32)
           ->  Gather  (cost=207456.57..207456.98 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=206456.57..206456.58 rows=1 width=32)
                       ->  Hash Join  (cost=2341.31..205856.67 rows=79987 width=10)
                             Hash Cond: (partsupp_1.ps_suppkey = supplier_1.s_suppkey)
                             ->  Parallel Seq Scan on partsupp partsupp_1  (cost=0.00..195218.71 rows=1999672 width=14)
                             ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                                   ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                         ->  Bitmap Heap Scan on supplier supplier_1  (cost=39.29..2250.00 rows=4000 width=8)
                                               Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                                               ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                     Index Cond: (s_nationkey = nation_1.n_nationkey)
   ->  Sort  (cost=260211.32..260477.94 rows=106649 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  GroupAggregate  (cost=213370.66..259678.07 rows=106649 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               ->  Gather Merge  (cost=213370.66..251679.40 rows=319947 width=14)
                     Workers Planned: 4
                     ->  Sort  (cost=212370.60..212570.57 rows=79987 width=14)
                           Sort Key: partsupp.ps_partkey
                           ->  Hash Join  (cost=2341.31..205856.67 rows=79987 width=14)
                                 Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                 ->  Parallel Seq Scan on partsupp  (cost=0.00..195218.71 rows=1999672 width=18)
                                 ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                                       ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                             ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                             ->  Bitmap Heap Scan on supplier  (cost=39.29..2250.00 rows=4000 width=8)
                                                   Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                         Index Cond: (s_nationkey = nation.n_nationkey)
 JIT:
   Functions: 37
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(40 rows)

query 11 run 5
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=467668.34..467668.34 rows=1 width=36)
   InitPlan 1
     ->  Finalize Aggregate  (cost=207457.01..207457.02 rows=1 width=32)
           ->  Gather  (cost=207456.57..207456.98 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=206456.57..206456.58 rows=1 width=32)
                       ->  Hash Join  (cost=2341.31..205856.67 rows=79987 width=10)
                             Hash Cond: (partsupp_1.ps_suppkey = supplier_1.s_suppkey)
                             ->  Parallel Seq Scan on partsupp partsupp_1  (cost=0.00..195218.71 rows=1999672 width=14)
                             ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                                   ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                         ->  Bitmap Heap Scan on supplier supplier_1  (cost=39.29..2250.00 rows=4000 width=8)
                                               Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                                               ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                     Index Cond: (s_nationkey = nation_1.n_nationkey)
   ->  Sort  (cost=260211.32..260477.94 rows=106649 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  GroupAggregate  (cost=213370.66..259678.07 rows=106649 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               ->  Gather Merge  (cost=213370.66..251679.40 rows=319947 width=14)
                     Workers Planned: 4
                     ->  Sort  (cost=212370.60..212570.57 rows=79987 width=14)
                           Sort Key: partsupp.ps_partkey
                           ->  Hash Join  (cost=2341.31..205856.67 rows=79987 width=14)
                                 Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                 ->  Parallel Seq Scan on partsupp  (cost=0.00..195218.71 rows=1999672 width=18)
                                 ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                                       ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                             ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                             ->  Bitmap Heap Scan on supplier  (cost=39.29..2250.00 rows=4000 width=8)
                                                   Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                         Index Cond: (s_nationkey = nation.n_nationkey)
 JIT:
   Functions: 37
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(40 rows)

query 12 run 1
SET
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=157042.97..341631.51 rows=1 width=27)
   ->  GroupAggregate  (cost=157042.97..1449162.73 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Nested Loop  (cost=157042.97..1444186.32 rows=284362 width=27)
               ->  Gather Merge  (cost=157042.54..191090.52 rows=284362 width=15)
                     Workers Planned: 4
                     ->  Sort  (cost=156042.48..156220.20 rows=71090 width=15)
                           Sort Key: lineitem.l_shipmode
                           ->  Parallel Index Only Scan using q12_idx_1 on lineitem  (cost=0.43..150313.56 rows=71090 width=15)
                                 Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
               ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.41 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
 JIT:
   Functions: 10
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(15 rows)

query 12 run 2
SET
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=157042.97..341631.51 rows=1 width=27)
   ->  GroupAggregate  (cost=157042.97..1449162.73 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Nested Loop  (cost=157042.97..1444186.32 rows=284362 width=27)
               ->  Gather Merge  (cost=157042.54..191090.52 rows=284362 width=15)
                     Workers Planned: 4
                     ->  Sort  (cost=156042.48..156220.20 rows=71090 width=15)
                           Sort Key: lineitem.l_shipmode
                           ->  Parallel Index Only Scan using q12_idx_1 on lineitem  (cost=0.43..150313.56 rows=71090 width=15)
                                 Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
               ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.41 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
 JIT:
   Functions: 10
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(15 rows)

query 12 run 3
SET
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=157042.97..341631.51 rows=1 width=27)
   ->  GroupAggregate  (cost=157042.97..1449162.73 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Nested Loop  (cost=157042.97..1444186.32 rows=284362 width=27)
               ->  Gather Merge  (cost=157042.54..191090.52 rows=284362 width=15)
                     Workers Planned: 4
                     ->  Sort  (cost=156042.48..156220.20 rows=71090 width=15)
                           Sort Key: lineitem.l_shipmode
                           ->  Parallel Index Only Scan using q12_idx_1 on lineitem  (cost=0.43..150313.56 rows=71090 width=15)
                                 Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
               ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.41 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
 JIT:
   Functions: 10
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(15 rows)

query 12 run 4
SET
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=157042.97..341631.51 rows=1 width=27)
   ->  GroupAggregate  (cost=157042.97..1449162.73 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Nested Loop  (cost=157042.97..1444186.32 rows=284362 width=27)
               ->  Gather Merge  (cost=157042.54..191090.52 rows=284362 width=15)
                     Workers Planned: 4
                     ->  Sort  (cost=156042.48..156220.20 rows=71090 width=15)
                           Sort Key: lineitem.l_shipmode
                           ->  Parallel Index Only Scan using q12_idx_1 on lineitem  (cost=0.43..150313.56 rows=71090 width=15)
                                 Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
               ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.41 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
 JIT:
   Functions: 10
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(15 rows)

query 12 run 5
SET
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=157042.97..341631.51 rows=1 width=27)
   ->  GroupAggregate  (cost=157042.97..1449162.73 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Nested Loop  (cost=157042.97..1444186.32 rows=284362 width=27)
               ->  Gather Merge  (cost=157042.54..191090.52 rows=284362 width=15)
                     Workers Planned: 4
                     ->  Sort  (cost=156042.48..156220.20 rows=71090 width=15)
                           Sort Key: lineitem.l_shipmode
                           ->  Parallel Index Only Scan using q12_idx_1 on lineitem  (cost=0.43..150313.56 rows=71090 width=15)
                                 Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
               ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.41 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
 JIT:
   Functions: 10
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(15 rows)

query 13 run 1
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1412763.03..1412763.03 rows=1 width=16)
   ->  Sort  (cost=1412763.03..1412763.53 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1412760.03..1412762.03 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=1260441.10..1390261.30 rows=1499915 width=12)
                     Group Key: customer.c_custkey
                     Planned Partitions: 4
                     ->  Hash Right Join  (cost=55340.09..663371.66 rows=14697094 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..448769.59 rows=14697094 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=30731.15..30731.15 rows=1499915 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.43..30731.15 rows=1499915 width=4)
 JIT:
   Functions: 15
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(17 rows)

query 13 run 2
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1412763.03..1412763.03 rows=1 width=16)
   ->  Sort  (cost=1412763.03..1412763.53 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1412760.03..1412762.03 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=1260441.10..1390261.30 rows=1499915 width=12)
                     Group Key: customer.c_custkey
                     Planned Partitions: 4
                     ->  Hash Right Join  (cost=55340.09..663371.66 rows=14697094 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..448769.59 rows=14697094 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=30731.15..30731.15 rows=1499915 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.43..30731.15 rows=1499915 width=4)
 JIT:
   Functions: 15
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(17 rows)

query 13 run 3
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1412763.03..1412763.03 rows=1 width=16)
   ->  Sort  (cost=1412763.03..1412763.53 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1412760.03..1412762.03 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=1260441.10..1390261.30 rows=1499915 width=12)
                     Group Key: customer.c_custkey
                     Planned Partitions: 4
                     ->  Hash Right Join  (cost=55340.09..663371.66 rows=14697094 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..448769.59 rows=14697094 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=30731.15..30731.15 rows=1499915 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.43..30731.15 rows=1499915 width=4)
 JIT:
   Functions: 15
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(17 rows)

query 13 run 4
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1412763.03..1412763.03 rows=1 width=16)
   ->  Sort  (cost=1412763.03..1412763.53 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1412760.03..1412762.03 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=1260441.10..1390261.30 rows=1499915 width=12)
                     Group Key: customer.c_custkey
                     Planned Partitions: 4
                     ->  Hash Right Join  (cost=55340.09..663371.66 rows=14697094 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..448769.59 rows=14697094 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=30731.15..30731.15 rows=1499915 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.43..30731.15 rows=1499915 width=4)
 JIT:
   Functions: 15
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(17 rows)

query 13 run 5
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1412763.03..1412763.03 rows=1 width=16)
   ->  Sort  (cost=1412763.03..1412763.53 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1412760.03..1412762.03 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=1260441.10..1390261.30 rows=1499915 width=12)
                     Group Key: customer.c_custkey
                     Planned Partitions: 4
                     ->  Hash Right Join  (cost=55340.09..663371.66 rows=14697094 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..448769.59 rows=14697094 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=30731.15..30731.15 rows=1499915 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.43..30731.15 rows=1499915 width=4)
 JIT:
   Functions: 15
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(17 rows)

query 14 run 1
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=973214.71..973214.73 rows=1 width=32)
   ->  Finalize Aggregate  (cost=973214.71..973214.73 rows=1 width=32)
         ->  Gather  (cost=973214.26..973214.67 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=972214.26..972214.27 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=67271.66..968551.14 rows=209321 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=15040.73..915770.73 rows=209321 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..14831.41 rows=837284 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=45980.97..45980.97 rows=499997 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..45980.97 rows=499997 width=25)
 JIT:
   Functions: 18
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(16 rows)

query 14 run 2
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=973214.71..973214.73 rows=1 width=32)
   ->  Finalize Aggregate  (cost=973214.71..973214.73 rows=1 width=32)
         ->  Gather  (cost=973214.26..973214.67 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=972214.26..972214.27 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=67271.66..968551.14 rows=209321 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=15040.73..915770.73 rows=209321 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..14831.41 rows=837284 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=45980.97..45980.97 rows=499997 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..45980.97 rows=499997 width=25)
 JIT:
   Functions: 18
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(16 rows)

query 14 run 3
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=973214.71..973214.73 rows=1 width=32)
   ->  Finalize Aggregate  (cost=973214.71..973214.73 rows=1 width=32)
         ->  Gather  (cost=973214.26..973214.67 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=972214.26..972214.27 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=67271.66..968551.14 rows=209321 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=15040.73..915770.73 rows=209321 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..14831.41 rows=837284 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=45980.97..45980.97 rows=499997 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..45980.97 rows=499997 width=25)
 JIT:
   Functions: 18
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(16 rows)

query 14 run 4
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=973214.71..973214.73 rows=1 width=32)
   ->  Finalize Aggregate  (cost=973214.71..973214.73 rows=1 width=32)
         ->  Gather  (cost=973214.26..973214.67 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=972214.26..972214.27 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=67271.66..968551.14 rows=209321 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=15040.73..915770.73 rows=209321 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..14831.41 rows=837284 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=45980.97..45980.97 rows=499997 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..45980.97 rows=499997 width=25)
 JIT:
   Functions: 18
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(16 rows)

query 14 run 5
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=973214.71..973214.73 rows=1 width=32)
   ->  Finalize Aggregate  (cost=973214.71..973214.73 rows=1 width=32)
         ->  Gather  (cost=973214.26..973214.67 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=972214.26..972214.27 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=67271.66..968551.14 rows=209321 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=15040.73..915770.73 rows=209321 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..14831.41 rows=837284 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=45980.97..45980.97 rows=499997 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..45980.97 rows=499997 width=25)
 JIT:
   Functions: 18
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(16 rows)

query 15 run 1
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2740443.44..2740551.43 rows=1 width=103)
   InitPlan 1
     ->  Aggregate  (cost=1388346.67..1388346.68 rows=1 width=32)
           ->  Finalize HashAggregate  (cost=1385911.42..1387129.05 rows=97410 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather  (cost=1342807.50..1382989.12 rows=389640 width=36)
                       Workers Planned: 4
                       ->  Partial HashAggregate  (cost=1341807.50..1343025.12 rows=97410 width=36)
                             Group Key: lineitem_1.l_suppkey
                             ->  Parallel Bitmap Heap Scan on lineitem lineitem_1  (cost=39978.55..1336243.11 rows=556439 width=16)
                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..39422.12 rows=2225755 width=0)
                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=1352096.76..1404685.16 rows=487 width=103)
         ->  Finalize GroupAggregate  (cost=1352096.47..1403133.32 rows=487 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
               ->  Gather Merge  (cost=1352096.47..1398749.87 rows=389640 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=1351096.41..1351339.93 rows=97410 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=1341807.50..1343025.12 rows=97410 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=39978.55..1336243.11 rows=556439 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..39422.12 rows=2225755 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..3.18 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
 JIT:
   Functions: 25
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(32 rows)

DROP VIEW
query 15 run 2
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2740443.44..2740551.43 rows=1 width=103)
   InitPlan 1
     ->  Aggregate  (cost=1388346.67..1388346.68 rows=1 width=32)
           ->  Finalize HashAggregate  (cost=1385911.42..1387129.05 rows=97410 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather  (cost=1342807.50..1382989.12 rows=389640 width=36)
                       Workers Planned: 4
                       ->  Partial HashAggregate  (cost=1341807.50..1343025.12 rows=97410 width=36)
                             Group Key: lineitem_1.l_suppkey
                             ->  Parallel Bitmap Heap Scan on lineitem lineitem_1  (cost=39978.55..1336243.11 rows=556439 width=16)
                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..39422.12 rows=2225755 width=0)
                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=1352096.76..1404685.16 rows=487 width=103)
         ->  Finalize GroupAggregate  (cost=1352096.47..1403133.32 rows=487 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
               ->  Gather Merge  (cost=1352096.47..1398749.87 rows=389640 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=1351096.41..1351339.93 rows=97410 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=1341807.50..1343025.12 rows=97410 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=39978.55..1336243.11 rows=556439 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..39422.12 rows=2225755 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..3.18 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
 JIT:
   Functions: 25
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(32 rows)

DROP VIEW
query 15 run 3
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2740443.44..2740551.43 rows=1 width=103)
   InitPlan 1
     ->  Aggregate  (cost=1388346.67..1388346.68 rows=1 width=32)
           ->  Finalize HashAggregate  (cost=1385911.42..1387129.05 rows=97410 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather  (cost=1342807.50..1382989.12 rows=389640 width=36)
                       Workers Planned: 4
                       ->  Partial HashAggregate  (cost=1341807.50..1343025.12 rows=97410 width=36)
                             Group Key: lineitem_1.l_suppkey
                             ->  Parallel Bitmap Heap Scan on lineitem lineitem_1  (cost=39978.55..1336243.11 rows=556439 width=16)
                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..39422.12 rows=2225755 width=0)
                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=1352096.76..1404685.16 rows=487 width=103)
         ->  Finalize GroupAggregate  (cost=1352096.47..1403133.32 rows=487 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
               ->  Gather Merge  (cost=1352096.47..1398749.87 rows=389640 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=1351096.41..1351339.93 rows=97410 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=1341807.50..1343025.12 rows=97410 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=39978.55..1336243.11 rows=556439 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..39422.12 rows=2225755 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..3.18 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
 JIT:
   Functions: 25
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(32 rows)

DROP VIEW
query 15 run 4
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2740443.44..2740551.43 rows=1 width=103)
   InitPlan 1
     ->  Aggregate  (cost=1388346.67..1388346.68 rows=1 width=32)
           ->  Finalize HashAggregate  (cost=1385911.42..1387129.05 rows=97410 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather  (cost=1342807.50..1382989.12 rows=389640 width=36)
                       Workers Planned: 4
                       ->  Partial HashAggregate  (cost=1341807.50..1343025.12 rows=97410 width=36)
                             Group Key: lineitem_1.l_suppkey
                             ->  Parallel Bitmap Heap Scan on lineitem lineitem_1  (cost=39978.55..1336243.11 rows=556439 width=16)
                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..39422.12 rows=2225755 width=0)
                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=1352096.76..1404685.16 rows=487 width=103)
         ->  Finalize GroupAggregate  (cost=1352096.47..1403133.32 rows=487 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
               ->  Gather Merge  (cost=1352096.47..1398749.87 rows=389640 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=1351096.41..1351339.93 rows=97410 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=1341807.50..1343025.12 rows=97410 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=39978.55..1336243.11 rows=556439 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..39422.12 rows=2225755 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..3.18 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
 JIT:
   Functions: 25
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(32 rows)

DROP VIEW
query 15 run 5
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2740443.44..2740551.43 rows=1 width=103)
   InitPlan 1
     ->  Aggregate  (cost=1388346.67..1388346.68 rows=1 width=32)
           ->  Finalize HashAggregate  (cost=1385911.42..1387129.05 rows=97410 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather  (cost=1342807.50..1382989.12 rows=389640 width=36)
                       Workers Planned: 4
                       ->  Partial HashAggregate  (cost=1341807.50..1343025.12 rows=97410 width=36)
                             Group Key: lineitem_1.l_suppkey
                             ->  Parallel Bitmap Heap Scan on lineitem lineitem_1  (cost=39978.55..1336243.11 rows=556439 width=16)
                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..39422.12 rows=2225755 width=0)
                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=1352096.76..1404685.16 rows=487 width=103)
         ->  Finalize GroupAggregate  (cost=1352096.47..1403133.32 rows=487 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
               ->  Gather Merge  (cost=1352096.47..1398749.87 rows=389640 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=1351096.41..1351339.93 rows=97410 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=1341807.50..1343025.12 rows=97410 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=39978.55..1336243.11 rows=556439 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..39422.12 rows=2225755 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..3.18 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
 JIT:
   Functions: 25
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(32 rows)

DROP VIEW
query 16 run 1
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=263606.80..263606.80 rows=1 width=44)
   ->  Sort  (cost=263606.80..263993.05 rows=154502 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=183304.09..262834.29 rows=154502 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Gather Merge  (cost=183304.09..255278.14 rows=601113 width=40)
                     Workers Planned: 4
                     ->  Sort  (cost=182304.03..182679.72 rows=150278 width=40)
                           Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                           ->  Parallel Hash Join  (cost=57894.28..169382.17 rows=150278 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=3473.96..112337.28 rows=999836 width=8)
                                       Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=1010 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=53480.93..53480.93 rows=75151 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..53480.93 rows=75151 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
 JIT:
   Functions: 24
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(22 rows)

query 16 run 2
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=263606.80..263606.80 rows=1 width=44)
   ->  Sort  (cost=263606.80..263993.05 rows=154502 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=183304.09..262834.29 rows=154502 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Gather Merge  (cost=183304.09..255278.14 rows=601113 width=40)
                     Workers Planned: 4
                     ->  Sort  (cost=182304.03..182679.72 rows=150278 width=40)
                           Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                           ->  Parallel Hash Join  (cost=57894.28..169382.17 rows=150278 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=3473.96..112337.28 rows=999836 width=8)
                                       Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=1010 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=53480.93..53480.93 rows=75151 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..53480.93 rows=75151 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
 JIT:
   Functions: 24
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(22 rows)

query 16 run 3
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=263606.80..263606.80 rows=1 width=44)
   ->  Sort  (cost=263606.80..263993.05 rows=154502 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=183304.09..262834.29 rows=154502 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Gather Merge  (cost=183304.09..255278.14 rows=601113 width=40)
                     Workers Planned: 4
                     ->  Sort  (cost=182304.03..182679.72 rows=150278 width=40)
                           Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                           ->  Parallel Hash Join  (cost=57894.28..169382.17 rows=150278 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=3473.96..112337.28 rows=999836 width=8)
                                       Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=1010 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=53480.93..53480.93 rows=75151 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..53480.93 rows=75151 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
 JIT:
   Functions: 24
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(22 rows)

query 16 run 4
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=263606.80..263606.80 rows=1 width=44)
   ->  Sort  (cost=263606.80..263993.05 rows=154502 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=183304.09..262834.29 rows=154502 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Gather Merge  (cost=183304.09..255278.14 rows=601113 width=40)
                     Workers Planned: 4
                     ->  Sort  (cost=182304.03..182679.72 rows=150278 width=40)
                           Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                           ->  Parallel Hash Join  (cost=57894.28..169382.17 rows=150278 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=3473.96..112337.28 rows=999836 width=8)
                                       Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=1010 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=53480.93..53480.93 rows=75151 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..53480.93 rows=75151 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
 JIT:
   Functions: 24
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(22 rows)

query 16 run 5
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=263606.80..263606.80 rows=1 width=44)
   ->  Sort  (cost=263606.80..263993.05 rows=154502 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=183304.09..262834.29 rows=154502 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Gather Merge  (cost=183304.09..255278.14 rows=601113 width=40)
                     Workers Planned: 4
                     ->  Sort  (cost=182304.03..182679.72 rows=150278 width=40)
                           Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                           ->  Parallel Hash Join  (cost=57894.28..169382.17 rows=150278 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=3473.96..112337.28 rows=999836 width=8)
                                       Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=1010 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=53480.93..53480.93 rows=75151 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..53480.93 rows=75151 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
 JIT:
   Functions: 24
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(22 rows)

query 17 run 1
SET
SET
SET
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1746929.27..1746929.28 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1746929.27..1746929.28 rows=1 width=32)
         ->  Gather  (cost=1746928.84..1746929.25 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1745928.84..1745928.85 rows=1 width=32)
                     ->  Nested Loop  (cost=48504.87..1745916.52 rows=4924 width=8)
                           Join Filter: (part.p_partkey = lineitem.l_partkey)
                           ->  Merge Join  (cost=48504.30..1744401.86 rows=492 width=40)
                                 Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                                 ->  Sort  (cost=48503.74..48505.01 rows=507 width=4)
                                       Sort Key: part.p_partkey
                                       ->  Parallel Seq Scan on part  (cost=0.00..48480.96 rows=507 width=4)
                                             Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  GroupAggregate  (cost=0.56..1691033.38 rows=1942908 width=36)
                                       Group Key: lineitem_1.l_partkey
                                       ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.56..1361936.96 rows=59990560 width=9)
                           ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..2.95 rows=10 width=17)
                                 Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
 JIT:
   Functions: 20
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(21 rows)

query 17 run 2
SET
SET
SET
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1746929.27..1746929.28 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1746929.27..1746929.28 rows=1 width=32)
         ->  Gather  (cost=1746928.84..1746929.25 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1745928.84..1745928.85 rows=1 width=32)
                     ->  Nested Loop  (cost=48504.87..1745916.52 rows=4924 width=8)
                           Join Filter: (part.p_partkey = lineitem.l_partkey)
                           ->  Merge Join  (cost=48504.30..1744401.86 rows=492 width=40)
                                 Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                                 ->  Sort  (cost=48503.74..48505.01 rows=507 width=4)
                                       Sort Key: part.p_partkey
                                       ->  Parallel Seq Scan on part  (cost=0.00..48480.96 rows=507 width=4)
                                             Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  GroupAggregate  (cost=0.56..1691033.38 rows=1942908 width=36)
                                       Group Key: lineitem_1.l_partkey
                                       ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.56..1361936.96 rows=59990560 width=9)
                           ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..2.95 rows=10 width=17)
                                 Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
 JIT:
   Functions: 20
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(21 rows)

query 17 run 3
SET
SET
SET
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1746929.27..1746929.28 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1746929.27..1746929.28 rows=1 width=32)
         ->  Gather  (cost=1746928.84..1746929.25 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1745928.84..1745928.85 rows=1 width=32)
                     ->  Nested Loop  (cost=48504.87..1745916.52 rows=4924 width=8)
                           Join Filter: (part.p_partkey = lineitem.l_partkey)
                           ->  Merge Join  (cost=48504.30..1744401.86 rows=492 width=40)
                                 Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                                 ->  Sort  (cost=48503.74..48505.01 rows=507 width=4)
                                       Sort Key: part.p_partkey
                                       ->  Parallel Seq Scan on part  (cost=0.00..48480.96 rows=507 width=4)
                                             Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  GroupAggregate  (cost=0.56..1691033.38 rows=1942908 width=36)
                                       Group Key: lineitem_1.l_partkey
                                       ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.56..1361936.96 rows=59990560 width=9)
                           ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..2.95 rows=10 width=17)
                                 Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
 JIT:
   Functions: 20
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(21 rows)

query 17 run 4
SET
SET
SET
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1746929.27..1746929.28 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1746929.27..1746929.28 rows=1 width=32)
         ->  Gather  (cost=1746928.84..1746929.25 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1745928.84..1745928.85 rows=1 width=32)
                     ->  Nested Loop  (cost=48504.87..1745916.52 rows=4924 width=8)
                           Join Filter: (part.p_partkey = lineitem.l_partkey)
                           ->  Merge Join  (cost=48504.30..1744401.86 rows=492 width=40)
                                 Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                                 ->  Sort  (cost=48503.74..48505.01 rows=507 width=4)
                                       Sort Key: part.p_partkey
                                       ->  Parallel Seq Scan on part  (cost=0.00..48480.96 rows=507 width=4)
                                             Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  GroupAggregate  (cost=0.56..1691033.38 rows=1942908 width=36)
                                       Group Key: lineitem_1.l_partkey
                                       ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.56..1361936.96 rows=59990560 width=9)
                           ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..2.95 rows=10 width=17)
                                 Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
 JIT:
   Functions: 20
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(21 rows)

query 17 run 5
SET
SET
SET
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1746929.27..1746929.28 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1746929.27..1746929.28 rows=1 width=32)
         ->  Gather  (cost=1746928.84..1746929.25 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1745928.84..1745928.85 rows=1 width=32)
                     ->  Nested Loop  (cost=48504.87..1745916.52 rows=4924 width=8)
                           Join Filter: (part.p_partkey = lineitem.l_partkey)
                           ->  Merge Join  (cost=48504.30..1744401.86 rows=492 width=40)
                                 Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                                 ->  Sort  (cost=48503.74..48505.01 rows=507 width=4)
                                       Sort Key: part.p_partkey
                                       ->  Parallel Seq Scan on part  (cost=0.00..48480.96 rows=507 width=4)
                                             Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  GroupAggregate  (cost=0.56..1691033.38 rows=1942908 width=36)
                                       Group Key: lineitem_1.l_partkey
                                       ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.56..1361936.96 rows=59990560 width=9)
                           ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..2.95 rows=10 width=17)
                                 Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
 JIT:
   Functions: 20
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(21 rows)

query 18 run 1
SET
SET
SET
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=6975394.57..6975394.82 rows=100 width=71)
   ->  Sort  (cost=6975394.57..7025378.41 rows=19993537 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=836989.84..6211255.96 rows=19993537 width=71)
               Group Key: orders.o_orderkey, customer.c_custkey
               ->  Incremental Sort  (cost=836989.84..5811385.22 rows=19993537 width=44)
                     Sort Key: orders.o_orderkey, customer.c_custkey
                     Presorted Key: orders.o_orderkey
                     ->  Merge Join  (cost=836989.55..5086445.40 rows=19993537 width=44)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Gather Merge  (cost=836716.67..3362501.15 rows=4999213 width=43)
                                 Workers Planned: 4
                                 ->  Merge Join  (cost=835716.61..2766046.63 rows=1249803 width=43)
                                       Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Sort  (cost=835716.04..845091.12 rows=3750032 width=39)
                                             Sort Key: orders.o_orderkey
                                             ->  Parallel Hash Join  (cost=44384.03..352996.21 rows=3750032 width=39)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..298768.32 rows=3750032 width=20)
                                                   ->  Parallel Hash  (cost=39696.79..39696.79 rows=374979 width=23)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..39696.79 rows=374979 width=23)
                                       ->  GroupAggregate  (cost=0.56..1886584.36 rows=4999213 width=4)
                                             Group Key: lineitem_1.l_orderkey
                                             Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                             ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.56..1361666.96 rows=59990560 width=9)
                           ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.56..1361666.96 rows=59990560 width=9)
 JIT:
   Functions: 29
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(29 rows)

query 18 run 2
SET
SET
SET
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=6975394.57..6975394.82 rows=100 width=71)
   ->  Sort  (cost=6975394.57..7025378.41 rows=19993537 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=836989.84..6211255.96 rows=19993537 width=71)
               Group Key: orders.o_orderkey, customer.c_custkey
               ->  Incremental Sort  (cost=836989.84..5811385.22 rows=19993537 width=44)
                     Sort Key: orders.o_orderkey, customer.c_custkey
                     Presorted Key: orders.o_orderkey
                     ->  Merge Join  (cost=836989.55..5086445.40 rows=19993537 width=44)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Gather Merge  (cost=836716.67..3362501.15 rows=4999213 width=43)
                                 Workers Planned: 4
                                 ->  Merge Join  (cost=835716.61..2766046.63 rows=1249803 width=43)
                                       Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Sort  (cost=835716.04..845091.12 rows=3750032 width=39)
                                             Sort Key: orders.o_orderkey
                                             ->  Parallel Hash Join  (cost=44384.03..352996.21 rows=3750032 width=39)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..298768.32 rows=3750032 width=20)
                                                   ->  Parallel Hash  (cost=39696.79..39696.79 rows=374979 width=23)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..39696.79 rows=374979 width=23)
                                       ->  GroupAggregate  (cost=0.56..1886584.36 rows=4999213 width=4)
                                             Group Key: lineitem_1.l_orderkey
                                             Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                             ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.56..1361666.96 rows=59990560 width=9)
                           ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.56..1361666.96 rows=59990560 width=9)
 JIT:
   Functions: 29
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(29 rows)

query 18 run 3
SET
SET
SET
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=6975394.57..6975394.82 rows=100 width=71)
   ->  Sort  (cost=6975394.57..7025378.41 rows=19993537 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=836989.84..6211255.96 rows=19993537 width=71)
               Group Key: orders.o_orderkey, customer.c_custkey
               ->  Incremental Sort  (cost=836989.84..5811385.22 rows=19993537 width=44)
                     Sort Key: orders.o_orderkey, customer.c_custkey
                     Presorted Key: orders.o_orderkey
                     ->  Merge Join  (cost=836989.55..5086445.40 rows=19993537 width=44)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Gather Merge  (cost=836716.67..3362501.15 rows=4999213 width=43)
                                 Workers Planned: 4
                                 ->  Merge Join  (cost=835716.61..2766046.63 rows=1249803 width=43)
                                       Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Sort  (cost=835716.04..845091.12 rows=3750032 width=39)
                                             Sort Key: orders.o_orderkey
                                             ->  Parallel Hash Join  (cost=44384.03..352996.21 rows=3750032 width=39)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..298768.32 rows=3750032 width=20)
                                                   ->  Parallel Hash  (cost=39696.79..39696.79 rows=374979 width=23)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..39696.79 rows=374979 width=23)
                                       ->  GroupAggregate  (cost=0.56..1886584.36 rows=4999213 width=4)
                                             Group Key: lineitem_1.l_orderkey
                                             Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                             ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.56..1361666.96 rows=59990560 width=9)
                           ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.56..1361666.96 rows=59990560 width=9)
 JIT:
   Functions: 29
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(29 rows)

query 18 run 4
SET
SET
SET
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=6975394.57..6975394.82 rows=100 width=71)
   ->  Sort  (cost=6975394.57..7025378.41 rows=19993537 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=836989.84..6211255.96 rows=19993537 width=71)
               Group Key: orders.o_orderkey, customer.c_custkey
               ->  Incremental Sort  (cost=836989.84..5811385.22 rows=19993537 width=44)
                     Sort Key: orders.o_orderkey, customer.c_custkey
                     Presorted Key: orders.o_orderkey
                     ->  Merge Join  (cost=836989.55..5086445.40 rows=19993537 width=44)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Gather Merge  (cost=836716.67..3362501.15 rows=4999213 width=43)
                                 Workers Planned: 4
                                 ->  Merge Join  (cost=835716.61..2766046.63 rows=1249803 width=43)
                                       Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Sort  (cost=835716.04..845091.12 rows=3750032 width=39)
                                             Sort Key: orders.o_orderkey
                                             ->  Parallel Hash Join  (cost=44384.03..352996.21 rows=3750032 width=39)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..298768.32 rows=3750032 width=20)
                                                   ->  Parallel Hash  (cost=39696.79..39696.79 rows=374979 width=23)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..39696.79 rows=374979 width=23)
                                       ->  GroupAggregate  (cost=0.56..1886584.36 rows=4999213 width=4)
                                             Group Key: lineitem_1.l_orderkey
                                             Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                             ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.56..1361666.96 rows=59990560 width=9)
                           ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.56..1361666.96 rows=59990560 width=9)
 JIT:
   Functions: 29
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(29 rows)

query 18 run 5
SET
SET
SET
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=6975394.57..6975394.82 rows=100 width=71)
   ->  Sort  (cost=6975394.57..7025378.41 rows=19993537 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=836989.84..6211255.96 rows=19993537 width=71)
               Group Key: orders.o_orderkey, customer.c_custkey
               ->  Incremental Sort  (cost=836989.84..5811385.22 rows=19993537 width=44)
                     Sort Key: orders.o_orderkey, customer.c_custkey
                     Presorted Key: orders.o_orderkey
                     ->  Merge Join  (cost=836989.55..5086445.40 rows=19993537 width=44)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Gather Merge  (cost=836716.67..3362501.15 rows=4999213 width=43)
                                 Workers Planned: 4
                                 ->  Merge Join  (cost=835716.61..2766046.63 rows=1249803 width=43)
                                       Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Sort  (cost=835716.04..845091.12 rows=3750032 width=39)
                                             Sort Key: orders.o_orderkey
                                             ->  Parallel Hash Join  (cost=44384.03..352996.21 rows=3750032 width=39)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..298768.32 rows=3750032 width=20)
                                                   ->  Parallel Hash  (cost=39696.79..39696.79 rows=374979 width=23)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..39696.79 rows=374979 width=23)
                                       ->  GroupAggregate  (cost=0.56..1886584.36 rows=4999213 width=4)
                                             Group Key: lineitem_1.l_orderkey
                                             Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                             ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.56..1361666.96 rows=59990560 width=9)
                           ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.56..1361666.96 rows=59990560 width=9)
 JIT:
   Functions: 29
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(29 rows)

query 19 run 1
SET
SET
SET


 Limit  (cost=69412.15..69412.16 rows=1 width=32)
   ->  Finalize Aggregate  (cost=69412.15..69412.16 rows=1 width=32)
         ->  Gather  (cost=69411.71..69412.12 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=68411.71..68411.72 rows=1 width=32)
                     ->  Nested Loop  (cost=0.56..68409.58 rows=284 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..62230.88 rows=1186 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..5.20 rows=1 width=21)
                                 Index Cond: ((l_partkey = part.p_partkey) AND (l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                                 Filter: ((((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 19 run 2
SET
SET
SET


 Limit  (cost=69412.15..69412.16 rows=1 width=32)
   ->  Finalize Aggregate  (cost=69412.15..69412.16 rows=1 width=32)
         ->  Gather  (cost=69411.71..69412.12 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=68411.71..68411.72 rows=1 width=32)
                     ->  Nested Loop  (cost=0.56..68409.58 rows=284 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..62230.88 rows=1186 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..5.20 rows=1 width=21)
                                 Index Cond: ((l_partkey = part.p_partkey) AND (l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                                 Filter: ((((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 19 run 3
SET
SET
SET
                                                                                                                                                                                                                                                                                                                                                                                                                                                              QUERY PLAN                                                                                                                                                                                                                                                                                                                                                                                                                                                              

 Limit  (cost=69412.15..69412.16 rows=1 width=32)
   ->  Finalize Aggregate  (cost=69412.15..69412.16 rows=1 width=32)
         ->  Gather  (cost=69411.71..69412.12 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=68411.71..68411.72 rows=1 width=32)
                     ->  Nested Loop  (cost=0.56..68409.58 rows=284 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..62230.88 rows=1186 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..5.20 rows=1 width=21)
                                 Index Cond: ((l_partkey = part.p_partkey) AND (l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                                 Filter: ((((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 19 run 4
SET
SET
SET


 Limit  (cost=69412.15..69412.16 rows=1 width=32)
   ->  Finalize Aggregate  (cost=69412.15..69412.16 rows=1 width=32)
         ->  Gather  (cost=69411.71..69412.12 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=68411.71..68411.72 rows=1 width=32)
                     ->  Nested Loop  (cost=0.56..68409.58 rows=284 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..62230.88 rows=1186 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..5.20 rows=1 width=21)
                                 Index Cond: ((l_partkey = part.p_partkey) AND (l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                                 Filter: ((((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 19 run 5
SET
SET
SET

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=69412.15..69412.16 rows=1 width=32)
   ->  Finalize Aggregate  (cost=69412.15..69412.16 rows=1 width=32)
         ->  Gather  (cost=69411.71..69412.12 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=68411.71..68411.72 rows=1 width=32)
                     ->  Nested Loop  (cost=0.56..68409.58 rows=284 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..62230.88 rows=1186 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..5.20 rows=1 width=21)
                                 Index Cond: ((l_partkey = part.p_partkey) AND (l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                                 Filter: ((((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 20 run 1
SET
SET
SET
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2529351.37..2728447.51 rows=1 width=51)
   ->  Nested Loop Semi Join  (cost=2529351.37..2728447.51 rows=1 width=51)
         Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
         ->  Gather Merge  (cost=4122.93..4578.81 rows=4000 width=55)
               Workers Planned: 1
               ->  Sort  (cost=3122.92..3128.80 rows=2353 width=55)
                     Sort Key: supplier.s_name
                     ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=55)
                           Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=59)
                           ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'IRAQ'::bpchar)
         ->  Materialize  (cost=2525228.44..2723688.70 rows=3 width=8)
               ->  Hash Join  (cost=2525228.44..2723688.69 rows=3 width=8)
                     Hash Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                     Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                     ->  HashAggregate  (cost=2455087.37..2617161.96 rows=4851402 width=40)
                           Group Key: lineitem.l_partkey, lineitem.l_suppkey
                           Planned Partitions: 32
                           ->  Seq Scan on lineitem  (cost=0.00..2025001.40 rows=9144685 width=13)
                                 Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                     ->  Hash  (cost=68929.15..68929.15 rows=80795 width=16)
                           ->  Gather  (cost=1000.86..68929.15 rows=80795 width=16)
                                 Workers Planned: 4
                                 ->  Nested Loop  (cost=0.86..59849.65 rows=20199 width=16)
                                       ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.43..45556.34 rows=5050 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.43..2.64 rows=19 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
 JIT:
   Functions: 33
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(33 rows)

query 20 run 2
SET
SET
SET
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2529351.37..2728447.51 rows=1 width=51)
   ->  Nested Loop Semi Join  (cost=2529351.37..2728447.51 rows=1 width=51)
         Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
         ->  Gather Merge  (cost=4122.93..4578.81 rows=4000 width=55)
               Workers Planned: 1
               ->  Sort  (cost=3122.92..3128.80 rows=2353 width=55)
                     Sort Key: supplier.s_name
                     ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=55)
                           Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=59)
                           ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'IRAQ'::bpchar)
         ->  Materialize  (cost=2525228.44..2723688.70 rows=3 width=8)
               ->  Hash Join  (cost=2525228.44..2723688.69 rows=3 width=8)
                     Hash Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                     Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                     ->  HashAggregate  (cost=2455087.37..2617161.96 rows=4851402 width=40)
                           Group Key: lineitem.l_partkey, lineitem.l_suppkey
                           Planned Partitions: 32
                           ->  Seq Scan on lineitem  (cost=0.00..2025001.40 rows=9144685 width=13)
                                 Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                     ->  Hash  (cost=68929.15..68929.15 rows=80795 width=16)
                           ->  Gather  (cost=1000.86..68929.15 rows=80795 width=16)
                                 Workers Planned: 4
                                 ->  Nested Loop  (cost=0.86..59849.65 rows=20199 width=16)
                                       ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.43..45556.34 rows=5050 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.43..2.64 rows=19 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
 JIT:
   Functions: 33
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(33 rows)

query 20 run 3
SET
SET
SET
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2529351.37..2728447.51 rows=1 width=51)
   ->  Nested Loop Semi Join  (cost=2529351.37..2728447.51 rows=1 width=51)
         Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
         ->  Gather Merge  (cost=4122.93..4578.81 rows=4000 width=55)
               Workers Planned: 1
               ->  Sort  (cost=3122.92..3128.80 rows=2353 width=55)
                     Sort Key: supplier.s_name
                     ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=55)
                           Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=59)
                           ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'IRAQ'::bpchar)
         ->  Materialize  (cost=2525228.44..2723688.70 rows=3 width=8)
               ->  Hash Join  (cost=2525228.44..2723688.69 rows=3 width=8)
                     Hash Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                     Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                     ->  HashAggregate  (cost=2455087.37..2617161.96 rows=4851402 width=40)
                           Group Key: lineitem.l_partkey, lineitem.l_suppkey
                           Planned Partitions: 32
                           ->  Seq Scan on lineitem  (cost=0.00..2025001.40 rows=9144685 width=13)
                                 Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                     ->  Hash  (cost=68929.15..68929.15 rows=80795 width=16)
                           ->  Gather  (cost=1000.86..68929.15 rows=80795 width=16)
                                 Workers Planned: 4
                                 ->  Nested Loop  (cost=0.86..59849.65 rows=20199 width=16)
                                       ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.43..45556.34 rows=5050 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.43..2.64 rows=19 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
 JIT:
   Functions: 33
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(33 rows)

query 20 run 4
SET
SET
SET
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2529351.37..2728447.51 rows=1 width=51)
   ->  Nested Loop Semi Join  (cost=2529351.37..2728447.51 rows=1 width=51)
         Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
         ->  Gather Merge  (cost=4122.93..4578.81 rows=4000 width=55)
               Workers Planned: 1
               ->  Sort  (cost=3122.92..3128.80 rows=2353 width=55)
                     Sort Key: supplier.s_name
                     ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=55)
                           Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=59)
                           ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'IRAQ'::bpchar)
         ->  Materialize  (cost=2525228.44..2723688.70 rows=3 width=8)
               ->  Hash Join  (cost=2525228.44..2723688.69 rows=3 width=8)
                     Hash Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                     Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                     ->  HashAggregate  (cost=2455087.37..2617161.96 rows=4851402 width=40)
                           Group Key: lineitem.l_partkey, lineitem.l_suppkey
                           Planned Partitions: 32
                           ->  Seq Scan on lineitem  (cost=0.00..2025001.40 rows=9144685 width=13)
                                 Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                     ->  Hash  (cost=68929.15..68929.15 rows=80795 width=16)
                           ->  Gather  (cost=1000.86..68929.15 rows=80795 width=16)
                                 Workers Planned: 4
                                 ->  Nested Loop  (cost=0.86..59849.65 rows=20199 width=16)
                                       ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.43..45556.34 rows=5050 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.43..2.64 rows=19 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
 JIT:
   Functions: 33
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(33 rows)

query 20 run 5
SET
SET
SET
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2529351.37..2728447.51 rows=1 width=51)
   ->  Nested Loop Semi Join  (cost=2529351.37..2728447.51 rows=1 width=51)
         Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
         ->  Gather Merge  (cost=4122.93..4578.81 rows=4000 width=55)
               Workers Planned: 1
               ->  Sort  (cost=3122.92..3128.80 rows=2353 width=55)
                     Sort Key: supplier.s_name
                     ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=55)
                           Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=59)
                           ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'IRAQ'::bpchar)
         ->  Materialize  (cost=2525228.44..2723688.70 rows=3 width=8)
               ->  Hash Join  (cost=2525228.44..2723688.69 rows=3 width=8)
                     Hash Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                     Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                     ->  HashAggregate  (cost=2455087.37..2617161.96 rows=4851402 width=40)
                           Group Key: lineitem.l_partkey, lineitem.l_suppkey
                           Planned Partitions: 32
                           ->  Seq Scan on lineitem  (cost=0.00..2025001.40 rows=9144685 width=13)
                                 Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                     ->  Hash  (cost=68929.15..68929.15 rows=80795 width=16)
                           ->  Gather  (cost=1000.86..68929.15 rows=80795 width=16)
                                 Workers Planned: 4
                                 ->  Nested Loop  (cost=0.86..59849.65 rows=20199 width=16)
                                       ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.43..45556.34 rows=5050 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.43..2.64 rows=19 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
 JIT:
   Functions: 33
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(33 rows)

query 21 run 1
SET
SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=565606.93..565606.93 rows=1 width=34)
   ->  Sort  (cost=565606.93..565606.93 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=565606.90..565606.92 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=565606.90..565606.90 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=286234.05..565606.89 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=286233.48..565604.24 rows=1 width=38)
                                 ->  Gather  (cost=286233.05..565601.80 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Parallel Hash Right Anti Join  (cost=285233.05..564601.70 rows=1 width=34)
                                             Hash Cond: (l3.l_orderkey = l1.l_orderkey)
                                             Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                             ->  Parallel Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.56..259788.96 rows=4999213 width=8)
                                             ->  Parallel Hash  (cost=282732.88..282732.88 rows=199968 width=34)
                                                   ->  Parallel Hash Join  (cost=3021.13..282732.88 rows=199968 width=34)
                                                         Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                         ->  Parallel Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.56..259788.96 rows=4999213 width=8)
                                                         ->  Parallel Hash  (cost=2991.15..2991.15 rows=2353 width=30)
                                                               ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=30)
                                                                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                                     ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=34)
                                                                     ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                                 Filter: (n_name = 'PERU'::bpchar)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.45 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.56..2.63 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
 JIT:
   Functions: 36
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(34 rows)

query 21 run 2
SET
SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=565606.93..565606.93 rows=1 width=34)
   ->  Sort  (cost=565606.93..565606.93 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=565606.90..565606.92 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=565606.90..565606.90 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=286234.05..565606.89 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=286233.48..565604.24 rows=1 width=38)
                                 ->  Gather  (cost=286233.05..565601.80 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Parallel Hash Right Anti Join  (cost=285233.05..564601.70 rows=1 width=34)
                                             Hash Cond: (l3.l_orderkey = l1.l_orderkey)
                                             Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                             ->  Parallel Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.56..259788.96 rows=4999213 width=8)
                                             ->  Parallel Hash  (cost=282732.88..282732.88 rows=199968 width=34)
                                                   ->  Parallel Hash Join  (cost=3021.13..282732.88 rows=199968 width=34)
                                                         Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                         ->  Parallel Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.56..259788.96 rows=4999213 width=8)
                                                         ->  Parallel Hash  (cost=2991.15..2991.15 rows=2353 width=30)
                                                               ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=30)
                                                                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                                     ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=34)
                                                                     ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                                 Filter: (n_name = 'PERU'::bpchar)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.45 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.56..2.63 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
 JIT:
   Functions: 36
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(34 rows)

query 21 run 3
SET
SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=565606.93..565606.93 rows=1 width=34)
   ->  Sort  (cost=565606.93..565606.93 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=565606.90..565606.92 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=565606.90..565606.90 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=286234.05..565606.89 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=286233.48..565604.24 rows=1 width=38)
                                 ->  Gather  (cost=286233.05..565601.80 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Parallel Hash Right Anti Join  (cost=285233.05..564601.70 rows=1 width=34)
                                             Hash Cond: (l3.l_orderkey = l1.l_orderkey)
                                             Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                             ->  Parallel Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.56..259788.96 rows=4999213 width=8)
                                             ->  Parallel Hash  (cost=282732.88..282732.88 rows=199968 width=34)
                                                   ->  Parallel Hash Join  (cost=3021.13..282732.88 rows=199968 width=34)
                                                         Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                         ->  Parallel Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.56..259788.96 rows=4999213 width=8)
                                                         ->  Parallel Hash  (cost=2991.15..2991.15 rows=2353 width=30)
                                                               ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=30)
                                                                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                                     ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=34)
                                                                     ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                                 Filter: (n_name = 'PERU'::bpchar)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.45 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.56..2.63 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
 JIT:
   Functions: 36
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(34 rows)

query 21 run 4
SET
SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=565606.93..565606.93 rows=1 width=34)
   ->  Sort  (cost=565606.93..565606.93 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=565606.90..565606.92 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=565606.90..565606.90 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=286234.05..565606.89 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=286233.48..565604.24 rows=1 width=38)
                                 ->  Gather  (cost=286233.05..565601.80 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Parallel Hash Right Anti Join  (cost=285233.05..564601.70 rows=1 width=34)
                                             Hash Cond: (l3.l_orderkey = l1.l_orderkey)
                                             Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                             ->  Parallel Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.56..259788.96 rows=4999213 width=8)
                                             ->  Parallel Hash  (cost=282732.88..282732.88 rows=199968 width=34)
                                                   ->  Parallel Hash Join  (cost=3021.13..282732.88 rows=199968 width=34)
                                                         Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                         ->  Parallel Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.56..259788.96 rows=4999213 width=8)
                                                         ->  Parallel Hash  (cost=2991.15..2991.15 rows=2353 width=30)
                                                               ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=30)
                                                                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                                     ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=34)
                                                                     ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                                 Filter: (n_name = 'PERU'::bpchar)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.45 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.56..2.63 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
 JIT:
   Functions: 36
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(34 rows)

query 21 run 5
SET
SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=565606.93..565606.93 rows=1 width=34)
   ->  Sort  (cost=565606.93..565606.93 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=565606.90..565606.92 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=565606.90..565606.90 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=286234.05..565606.89 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=286233.48..565604.24 rows=1 width=38)
                                 ->  Gather  (cost=286233.05..565601.80 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Parallel Hash Right Anti Join  (cost=285233.05..564601.70 rows=1 width=34)
                                             Hash Cond: (l3.l_orderkey = l1.l_orderkey)
                                             Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                             ->  Parallel Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.56..259788.96 rows=4999213 width=8)
                                             ->  Parallel Hash  (cost=282732.88..282732.88 rows=199968 width=34)
                                                   ->  Parallel Hash Join  (cost=3021.13..282732.88 rows=199968 width=34)
                                                         Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                         ->  Parallel Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.56..259788.96 rows=4999213 width=8)
                                                         ->  Parallel Hash  (cost=2991.15..2991.15 rows=2353 width=30)
                                                               ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=30)
                                                                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                                     ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=34)
                                                                     ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                                 Filter: (n_name = 'PERU'::bpchar)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.45 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.56..2.63 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
 JIT:
   Functions: 36
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(34 rows)

query 22 run 1
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=93875.73..93877.53 rows=1 width=72)
   InitPlan 1
     ->  Finalize Aggregate  (cost=46820.46..46820.47 rows=1 width=32)
           ->  Gather  (cost=46820.03..46820.44 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=45820.03..45820.04 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..45790.19 rows=11933 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=47055.26..60494.59 rows=7502 width=72)
         Group Key: SUBSTRING(customer.c_phone FROM 1 FOR 2)
         ->  Nested Loop Anti Join  (cost=47055.26..60307.04 rows=7502 width=38)
               ->  Gather Merge  (cost=47054.83..49150.07 rows=17499 width=26)
                     Workers Planned: 4
                     ->  Sort  (cost=46054.77..46065.71 rows=4375 width=26)
                           Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                           ->  Parallel Seq Scan on customer  (cost=0.00..45790.19 rows=4375 width=26)
                                 Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
               ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.65 rows=18 width=4)
                     Index Cond: (o_custkey = customer.c_custkey)
(19 rows)

query 22 run 2
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=93875.73..93877.53 rows=1 width=72)
   InitPlan 1
     ->  Finalize Aggregate  (cost=46820.46..46820.47 rows=1 width=32)
           ->  Gather  (cost=46820.03..46820.44 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=45820.03..45820.04 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..45790.19 rows=11933 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=47055.26..60494.59 rows=7502 width=72)
         Group Key: SUBSTRING(customer.c_phone FROM 1 FOR 2)
         ->  Nested Loop Anti Join  (cost=47055.26..60307.04 rows=7502 width=38)
               ->  Gather Merge  (cost=47054.83..49150.07 rows=17499 width=26)
                     Workers Planned: 4
                     ->  Sort  (cost=46054.77..46065.71 rows=4375 width=26)
                           Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                           ->  Parallel Seq Scan on customer  (cost=0.00..45790.19 rows=4375 width=26)
                                 Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
               ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.65 rows=18 width=4)
                     Index Cond: (o_custkey = customer.c_custkey)
(19 rows)

query 22 run 3
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=93875.73..93877.53 rows=1 width=72)
   InitPlan 1
     ->  Finalize Aggregate  (cost=46820.46..46820.47 rows=1 width=32)
           ->  Gather  (cost=46820.03..46820.44 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=45820.03..45820.04 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..45790.19 rows=11933 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=47055.26..60494.59 rows=7502 width=72)
         Group Key: SUBSTRING(customer.c_phone FROM 1 FOR 2)
         ->  Nested Loop Anti Join  (cost=47055.26..60307.04 rows=7502 width=38)
               ->  Gather Merge  (cost=47054.83..49150.07 rows=17499 width=26)
                     Workers Planned: 4
                     ->  Sort  (cost=46054.77..46065.71 rows=4375 width=26)
                           Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                           ->  Parallel Seq Scan on customer  (cost=0.00..45790.19 rows=4375 width=26)
                                 Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
               ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.65 rows=18 width=4)
                     Index Cond: (o_custkey = customer.c_custkey)
(19 rows)

query 22 run 4
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=93875.73..93877.53 rows=1 width=72)
   InitPlan 1
     ->  Finalize Aggregate  (cost=46820.46..46820.47 rows=1 width=32)
           ->  Gather  (cost=46820.03..46820.44 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=45820.03..45820.04 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..45790.19 rows=11933 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=47055.26..60494.59 rows=7502 width=72)
         Group Key: SUBSTRING(customer.c_phone FROM 1 FOR 2)
         ->  Nested Loop Anti Join  (cost=47055.26..60307.04 rows=7502 width=38)
               ->  Gather Merge  (cost=47054.83..49150.07 rows=17499 width=26)
                     Workers Planned: 4
                     ->  Sort  (cost=46054.77..46065.71 rows=4375 width=26)
                           Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                           ->  Parallel Seq Scan on customer  (cost=0.00..45790.19 rows=4375 width=26)
                                 Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
               ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.65 rows=18 width=4)
                     Index Cond: (o_custkey = customer.c_custkey)
(19 rows)

query 22 run 5
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=93875.73..93877.53 rows=1 width=72)
   InitPlan 1
     ->  Finalize Aggregate  (cost=46820.46..46820.47 rows=1 width=32)
           ->  Gather  (cost=46820.03..46820.44 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=45820.03..45820.04 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..45790.19 rows=11933 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=47055.26..60494.59 rows=7502 width=72)
         Group Key: SUBSTRING(customer.c_phone FROM 1 FOR 2)
         ->  Nested Loop Anti Join  (cost=47055.26..60307.04 rows=7502 width=38)
               ->  Gather Merge  (cost=47054.83..49150.07 rows=17499 width=26)
                     Workers Planned: 4
                     ->  Sort  (cost=46054.77..46065.71 rows=4375 width=26)
                           Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                           ->  Parallel Seq Scan on customer  (cost=0.00..45790.19 rows=4375 width=26)
                                 Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
               ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.65 rows=18 width=4)
                     Index Cond: (o_custkey = customer.c_custkey)
(19 rows)

