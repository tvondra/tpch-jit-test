query 1 run 1
SET
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=3949632.67..3949632.67 rows=1 width=236)
   ->  Sort  (cost=3949632.67..3949632.69 rows=6 width=236)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=3949632.48..3949632.64 rows=6 width=236)
               Group Key: l_returnflag, l_linestatus
               ->  Seq Scan on lineitem  (cost=0.00..1874981.40 rows=59275745 width=25)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(7 rows)

query 1 run 2
SET
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=3949632.67..3949632.67 rows=1 width=236)
   ->  Sort  (cost=3949632.67..3949632.69 rows=6 width=236)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=3949632.48..3949632.64 rows=6 width=236)
               Group Key: l_returnflag, l_linestatus
               ->  Seq Scan on lineitem  (cost=0.00..1874981.40 rows=59275745 width=25)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(7 rows)

query 1 run 3
SET
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=3949632.67..3949632.67 rows=1 width=236)
   ->  Sort  (cost=3949632.67..3949632.69 rows=6 width=236)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=3949632.48..3949632.64 rows=6 width=236)
               Group Key: l_returnflag, l_linestatus
               ->  Seq Scan on lineitem  (cost=0.00..1874981.40 rows=59275745 width=25)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(7 rows)

query 1 run 4
SET
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=3949632.67..3949632.67 rows=1 width=236)
   ->  Sort  (cost=3949632.67..3949632.69 rows=6 width=236)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=3949632.48..3949632.64 rows=6 width=236)
               Group Key: l_returnflag, l_linestatus
               ->  Seq Scan on lineitem  (cost=0.00..1874981.40 rows=59275745 width=25)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(7 rows)

query 1 run 5
SET
SET
SET
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit  (cost=3949632.67..3949632.67 rows=1 width=236)
   ->  Sort  (cost=3949632.67..3949632.69 rows=6 width=236)
         Sort Key: l_returnflag, l_linestatus
         ->  HashAggregate  (cost=3949632.48..3949632.64 rows=6 width=236)
               Group Key: l_returnflag, l_linestatus
               ->  Seq Scan on lineitem  (cost=0.00..1874981.40 rows=59275745 width=25)
                     Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
(7 rows)

query 2 run 1
SET
SET
SET
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=504929.95..504929.96 rows=1 width=193)
   ->  Sort  (cost=504929.95..504929.96 rows=1 width=193)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=50.37..504929.94 rows=1 width=193)
               Join Filter: (supplier.s_nationkey = nation.n_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=50.37..504927.24 rows=1 width=171)
                     ->  Nested Loop  (cost=50.37..504927.24 rows=1 width=171)
                           Join Filter: (supplier.s_suppkey = partsupp.ps_suppkey)
                           ->  Nested Loop  (cost=50.37..500456.24 rows=1 width=34)
                                 ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..54359.33 rows=8575 width=30)
                                       Index Cond: (p_size = 16)
                                       Filter: ((p_type)::text ~~ '%NICKEL'::text)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=49.94..52.01 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=49.50..49.51 rows=1 width=32)
                                               ->  Nested Loop  (cost=2.41..49.49 rows=4 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Hash Join  (cost=2.41..48.20 rows=18 width=10)
                                                           Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                                           ->  Nested Loop  (cost=0.85..46.58 rows=18 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.43..2.75 rows=18 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.42..2.43 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                                                 ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
                           ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=145)
(35 rows)

query 2 run 2
SET
SET
SET
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=504929.95..504929.96 rows=1 width=193)
   ->  Sort  (cost=504929.95..504929.96 rows=1 width=193)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=50.37..504929.94 rows=1 width=193)
               Join Filter: (supplier.s_nationkey = nation.n_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=50.37..504927.24 rows=1 width=171)
                     ->  Nested Loop  (cost=50.37..504927.24 rows=1 width=171)
                           Join Filter: (supplier.s_suppkey = partsupp.ps_suppkey)
                           ->  Nested Loop  (cost=50.37..500456.24 rows=1 width=34)
                                 ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..54359.33 rows=8575 width=30)
                                       Index Cond: (p_size = 16)
                                       Filter: ((p_type)::text ~~ '%NICKEL'::text)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=49.94..52.01 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=49.50..49.51 rows=1 width=32)
                                               ->  Nested Loop  (cost=2.41..49.49 rows=4 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Hash Join  (cost=2.41..48.20 rows=18 width=10)
                                                           Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                                           ->  Nested Loop  (cost=0.85..46.58 rows=18 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.43..2.75 rows=18 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.42..2.43 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                                                 ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
                           ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=145)
(35 rows)

query 2 run 3
SET
SET
SET
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=504929.95..504929.96 rows=1 width=193)
   ->  Sort  (cost=504929.95..504929.96 rows=1 width=193)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=50.37..504929.94 rows=1 width=193)
               Join Filter: (supplier.s_nationkey = nation.n_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=50.37..504927.24 rows=1 width=171)
                     ->  Nested Loop  (cost=50.37..504927.24 rows=1 width=171)
                           Join Filter: (supplier.s_suppkey = partsupp.ps_suppkey)
                           ->  Nested Loop  (cost=50.37..500456.24 rows=1 width=34)
                                 ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..54359.33 rows=8575 width=30)
                                       Index Cond: (p_size = 16)
                                       Filter: ((p_type)::text ~~ '%NICKEL'::text)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=49.94..52.01 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=49.50..49.51 rows=1 width=32)
                                               ->  Nested Loop  (cost=2.41..49.49 rows=4 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Hash Join  (cost=2.41..48.20 rows=18 width=10)
                                                           Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                                           ->  Nested Loop  (cost=0.85..46.58 rows=18 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.43..2.75 rows=18 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.42..2.43 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                                                 ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
                           ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=145)
(35 rows)

query 2 run 4
SET
SET
SET
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=504929.95..504929.96 rows=1 width=193)
   ->  Sort  (cost=504929.95..504929.96 rows=1 width=193)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=50.37..504929.94 rows=1 width=193)
               Join Filter: (supplier.s_nationkey = nation.n_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=50.37..504927.24 rows=1 width=171)
                     ->  Nested Loop  (cost=50.37..504927.24 rows=1 width=171)
                           Join Filter: (supplier.s_suppkey = partsupp.ps_suppkey)
                           ->  Nested Loop  (cost=50.37..500456.24 rows=1 width=34)
                                 ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..54359.33 rows=8575 width=30)
                                       Index Cond: (p_size = 16)
                                       Filter: ((p_type)::text ~~ '%NICKEL'::text)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=49.94..52.01 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=49.50..49.51 rows=1 width=32)
                                               ->  Nested Loop  (cost=2.41..49.49 rows=4 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Hash Join  (cost=2.41..48.20 rows=18 width=10)
                                                           Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                                           ->  Nested Loop  (cost=0.85..46.58 rows=18 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.43..2.75 rows=18 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.42..2.43 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                                                 ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
                           ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=145)
(35 rows)

query 2 run 5
SET
SET
SET
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=504929.95..504929.96 rows=1 width=193)
   ->  Sort  (cost=504929.95..504929.96 rows=1 width=193)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=50.37..504929.94 rows=1 width=193)
               Join Filter: (supplier.s_nationkey = nation.n_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=50.37..504927.24 rows=1 width=171)
                     ->  Nested Loop  (cost=50.37..504927.24 rows=1 width=171)
                           Join Filter: (supplier.s_suppkey = partsupp.ps_suppkey)
                           ->  Nested Loop  (cost=50.37..500456.24 rows=1 width=34)
                                 ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..54359.33 rows=8575 width=30)
                                       Index Cond: (p_size = 16)
                                       Filter: ((p_type)::text ~~ '%NICKEL'::text)
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=49.94..52.01 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=49.50..49.51 rows=1 width=32)
                                               ->  Nested Loop  (cost=2.41..49.49 rows=4 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Hash Join  (cost=2.41..48.20 rows=18 width=10)
                                                           Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                                           ->  Nested Loop  (cost=0.85..46.58 rows=18 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.43..2.75 rows=18 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.42..2.43 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                                                 ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
                           ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=145)
(35 rows)

query 3 run 1
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3217183.91..3217183.93 rows=10 width=44)
   ->  Sort  (cost=3217183.91..3225244.23 rows=3224129 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  HashAggregate  (cost=3069427.27..3147511.64 rows=3224129 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               Planned Partitions: 32
               ->  Hash Join  (cost=525080.79..2881017.23 rows=3224129 width=24)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     ->  Seq Scan on lineitem  (cost=0.00..1874981.40 rows=32664732 width=16)
                           Filter: (l_shipdate > '1995-03-07'::date)
                     ->  Hash  (cost=499347.27..499347.27 rows=1480362 width=12)
                           ->  Hash Join  (cost=127599.74..499347.27 rows=1480362 width=12)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Bitmap Heap Scan on orders  (cost=69101.75..421675.10 rows=7304428 width=16)
                                       Recheck Cond: (o_orderdate < '1995-03-07'::date)
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..67275.64 rows=7304428 width=0)
                                             Index Cond: (o_orderdate < '1995-03-07'::date)
                                 ->  Hash  (cost=54697.82..54697.82 rows=304013 width=4)
                                       ->  Seq Scan on customer  (cost=0.00..54697.82 rows=304013 width=4)
                                             Filter: (c_mktsegment = 'BUILDING'::bpchar)
(20 rows)

query 3 run 2
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3217183.91..3217183.93 rows=10 width=44)
   ->  Sort  (cost=3217183.91..3225244.23 rows=3224129 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  HashAggregate  (cost=3069427.27..3147511.64 rows=3224129 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               Planned Partitions: 32
               ->  Hash Join  (cost=525080.79..2881017.23 rows=3224129 width=24)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     ->  Seq Scan on lineitem  (cost=0.00..1874981.40 rows=32664732 width=16)
                           Filter: (l_shipdate > '1995-03-07'::date)
                     ->  Hash  (cost=499347.27..499347.27 rows=1480362 width=12)
                           ->  Hash Join  (cost=127599.74..499347.27 rows=1480362 width=12)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Bitmap Heap Scan on orders  (cost=69101.75..421675.10 rows=7304428 width=16)
                                       Recheck Cond: (o_orderdate < '1995-03-07'::date)
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..67275.64 rows=7304428 width=0)
                                             Index Cond: (o_orderdate < '1995-03-07'::date)
                                 ->  Hash  (cost=54697.82..54697.82 rows=304013 width=4)
                                       ->  Seq Scan on customer  (cost=0.00..54697.82 rows=304013 width=4)
                                             Filter: (c_mktsegment = 'BUILDING'::bpchar)
(20 rows)

query 3 run 3
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3217183.91..3217183.93 rows=10 width=44)
   ->  Sort  (cost=3217183.91..3225244.23 rows=3224129 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  HashAggregate  (cost=3069427.27..3147511.64 rows=3224129 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               Planned Partitions: 32
               ->  Hash Join  (cost=525080.79..2881017.23 rows=3224129 width=24)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     ->  Seq Scan on lineitem  (cost=0.00..1874981.40 rows=32664732 width=16)
                           Filter: (l_shipdate > '1995-03-07'::date)
                     ->  Hash  (cost=499347.27..499347.27 rows=1480362 width=12)
                           ->  Hash Join  (cost=127599.74..499347.27 rows=1480362 width=12)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Bitmap Heap Scan on orders  (cost=69101.75..421675.10 rows=7304428 width=16)
                                       Recheck Cond: (o_orderdate < '1995-03-07'::date)
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..67275.64 rows=7304428 width=0)
                                             Index Cond: (o_orderdate < '1995-03-07'::date)
                                 ->  Hash  (cost=54697.82..54697.82 rows=304013 width=4)
                                       ->  Seq Scan on customer  (cost=0.00..54697.82 rows=304013 width=4)
                                             Filter: (c_mktsegment = 'BUILDING'::bpchar)
(20 rows)

query 3 run 4
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3217183.91..3217183.93 rows=10 width=44)
   ->  Sort  (cost=3217183.91..3225244.23 rows=3224129 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  HashAggregate  (cost=3069427.27..3147511.64 rows=3224129 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               Planned Partitions: 32
               ->  Hash Join  (cost=525080.79..2881017.23 rows=3224129 width=24)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     ->  Seq Scan on lineitem  (cost=0.00..1874981.40 rows=32664732 width=16)
                           Filter: (l_shipdate > '1995-03-07'::date)
                     ->  Hash  (cost=499347.27..499347.27 rows=1480362 width=12)
                           ->  Hash Join  (cost=127599.74..499347.27 rows=1480362 width=12)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Bitmap Heap Scan on orders  (cost=69101.75..421675.10 rows=7304428 width=16)
                                       Recheck Cond: (o_orderdate < '1995-03-07'::date)
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..67275.64 rows=7304428 width=0)
                                             Index Cond: (o_orderdate < '1995-03-07'::date)
                                 ->  Hash  (cost=54697.82..54697.82 rows=304013 width=4)
                                       ->  Seq Scan on customer  (cost=0.00..54697.82 rows=304013 width=4)
                                             Filter: (c_mktsegment = 'BUILDING'::bpchar)
(20 rows)

query 3 run 5
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3217183.91..3217183.93 rows=10 width=44)
   ->  Sort  (cost=3217183.91..3225244.23 rows=3224129 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  HashAggregate  (cost=3069427.27..3147511.64 rows=3224129 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               Planned Partitions: 32
               ->  Hash Join  (cost=525080.79..2881017.23 rows=3224129 width=24)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     ->  Seq Scan on lineitem  (cost=0.00..1874981.40 rows=32664732 width=16)
                           Filter: (l_shipdate > '1995-03-07'::date)
                     ->  Hash  (cost=499347.27..499347.27 rows=1480362 width=12)
                           ->  Hash Join  (cost=127599.74..499347.27 rows=1480362 width=12)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Bitmap Heap Scan on orders  (cost=69101.75..421675.10 rows=7304428 width=16)
                                       Recheck Cond: (o_orderdate < '1995-03-07'::date)
                                       ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..67275.64 rows=7304428 width=0)
                                             Index Cond: (o_orderdate < '1995-03-07'::date)
                                 ->  Hash  (cost=54697.82..54697.82 rows=304013 width=4)
                                       ->  Seq Scan on customer  (cost=0.00..54697.82 rows=304013 width=4)
                                             Filter: (c_mktsegment = 'BUILDING'::bpchar)
(20 rows)

query 4 run 1
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=770220.74..770220.74 rows=1 width=24)
   ->  Sort  (cost=770220.74..770220.75 rows=5 width=24)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=770220.67..770220.72 rows=5 width=24)
               Group Key: orders.o_orderpriority
               ->  Merge Semi Join  (cost=331628.08..767351.75 rows=573783 width=16)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Sort  (cost=331627.50..333062.08 rows=573832 width=20)
                           Sort Key: orders.o_orderkey
                           ->  Bitmap Heap Scan on orders  (cost=6864.21..276739.69 rows=573832 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6720.76 rows=573832 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Only Scan using q4_idx_1 on lineitem  (cost=0.44..375229.80 rows=19995691 width=4)
(14 rows)

query 4 run 2
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=770220.74..770220.74 rows=1 width=24)
   ->  Sort  (cost=770220.74..770220.75 rows=5 width=24)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=770220.67..770220.72 rows=5 width=24)
               Group Key: orders.o_orderpriority
               ->  Merge Semi Join  (cost=331628.08..767351.75 rows=573783 width=16)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Sort  (cost=331627.50..333062.08 rows=573832 width=20)
                           Sort Key: orders.o_orderkey
                           ->  Bitmap Heap Scan on orders  (cost=6864.21..276739.69 rows=573832 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6720.76 rows=573832 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Only Scan using q4_idx_1 on lineitem  (cost=0.44..375229.80 rows=19995691 width=4)
(14 rows)

query 4 run 3
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=770220.74..770220.74 rows=1 width=24)
   ->  Sort  (cost=770220.74..770220.75 rows=5 width=24)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=770220.67..770220.72 rows=5 width=24)
               Group Key: orders.o_orderpriority
               ->  Merge Semi Join  (cost=331628.08..767351.75 rows=573783 width=16)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Sort  (cost=331627.50..333062.08 rows=573832 width=20)
                           Sort Key: orders.o_orderkey
                           ->  Bitmap Heap Scan on orders  (cost=6864.21..276739.69 rows=573832 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6720.76 rows=573832 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Only Scan using q4_idx_1 on lineitem  (cost=0.44..375229.80 rows=19995691 width=4)
(14 rows)

query 4 run 4
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=770220.74..770220.74 rows=1 width=24)
   ->  Sort  (cost=770220.74..770220.75 rows=5 width=24)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=770220.67..770220.72 rows=5 width=24)
               Group Key: orders.o_orderpriority
               ->  Merge Semi Join  (cost=331628.08..767351.75 rows=573783 width=16)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Sort  (cost=331627.50..333062.08 rows=573832 width=20)
                           Sort Key: orders.o_orderkey
                           ->  Bitmap Heap Scan on orders  (cost=6864.21..276739.69 rows=573832 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6720.76 rows=573832 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Only Scan using q4_idx_1 on lineitem  (cost=0.44..375229.80 rows=19995691 width=4)
(14 rows)

query 4 run 5
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=770220.74..770220.74 rows=1 width=24)
   ->  Sort  (cost=770220.74..770220.75 rows=5 width=24)
         Sort Key: orders.o_orderpriority
         ->  HashAggregate  (cost=770220.67..770220.72 rows=5 width=24)
               Group Key: orders.o_orderpriority
               ->  Merge Semi Join  (cost=331628.08..767351.75 rows=573783 width=16)
                     Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Sort  (cost=331627.50..333062.08 rows=573832 width=20)
                           Sort Key: orders.o_orderkey
                           ->  Bitmap Heap Scan on orders  (cost=6864.21..276739.69 rows=573832 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6720.76 rows=573832 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                     ->  Index Only Scan using q4_idx_1 on lineitem  (cost=0.44..375229.80 rows=19995691 width=4)
(14 rows)

query 5 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1662020.05..1662020.05 rows=1 width=58)
   ->  Sort  (cost=1662020.05..1662020.11 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=1661087.94..1662019.92 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=1661087.94..1661274.27 rows=74534 width=38)
                     Sort Key: nation.n_name
                     ->  Hash Join  (cost=95959.31..1655056.05 rows=74534 width=38)
                           Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                           ->  Nested Loop  (cost=91238.31..1640534.66 rows=1866737 width=50)
                                 ->  Hash Join  (cost=91237.75..400928.36 rows=466724 width=38)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=27912.04..324184.34 rows=2333620 width=8)
                                             Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..27328.64 rows=2333620 width=0)
                                                   Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Hash  (cost=59575.55..59575.55 rows=300013 width=38)
                                             ->  Hash Join  (cost=2.51..59575.55 rows=300013 width=38)
                                                   Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..50947.66 rows=1500066 width=8)
                                                   ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                         ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                               Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.56..2.62 rows=4 width=20)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
(31 rows)

query 5 run 2
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1662020.05..1662020.05 rows=1 width=58)
   ->  Sort  (cost=1662020.05..1662020.11 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=1661087.94..1662019.92 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=1661087.94..1661274.27 rows=74534 width=38)
                     Sort Key: nation.n_name
                     ->  Hash Join  (cost=95959.31..1655056.05 rows=74534 width=38)
                           Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                           ->  Nested Loop  (cost=91238.31..1640534.66 rows=1866737 width=50)
                                 ->  Hash Join  (cost=91237.75..400928.36 rows=466724 width=38)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=27912.04..324184.34 rows=2333620 width=8)
                                             Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..27328.64 rows=2333620 width=0)
                                                   Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Hash  (cost=59575.55..59575.55 rows=300013 width=38)
                                             ->  Hash Join  (cost=2.51..59575.55 rows=300013 width=38)
                                                   Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..50947.66 rows=1500066 width=8)
                                                   ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                         ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                               Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.56..2.62 rows=4 width=20)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
(31 rows)

query 5 run 3
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1662020.05..1662020.05 rows=1 width=58)
   ->  Sort  (cost=1662020.05..1662020.11 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=1661087.94..1662019.92 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=1661087.94..1661274.27 rows=74534 width=38)
                     Sort Key: nation.n_name
                     ->  Hash Join  (cost=95959.31..1655056.05 rows=74534 width=38)
                           Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                           ->  Nested Loop  (cost=91238.31..1640534.66 rows=1866737 width=50)
                                 ->  Hash Join  (cost=91237.75..400928.36 rows=466724 width=38)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=27912.04..324184.34 rows=2333620 width=8)
                                             Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..27328.64 rows=2333620 width=0)
                                                   Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Hash  (cost=59575.55..59575.55 rows=300013 width=38)
                                             ->  Hash Join  (cost=2.51..59575.55 rows=300013 width=38)
                                                   Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..50947.66 rows=1500066 width=8)
                                                   ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                         ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                               Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.56..2.62 rows=4 width=20)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
(31 rows)

query 5 run 4
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1662020.05..1662020.05 rows=1 width=58)
   ->  Sort  (cost=1662020.05..1662020.11 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=1661087.94..1662019.92 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=1661087.94..1661274.27 rows=74534 width=38)
                     Sort Key: nation.n_name
                     ->  Hash Join  (cost=95959.31..1655056.05 rows=74534 width=38)
                           Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                           ->  Nested Loop  (cost=91238.31..1640534.66 rows=1866737 width=50)
                                 ->  Hash Join  (cost=91237.75..400928.36 rows=466724 width=38)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=27912.04..324184.34 rows=2333620 width=8)
                                             Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..27328.64 rows=2333620 width=0)
                                                   Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Hash  (cost=59575.55..59575.55 rows=300013 width=38)
                                             ->  Hash Join  (cost=2.51..59575.55 rows=300013 width=38)
                                                   Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..50947.66 rows=1500066 width=8)
                                                   ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                         ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                               Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.56..2.62 rows=4 width=20)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
(31 rows)

query 5 run 5
SET
SET
SET
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1662020.05..1662020.05 rows=1 width=58)
   ->  Sort  (cost=1662020.05..1662020.11 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=1661087.94..1662019.92 rows=25 width=58)
               Group Key: nation.n_name
               ->  Sort  (cost=1661087.94..1661274.27 rows=74534 width=38)
                     Sort Key: nation.n_name
                     ->  Hash Join  (cost=95959.31..1655056.05 rows=74534 width=38)
                           Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                           ->  Nested Loop  (cost=91238.31..1640534.66 rows=1866737 width=50)
                                 ->  Hash Join  (cost=91237.75..400928.36 rows=466724 width=38)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Bitmap Heap Scan on orders  (cost=27912.04..324184.34 rows=2333620 width=8)
                                             Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..27328.64 rows=2333620 width=0)
                                                   Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                       ->  Hash  (cost=59575.55..59575.55 rows=300013 width=38)
                                             ->  Hash Join  (cost=2.51..59575.55 rows=300013 width=38)
                                                   Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                   ->  Seq Scan on customer  (cost=0.00..50947.66 rows=1500066 width=8)
                                                   ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                         ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                               Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                               ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                               ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                 ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.56..2.62 rows=4 width=20)
                                       Index Cond: (l_orderkey = orders.o_orderkey)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
(31 rows)

query 6 run 1
SET
SET
SET
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2056847.01..2056847.02 rows=1 width=32)
   ->  Aggregate  (cost=2056847.01..2056847.02 rows=1 width=32)
         ->  Bitmap Heap Scan on lineitem  (cost=230664.43..2050838.55 rows=1201692 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..230364.00 rows=1201692 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(6 rows)

query 6 run 2
SET
SET
SET
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2056847.01..2056847.02 rows=1 width=32)
   ->  Aggregate  (cost=2056847.01..2056847.02 rows=1 width=32)
         ->  Bitmap Heap Scan on lineitem  (cost=230664.43..2050838.55 rows=1201692 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..230364.00 rows=1201692 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(6 rows)

query 6 run 3
SET
SET
SET
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2056847.01..2056847.02 rows=1 width=32)
   ->  Aggregate  (cost=2056847.01..2056847.02 rows=1 width=32)
         ->  Bitmap Heap Scan on lineitem  (cost=230664.43..2050838.55 rows=1201692 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..230364.00 rows=1201692 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(6 rows)

query 6 run 4
SET
SET
SET
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2056847.01..2056847.02 rows=1 width=32)
   ->  Aggregate  (cost=2056847.01..2056847.02 rows=1 width=32)
         ->  Bitmap Heap Scan on lineitem  (cost=230664.43..2050838.55 rows=1201692 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..230364.00 rows=1201692 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(6 rows)

query 6 run 5
SET
SET
SET
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2056847.01..2056847.02 rows=1 width=32)
   ->  Aggregate  (cost=2056847.01..2056847.02 rows=1 width=32)
         ->  Bitmap Heap Scan on lineitem  (cost=230664.43..2050838.55 rows=1201692 width=12)
               Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
               ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..230364.00 rows=1201692 width=0)
                     Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
(6 rows)

query 7 run 1
SET
SET
SET
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2718039.85..2718039.97 rows=1 width=116)
   ->  GroupAggregate  (cost=2718039.85..2719252.82 rows=10032 width=116)
         Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
         ->  Sort  (cost=2718039.85..2718191.63 rows=60714 width=96)
               Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
               ->  Hash Join  (cost=563374.32..2713216.20 rows=60714 width=96)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     ->  Hash Join  (cost=3629.40..2111665.33 rows=1458908 width=46)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Seq Scan on lineitem  (cost=0.00..2024949.08 rows=18266071 width=24)
                                 Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=3529.40..3529.40 rows=8000 width=30)
                                 ->  Hash Join  (cost=1.40..3529.40 rows=8000 width=30)
                                       Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                                       ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                             ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                   Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                     ->  Hash  (cost=536543.87..536543.87 rows=1199844 width=30)
                           ->  Hash Join  (cost=57054.33..536543.87 rows=1199844 width=30)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Seq Scan on orders  (cost=0.00..411248.46 rows=14998046 width=8)
                                 ->  Hash  (cost=55554.27..55554.27 rows=120005 width=30)
                                       ->  Hash Join  (cost=1.40..55554.27 rows=120005 width=30)
                                             Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50947.66 rows=1500066 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
(30 rows)

query 7 run 2
SET
SET
SET
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2718039.85..2718039.97 rows=1 width=116)
   ->  GroupAggregate  (cost=2718039.85..2719252.82 rows=10032 width=116)
         Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
         ->  Sort  (cost=2718039.85..2718191.63 rows=60714 width=96)
               Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
               ->  Hash Join  (cost=563374.32..2713216.20 rows=60714 width=96)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     ->  Hash Join  (cost=3629.40..2111665.33 rows=1458908 width=46)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Seq Scan on lineitem  (cost=0.00..2024949.08 rows=18266071 width=24)
                                 Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=3529.40..3529.40 rows=8000 width=30)
                                 ->  Hash Join  (cost=1.40..3529.40 rows=8000 width=30)
                                       Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                                       ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                             ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                   Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                     ->  Hash  (cost=536543.87..536543.87 rows=1199844 width=30)
                           ->  Hash Join  (cost=57054.33..536543.87 rows=1199844 width=30)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Seq Scan on orders  (cost=0.00..411248.46 rows=14998046 width=8)
                                 ->  Hash  (cost=55554.27..55554.27 rows=120005 width=30)
                                       ->  Hash Join  (cost=1.40..55554.27 rows=120005 width=30)
                                             Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50947.66 rows=1500066 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
(30 rows)

query 7 run 3
SET
SET
SET
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2718039.85..2718039.97 rows=1 width=116)
   ->  GroupAggregate  (cost=2718039.85..2719252.82 rows=10032 width=116)
         Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
         ->  Sort  (cost=2718039.85..2718191.63 rows=60714 width=96)
               Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
               ->  Hash Join  (cost=563374.32..2713216.20 rows=60714 width=96)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     ->  Hash Join  (cost=3629.40..2111665.33 rows=1458908 width=46)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Seq Scan on lineitem  (cost=0.00..2024949.08 rows=18266071 width=24)
                                 Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=3529.40..3529.40 rows=8000 width=30)
                                 ->  Hash Join  (cost=1.40..3529.40 rows=8000 width=30)
                                       Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                                       ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                             ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                   Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                     ->  Hash  (cost=536543.87..536543.87 rows=1199844 width=30)
                           ->  Hash Join  (cost=57054.33..536543.87 rows=1199844 width=30)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Seq Scan on orders  (cost=0.00..411248.46 rows=14998046 width=8)
                                 ->  Hash  (cost=55554.27..55554.27 rows=120005 width=30)
                                       ->  Hash Join  (cost=1.40..55554.27 rows=120005 width=30)
                                             Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50947.66 rows=1500066 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
(30 rows)

query 7 run 4
SET
SET
SET
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2718039.85..2718039.97 rows=1 width=116)
   ->  GroupAggregate  (cost=2718039.85..2719252.82 rows=10032 width=116)
         Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
         ->  Sort  (cost=2718039.85..2718191.63 rows=60714 width=96)
               Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
               ->  Hash Join  (cost=563374.32..2713216.20 rows=60714 width=96)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     ->  Hash Join  (cost=3629.40..2111665.33 rows=1458908 width=46)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Seq Scan on lineitem  (cost=0.00..2024949.08 rows=18266071 width=24)
                                 Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=3529.40..3529.40 rows=8000 width=30)
                                 ->  Hash Join  (cost=1.40..3529.40 rows=8000 width=30)
                                       Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                                       ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                             ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                   Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                     ->  Hash  (cost=536543.87..536543.87 rows=1199844 width=30)
                           ->  Hash Join  (cost=57054.33..536543.87 rows=1199844 width=30)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Seq Scan on orders  (cost=0.00..411248.46 rows=14998046 width=8)
                                 ->  Hash  (cost=55554.27..55554.27 rows=120005 width=30)
                                       ->  Hash Join  (cost=1.40..55554.27 rows=120005 width=30)
                                             Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50947.66 rows=1500066 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
(30 rows)

query 7 run 5
SET
SET
SET
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2718039.85..2718039.97 rows=1 width=116)
   ->  GroupAggregate  (cost=2718039.85..2719252.82 rows=10032 width=116)
         Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
         ->  Sort  (cost=2718039.85..2718191.63 rows=60714 width=96)
               Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
               ->  Hash Join  (cost=563374.32..2713216.20 rows=60714 width=96)
                     Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                     Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                     ->  Hash Join  (cost=3629.40..2111665.33 rows=1458908 width=46)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Seq Scan on lineitem  (cost=0.00..2024949.08 rows=18266071 width=24)
                                 Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                           ->  Hash  (cost=3529.40..3529.40 rows=8000 width=30)
                                 ->  Hash Join  (cost=1.40..3529.40 rows=8000 width=30)
                                       Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                       ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                                       ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                             ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                   Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                     ->  Hash  (cost=536543.87..536543.87 rows=1199844 width=30)
                           ->  Hash Join  (cost=57054.33..536543.87 rows=1199844 width=30)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Seq Scan on orders  (cost=0.00..411248.46 rows=14998046 width=8)
                                 ->  Hash  (cost=55554.27..55554.27 rows=120005 width=30)
                                       ->  Hash Join  (cost=1.40..55554.27 rows=120005 width=30)
                                             Hash Cond: (customer.c_nationkey = n2.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50947.66 rows=1500066 width=8)
                                             ->  Hash  (cost=1.38..1.38 rows=2 width=30)
                                                   ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                         Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
(30 rows)

query 8 run 1
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=574980.99..574981.22 rows=1 width=64)
   ->  GroupAggregate  (cost=574980.99..575545.26 rows=2406 width=64)
         Group Key: (EXTRACT(year FROM orders.o_orderdate))
         ->  Sort  (cost=574980.99..575038.34 rows=22940 width=70)
               Sort Key: (EXTRACT(year FROM orders.o_orderdate))
               ->  Nested Loop  (cost=224908.51..573319.49 rows=22940 width=70)
                     ->  Hash Join  (cost=224908.36..572672.27 rows=22940 width=20)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=220437.36..568140.95 rows=22977 width=20)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=157111.65..504154.65 rows=114885 width=24)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Bitmap Heap Scan on orders  (cost=53980.73..382949.66 rows=4513395 width=12)
                                             Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..52852.39 rows=4513395 width=0)
                                                   Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=98358.86..98358.86 rows=381764 width=20)
                                             ->  Nested Loop  (cost=0.99..98358.86 rows=381764 width=20)
                                                   ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..53965.30 rows=13265 width=4)
                                                         Index Cond: (p_type = 'LARGE POLISHED BRASS'::text)
                                                   ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.56..3.06 rows=29 width=24)
                                                         Index Cond: (l_partkey = part.p_partkey)
                                 ->  Hash  (cost=59575.55..59575.55 rows=300013 width=4)
                                       ->  Hash Join  (cost=2.51..59575.55 rows=300013 width=4)
                                             Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50947.66 rows=1500066 width=8)
                                             ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                   ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                         Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                     ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                           Cache Key: supplier.s_nationkey
                           Cache Mode: logical
                           ->  Index Scan using nation_pkey on nation n2  (cost=0.14..1.16 rows=1 width=30)
                                 Index Cond: (n_nationkey = supplier.s_nationkey)
(40 rows)

query 8 run 2
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=574980.99..574981.22 rows=1 width=64)
   ->  GroupAggregate  (cost=574980.99..575545.26 rows=2406 width=64)
         Group Key: (EXTRACT(year FROM orders.o_orderdate))
         ->  Sort  (cost=574980.99..575038.34 rows=22940 width=70)
               Sort Key: (EXTRACT(year FROM orders.o_orderdate))
               ->  Nested Loop  (cost=224908.51..573319.49 rows=22940 width=70)
                     ->  Hash Join  (cost=224908.36..572672.27 rows=22940 width=20)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=220437.36..568140.95 rows=22977 width=20)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=157111.65..504154.65 rows=114885 width=24)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Bitmap Heap Scan on orders  (cost=53980.73..382949.66 rows=4513395 width=12)
                                             Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..52852.39 rows=4513395 width=0)
                                                   Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=98358.86..98358.86 rows=381764 width=20)
                                             ->  Nested Loop  (cost=0.99..98358.86 rows=381764 width=20)
                                                   ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..53965.30 rows=13265 width=4)
                                                         Index Cond: (p_type = 'LARGE POLISHED BRASS'::text)
                                                   ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.56..3.06 rows=29 width=24)
                                                         Index Cond: (l_partkey = part.p_partkey)
                                 ->  Hash  (cost=59575.55..59575.55 rows=300013 width=4)
                                       ->  Hash Join  (cost=2.51..59575.55 rows=300013 width=4)
                                             Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50947.66 rows=1500066 width=8)
                                             ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                   ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                         Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                     ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                           Cache Key: supplier.s_nationkey
                           Cache Mode: logical
                           ->  Index Scan using nation_pkey on nation n2  (cost=0.14..1.16 rows=1 width=30)
                                 Index Cond: (n_nationkey = supplier.s_nationkey)
(40 rows)

query 8 run 3
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=574980.99..574981.22 rows=1 width=64)
   ->  GroupAggregate  (cost=574980.99..575545.26 rows=2406 width=64)
         Group Key: (EXTRACT(year FROM orders.o_orderdate))
         ->  Sort  (cost=574980.99..575038.34 rows=22940 width=70)
               Sort Key: (EXTRACT(year FROM orders.o_orderdate))
               ->  Nested Loop  (cost=224908.51..573319.49 rows=22940 width=70)
                     ->  Hash Join  (cost=224908.36..572672.27 rows=22940 width=20)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=220437.36..568140.95 rows=22977 width=20)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=157111.65..504154.65 rows=114885 width=24)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Bitmap Heap Scan on orders  (cost=53980.73..382949.66 rows=4513395 width=12)
                                             Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..52852.39 rows=4513395 width=0)
                                                   Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=98358.86..98358.86 rows=381764 width=20)
                                             ->  Nested Loop  (cost=0.99..98358.86 rows=381764 width=20)
                                                   ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..53965.30 rows=13265 width=4)
                                                         Index Cond: (p_type = 'LARGE POLISHED BRASS'::text)
                                                   ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.56..3.06 rows=29 width=24)
                                                         Index Cond: (l_partkey = part.p_partkey)
                                 ->  Hash  (cost=59575.55..59575.55 rows=300013 width=4)
                                       ->  Hash Join  (cost=2.51..59575.55 rows=300013 width=4)
                                             Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50947.66 rows=1500066 width=8)
                                             ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                   ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                         Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                     ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                           Cache Key: supplier.s_nationkey
                           Cache Mode: logical
                           ->  Index Scan using nation_pkey on nation n2  (cost=0.14..1.16 rows=1 width=30)
                                 Index Cond: (n_nationkey = supplier.s_nationkey)
(40 rows)

query 8 run 4
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=574980.99..574981.22 rows=1 width=64)
   ->  GroupAggregate  (cost=574980.99..575545.26 rows=2406 width=64)
         Group Key: (EXTRACT(year FROM orders.o_orderdate))
         ->  Sort  (cost=574980.99..575038.34 rows=22940 width=70)
               Sort Key: (EXTRACT(year FROM orders.o_orderdate))
               ->  Nested Loop  (cost=224908.51..573319.49 rows=22940 width=70)
                     ->  Hash Join  (cost=224908.36..572672.27 rows=22940 width=20)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=220437.36..568140.95 rows=22977 width=20)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=157111.65..504154.65 rows=114885 width=24)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Bitmap Heap Scan on orders  (cost=53980.73..382949.66 rows=4513395 width=12)
                                             Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..52852.39 rows=4513395 width=0)
                                                   Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=98358.86..98358.86 rows=381764 width=20)
                                             ->  Nested Loop  (cost=0.99..98358.86 rows=381764 width=20)
                                                   ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..53965.30 rows=13265 width=4)
                                                         Index Cond: (p_type = 'LARGE POLISHED BRASS'::text)
                                                   ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.56..3.06 rows=29 width=24)
                                                         Index Cond: (l_partkey = part.p_partkey)
                                 ->  Hash  (cost=59575.55..59575.55 rows=300013 width=4)
                                       ->  Hash Join  (cost=2.51..59575.55 rows=300013 width=4)
                                             Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50947.66 rows=1500066 width=8)
                                             ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                   ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                         Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                     ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                           Cache Key: supplier.s_nationkey
                           Cache Mode: logical
                           ->  Index Scan using nation_pkey on nation n2  (cost=0.14..1.16 rows=1 width=30)
                                 Index Cond: (n_nationkey = supplier.s_nationkey)
(40 rows)

query 8 run 5
SET
SET
SET
                                                                 QUERY PLAN                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=574980.99..574981.22 rows=1 width=64)
   ->  GroupAggregate  (cost=574980.99..575545.26 rows=2406 width=64)
         Group Key: (EXTRACT(year FROM orders.o_orderdate))
         ->  Sort  (cost=574980.99..575038.34 rows=22940 width=70)
               Sort Key: (EXTRACT(year FROM orders.o_orderdate))
               ->  Nested Loop  (cost=224908.51..573319.49 rows=22940 width=70)
                     ->  Hash Join  (cost=224908.36..572672.27 rows=22940 width=20)
                           Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                           ->  Hash Join  (cost=220437.36..568140.95 rows=22977 width=20)
                                 Hash Cond: (orders.o_custkey = customer.c_custkey)
                                 ->  Hash Join  (cost=157111.65..504154.65 rows=114885 width=24)
                                       Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Bitmap Heap Scan on orders  (cost=53980.73..382949.66 rows=4513395 width=12)
                                             Recheck Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                             ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..52852.39 rows=4513395 width=0)
                                                   Index Cond: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                       ->  Hash  (cost=98358.86..98358.86 rows=381764 width=20)
                                             ->  Nested Loop  (cost=0.99..98358.86 rows=381764 width=20)
                                                   ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..53965.30 rows=13265 width=4)
                                                         Index Cond: (p_type = 'LARGE POLISHED BRASS'::text)
                                                   ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.56..3.06 rows=29 width=24)
                                                         Index Cond: (l_partkey = part.p_partkey)
                                 ->  Hash  (cost=59575.55..59575.55 rows=300013 width=4)
                                       ->  Hash Join  (cost=2.51..59575.55 rows=300013 width=4)
                                             Hash Cond: (customer.c_nationkey = n1.n_nationkey)
                                             ->  Seq Scan on customer  (cost=0.00..50947.66 rows=1500066 width=8)
                                             ->  Hash  (cost=2.45..2.45 rows=5 width=4)
                                                   ->  Hash Join  (cost=1.07..2.45 rows=5 width=4)
                                                         Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                                         ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8)
                                                         ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                               ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                     Filter: (r_name = 'AMERICA'::bpchar)
                           ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                 ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                     ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                           Cache Key: supplier.s_nationkey
                           Cache Mode: logical
                           ->  Index Scan using nation_pkey on nation n2  (cost=0.14..1.16 rows=1 width=30)
                                 Index Cond: (n_nationkey = supplier.s_nationkey)
(40 rows)

query 9 run 1
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1894770.67..1894770.67 rows=1 width=90)
   ->  Sort  (cost=1894770.67..1894921.04 rows=60150 width=90)
         Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
         ->  HashAggregate  (cost=1893567.67..1894469.92 rows=60150 width=90)
               Group Key: nation.n_name, EXTRACT(year FROM orders.o_orderdate)
               ->  Hash Join  (cost=661796.59..1822459.92 rows=4063300 width=81)
                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Hash Join  (cost=661795.03..1799825.77 rows=4063300 width=31)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Hash Join  (cost=4484.00..1017707.58 rows=4063300 width=31)
                                 Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                 ->  Merge Join  (cost=13.00..1002552.57 rows=4069923 width=35)
                                       Merge Cond: (lineitem.l_partkey = partsupp.ps_partkey)
                                       Join Filter: (lineitem.l_suppkey = partsupp.ps_suppkey)
                                       ->  Nested Loop  (cost=0.99..537490.25 rows=4069923 width=33)
                                             ->  Index Only Scan using q20_idx_2 on part  (cost=0.43..64306.95 rows=141416 width=4)
                                                   Filter: ((p_name)::text ~~ '%navy%'::text)
                                             ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..3.06 rows=29 width=29)
                                                   Index Cond: (l_partkey = part.p_partkey)
                                       ->  Materialize  (cost=0.43..201538.64 rows=8000812 width=14)
                                             ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.43..181536.61 rows=8000812 width=14)
                                 ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                       ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                           ->  Hash  (cost=411248.46..411248.46 rows=14998046 width=8)
                                 ->  Seq Scan on orders  (cost=0.00..411248.46 rows=14998046 width=8)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(27 rows)

query 9 run 2
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1894770.67..1894770.67 rows=1 width=90)
   ->  Sort  (cost=1894770.67..1894921.04 rows=60150 width=90)
         Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
         ->  HashAggregate  (cost=1893567.67..1894469.92 rows=60150 width=90)
               Group Key: nation.n_name, EXTRACT(year FROM orders.o_orderdate)
               ->  Hash Join  (cost=661796.59..1822459.92 rows=4063300 width=81)
                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Hash Join  (cost=661795.03..1799825.77 rows=4063300 width=31)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Hash Join  (cost=4484.00..1017707.58 rows=4063300 width=31)
                                 Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                 ->  Merge Join  (cost=13.00..1002552.57 rows=4069923 width=35)
                                       Merge Cond: (lineitem.l_partkey = partsupp.ps_partkey)
                                       Join Filter: (lineitem.l_suppkey = partsupp.ps_suppkey)
                                       ->  Nested Loop  (cost=0.99..537490.25 rows=4069923 width=33)
                                             ->  Index Only Scan using q20_idx_2 on part  (cost=0.43..64306.95 rows=141416 width=4)
                                                   Filter: ((p_name)::text ~~ '%navy%'::text)
                                             ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..3.06 rows=29 width=29)
                                                   Index Cond: (l_partkey = part.p_partkey)
                                       ->  Materialize  (cost=0.43..201538.64 rows=8000812 width=14)
                                             ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.43..181536.61 rows=8000812 width=14)
                                 ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                       ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                           ->  Hash  (cost=411248.46..411248.46 rows=14998046 width=8)
                                 ->  Seq Scan on orders  (cost=0.00..411248.46 rows=14998046 width=8)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(27 rows)

query 9 run 3
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1894770.67..1894770.67 rows=1 width=90)
   ->  Sort  (cost=1894770.67..1894921.04 rows=60150 width=90)
         Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
         ->  HashAggregate  (cost=1893567.67..1894469.92 rows=60150 width=90)
               Group Key: nation.n_name, EXTRACT(year FROM orders.o_orderdate)
               ->  Hash Join  (cost=661796.59..1822459.92 rows=4063300 width=81)
                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Hash Join  (cost=661795.03..1799825.77 rows=4063300 width=31)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Hash Join  (cost=4484.00..1017707.58 rows=4063300 width=31)
                                 Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                 ->  Merge Join  (cost=13.00..1002552.57 rows=4069923 width=35)
                                       Merge Cond: (lineitem.l_partkey = partsupp.ps_partkey)
                                       Join Filter: (lineitem.l_suppkey = partsupp.ps_suppkey)
                                       ->  Nested Loop  (cost=0.99..537490.25 rows=4069923 width=33)
                                             ->  Index Only Scan using q20_idx_2 on part  (cost=0.43..64306.95 rows=141416 width=4)
                                                   Filter: ((p_name)::text ~~ '%navy%'::text)
                                             ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..3.06 rows=29 width=29)
                                                   Index Cond: (l_partkey = part.p_partkey)
                                       ->  Materialize  (cost=0.43..201538.64 rows=8000812 width=14)
                                             ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.43..181536.61 rows=8000812 width=14)
                                 ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                       ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                           ->  Hash  (cost=411248.46..411248.46 rows=14998046 width=8)
                                 ->  Seq Scan on orders  (cost=0.00..411248.46 rows=14998046 width=8)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(27 rows)

query 9 run 4
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1894770.67..1894770.67 rows=1 width=90)
   ->  Sort  (cost=1894770.67..1894921.04 rows=60150 width=90)
         Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
         ->  HashAggregate  (cost=1893567.67..1894469.92 rows=60150 width=90)
               Group Key: nation.n_name, EXTRACT(year FROM orders.o_orderdate)
               ->  Hash Join  (cost=661796.59..1822459.92 rows=4063300 width=81)
                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Hash Join  (cost=661795.03..1799825.77 rows=4063300 width=31)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Hash Join  (cost=4484.00..1017707.58 rows=4063300 width=31)
                                 Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                 ->  Merge Join  (cost=13.00..1002552.57 rows=4069923 width=35)
                                       Merge Cond: (lineitem.l_partkey = partsupp.ps_partkey)
                                       Join Filter: (lineitem.l_suppkey = partsupp.ps_suppkey)
                                       ->  Nested Loop  (cost=0.99..537490.25 rows=4069923 width=33)
                                             ->  Index Only Scan using q20_idx_2 on part  (cost=0.43..64306.95 rows=141416 width=4)
                                                   Filter: ((p_name)::text ~~ '%navy%'::text)
                                             ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..3.06 rows=29 width=29)
                                                   Index Cond: (l_partkey = part.p_partkey)
                                       ->  Materialize  (cost=0.43..201538.64 rows=8000812 width=14)
                                             ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.43..181536.61 rows=8000812 width=14)
                                 ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                       ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                           ->  Hash  (cost=411248.46..411248.46 rows=14998046 width=8)
                                 ->  Seq Scan on orders  (cost=0.00..411248.46 rows=14998046 width=8)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(27 rows)

query 9 run 5
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1894770.67..1894770.67 rows=1 width=90)
   ->  Sort  (cost=1894770.67..1894921.04 rows=60150 width=90)
         Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
         ->  HashAggregate  (cost=1893567.67..1894469.92 rows=60150 width=90)
               Group Key: nation.n_name, EXTRACT(year FROM orders.o_orderdate)
               ->  Hash Join  (cost=661796.59..1822459.92 rows=4063300 width=81)
                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Hash Join  (cost=661795.03..1799825.77 rows=4063300 width=31)
                           Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Hash Join  (cost=4484.00..1017707.58 rows=4063300 width=31)
                                 Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                 ->  Merge Join  (cost=13.00..1002552.57 rows=4069923 width=35)
                                       Merge Cond: (lineitem.l_partkey = partsupp.ps_partkey)
                                       Join Filter: (lineitem.l_suppkey = partsupp.ps_suppkey)
                                       ->  Nested Loop  (cost=0.99..537490.25 rows=4069923 width=33)
                                             ->  Index Only Scan using q20_idx_2 on part  (cost=0.43..64306.95 rows=141416 width=4)
                                                   Filter: ((p_name)::text ~~ '%navy%'::text)
                                             ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..3.06 rows=29 width=29)
                                                   Index Cond: (l_partkey = part.p_partkey)
                                       ->  Materialize  (cost=0.43..201538.64 rows=8000812 width=14)
                                             ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.43..181536.61 rows=8000812 width=14)
                                 ->  Hash  (cost=3221.00..3221.00 rows=100000 width=8)
                                       ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=8)
                           ->  Hash  (cost=411248.46..411248.46 rows=14998046 width=8)
                                 ->  Seq Scan on orders  (cost=0.00..411248.46 rows=14998046 width=8)
                     ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(27 rows)

query 10 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1709729.59..1709729.64 rows=20 width=201)
   ->  Sort  (cost=1709729.59..1711102.32 rows=549093 width=201)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=1564562.51..1695118.42 rows=549093 width=201)
               Group Key: customer.c_custkey, nation.n_name
               ->  Incremental Sort  (cost=1564562.51..1681391.09 rows=549093 width=181)
                     Sort Key: customer.c_custkey, nation.n_name
                     Presorted Key: customer.c_custkey
                     ->  Nested Loop  (cost=1564562.33..1656681.91 rows=549093 width=181)
                           ->  Merge Join  (cost=1564562.19..1643229.62 rows=549093 width=159)
                                 Merge Cond: (customer.c_custkey = orders.o_custkey)
                                 ->  Index Scan using customer_pkey on customer  (cost=0.43..66681.42 rows=1500066 width=147)
                                 ->  Sort  (cost=1564561.68..1565934.42 rows=549093 width=16)
                                       Sort Key: orders.o_custkey
                                       ->  Hash Join  (cost=283086.97..1512214.75 rows=549093 width=16)
                                             Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                             ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.56..1190029.50 rows=14894790 width=16)
                                                   Index Cond: (l_returnflag = 'R'::bpchar)
                                             ->  Hash  (cost=276175.16..276175.16 rows=552900 width=8)
                                                   ->  Bitmap Heap Scan on orders  (cost=6613.66..276175.16 rows=552900 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6475.44 rows=552900 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                           ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                                 Cache Key: customer.c_nationkey
                                 Cache Mode: logical
                                 ->  Index Scan using nation_pkey on nation  (cost=0.14..1.16 rows=1 width=30)
                                       Index Cond: (n_nationkey = customer.c_nationkey)
(28 rows)

query 10 run 2
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1709729.59..1709729.64 rows=20 width=201)
   ->  Sort  (cost=1709729.59..1711102.32 rows=549093 width=201)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=1564562.51..1695118.42 rows=549093 width=201)
               Group Key: customer.c_custkey, nation.n_name
               ->  Incremental Sort  (cost=1564562.51..1681391.09 rows=549093 width=181)
                     Sort Key: customer.c_custkey, nation.n_name
                     Presorted Key: customer.c_custkey
                     ->  Nested Loop  (cost=1564562.33..1656681.91 rows=549093 width=181)
                           ->  Merge Join  (cost=1564562.19..1643229.62 rows=549093 width=159)
                                 Merge Cond: (customer.c_custkey = orders.o_custkey)
                                 ->  Index Scan using customer_pkey on customer  (cost=0.43..66681.42 rows=1500066 width=147)
                                 ->  Sort  (cost=1564561.68..1565934.42 rows=549093 width=16)
                                       Sort Key: orders.o_custkey
                                       ->  Hash Join  (cost=283086.97..1512214.75 rows=549093 width=16)
                                             Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                             ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.56..1190029.50 rows=14894790 width=16)
                                                   Index Cond: (l_returnflag = 'R'::bpchar)
                                             ->  Hash  (cost=276175.16..276175.16 rows=552900 width=8)
                                                   ->  Bitmap Heap Scan on orders  (cost=6613.66..276175.16 rows=552900 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6475.44 rows=552900 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                           ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                                 Cache Key: customer.c_nationkey
                                 Cache Mode: logical
                                 ->  Index Scan using nation_pkey on nation  (cost=0.14..1.16 rows=1 width=30)
                                       Index Cond: (n_nationkey = customer.c_nationkey)
(28 rows)

query 10 run 3
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1709729.59..1709729.64 rows=20 width=201)
   ->  Sort  (cost=1709729.59..1711102.32 rows=549093 width=201)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=1564562.51..1695118.42 rows=549093 width=201)
               Group Key: customer.c_custkey, nation.n_name
               ->  Incremental Sort  (cost=1564562.51..1681391.09 rows=549093 width=181)
                     Sort Key: customer.c_custkey, nation.n_name
                     Presorted Key: customer.c_custkey
                     ->  Nested Loop  (cost=1564562.33..1656681.91 rows=549093 width=181)
                           ->  Merge Join  (cost=1564562.19..1643229.62 rows=549093 width=159)
                                 Merge Cond: (customer.c_custkey = orders.o_custkey)
                                 ->  Index Scan using customer_pkey on customer  (cost=0.43..66681.42 rows=1500066 width=147)
                                 ->  Sort  (cost=1564561.68..1565934.42 rows=549093 width=16)
                                       Sort Key: orders.o_custkey
                                       ->  Hash Join  (cost=283086.97..1512214.75 rows=549093 width=16)
                                             Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                             ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.56..1190029.50 rows=14894790 width=16)
                                                   Index Cond: (l_returnflag = 'R'::bpchar)
                                             ->  Hash  (cost=276175.16..276175.16 rows=552900 width=8)
                                                   ->  Bitmap Heap Scan on orders  (cost=6613.66..276175.16 rows=552900 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6475.44 rows=552900 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                           ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                                 Cache Key: customer.c_nationkey
                                 Cache Mode: logical
                                 ->  Index Scan using nation_pkey on nation  (cost=0.14..1.16 rows=1 width=30)
                                       Index Cond: (n_nationkey = customer.c_nationkey)
(28 rows)

query 10 run 4
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1709729.59..1709729.64 rows=20 width=201)
   ->  Sort  (cost=1709729.59..1711102.32 rows=549093 width=201)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=1564562.51..1695118.42 rows=549093 width=201)
               Group Key: customer.c_custkey, nation.n_name
               ->  Incremental Sort  (cost=1564562.51..1681391.09 rows=549093 width=181)
                     Sort Key: customer.c_custkey, nation.n_name
                     Presorted Key: customer.c_custkey
                     ->  Nested Loop  (cost=1564562.33..1656681.91 rows=549093 width=181)
                           ->  Merge Join  (cost=1564562.19..1643229.62 rows=549093 width=159)
                                 Merge Cond: (customer.c_custkey = orders.o_custkey)
                                 ->  Index Scan using customer_pkey on customer  (cost=0.43..66681.42 rows=1500066 width=147)
                                 ->  Sort  (cost=1564561.68..1565934.42 rows=549093 width=16)
                                       Sort Key: orders.o_custkey
                                       ->  Hash Join  (cost=283086.97..1512214.75 rows=549093 width=16)
                                             Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                             ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.56..1190029.50 rows=14894790 width=16)
                                                   Index Cond: (l_returnflag = 'R'::bpchar)
                                             ->  Hash  (cost=276175.16..276175.16 rows=552900 width=8)
                                                   ->  Bitmap Heap Scan on orders  (cost=6613.66..276175.16 rows=552900 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6475.44 rows=552900 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                           ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                                 Cache Key: customer.c_nationkey
                                 Cache Mode: logical
                                 ->  Index Scan using nation_pkey on nation  (cost=0.14..1.16 rows=1 width=30)
                                       Index Cond: (n_nationkey = customer.c_nationkey)
(28 rows)

query 10 run 5
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1709729.59..1709729.64 rows=20 width=201)
   ->  Sort  (cost=1709729.59..1711102.32 rows=549093 width=201)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=1564562.51..1695118.42 rows=549093 width=201)
               Group Key: customer.c_custkey, nation.n_name
               ->  Incremental Sort  (cost=1564562.51..1681391.09 rows=549093 width=181)
                     Sort Key: customer.c_custkey, nation.n_name
                     Presorted Key: customer.c_custkey
                     ->  Nested Loop  (cost=1564562.33..1656681.91 rows=549093 width=181)
                           ->  Merge Join  (cost=1564562.19..1643229.62 rows=549093 width=159)
                                 Merge Cond: (customer.c_custkey = orders.o_custkey)
                                 ->  Index Scan using customer_pkey on customer  (cost=0.43..66681.42 rows=1500066 width=147)
                                 ->  Sort  (cost=1564561.68..1565934.42 rows=549093 width=16)
                                       Sort Key: orders.o_custkey
                                       ->  Hash Join  (cost=283086.97..1512214.75 rows=549093 width=16)
                                             Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                             ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.56..1190029.50 rows=14894790 width=16)
                                                   Index Cond: (l_returnflag = 'R'::bpchar)
                                             ->  Hash  (cost=276175.16..276175.16 rows=552900 width=8)
                                                   ->  Bitmap Heap Scan on orders  (cost=6613.66..276175.16 rows=552900 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6475.44 rows=552900 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                           ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                                 Cache Key: customer.c_nationkey
                                 Cache Mode: logical
                                 ->  Index Scan using nation_pkey on nation  (cost=0.14..1.16 rows=1 width=30)
                                       Index Cond: (n_nationkey = customer.c_nationkey)
(28 rows)

query 11 run 1
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=608260.61..608260.62 rows=1 width=36)
   InitPlan 1
     ->  Aggregate  (cost=293175.04..293175.05 rows=1 width=32)
           ->  Hash Join  (cost=2341.31..290774.80 rows=320032 width=10)
                 Hash Cond: (partsupp_1.ps_suppkey = supplier_1.s_suppkey)
                 ->  Seq Scan on partsupp partsupp_1  (cost=0.00..255230.12 rows=8000812 width=14)
                 ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                       ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                             ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Bitmap Heap Scan on supplier supplier_1  (cost=39.29..2250.00 rows=4000 width=8)
                                   Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                         Index Cond: (s_nationkey = nation_1.n_nationkey)
   ->  Sort  (cost=315085.56..315352.25 rows=106677 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=306626.38..314552.18 rows=106677 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               Planned Partitions: 4
               ->  Hash Join  (cost=2341.31..290774.80 rows=320032 width=14)
                     Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                     ->  Seq Scan on partsupp  (cost=0.00..255230.12 rows=8000812 width=18)
                     ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                           ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                 ->  Bitmap Heap Scan on supplier  (cost=39.29..2250.00 rows=4000 width=8)
                                       Recheck Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
(31 rows)

query 11 run 2
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=608260.61..608260.62 rows=1 width=36)
   InitPlan 1
     ->  Aggregate  (cost=293175.04..293175.05 rows=1 width=32)
           ->  Hash Join  (cost=2341.31..290774.80 rows=320032 width=10)
                 Hash Cond: (partsupp_1.ps_suppkey = supplier_1.s_suppkey)
                 ->  Seq Scan on partsupp partsupp_1  (cost=0.00..255230.12 rows=8000812 width=14)
                 ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                       ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                             ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Bitmap Heap Scan on supplier supplier_1  (cost=39.29..2250.00 rows=4000 width=8)
                                   Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                         Index Cond: (s_nationkey = nation_1.n_nationkey)
   ->  Sort  (cost=315085.56..315352.25 rows=106677 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=306626.38..314552.18 rows=106677 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               Planned Partitions: 4
               ->  Hash Join  (cost=2341.31..290774.80 rows=320032 width=14)
                     Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                     ->  Seq Scan on partsupp  (cost=0.00..255230.12 rows=8000812 width=18)
                     ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                           ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                 ->  Bitmap Heap Scan on supplier  (cost=39.29..2250.00 rows=4000 width=8)
                                       Recheck Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
(31 rows)

query 11 run 3
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=608260.61..608260.62 rows=1 width=36)
   InitPlan 1
     ->  Aggregate  (cost=293175.04..293175.05 rows=1 width=32)
           ->  Hash Join  (cost=2341.31..290774.80 rows=320032 width=10)
                 Hash Cond: (partsupp_1.ps_suppkey = supplier_1.s_suppkey)
                 ->  Seq Scan on partsupp partsupp_1  (cost=0.00..255230.12 rows=8000812 width=14)
                 ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                       ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                             ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Bitmap Heap Scan on supplier supplier_1  (cost=39.29..2250.00 rows=4000 width=8)
                                   Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                         Index Cond: (s_nationkey = nation_1.n_nationkey)
   ->  Sort  (cost=315085.56..315352.25 rows=106677 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=306626.38..314552.18 rows=106677 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               Planned Partitions: 4
               ->  Hash Join  (cost=2341.31..290774.80 rows=320032 width=14)
                     Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                     ->  Seq Scan on partsupp  (cost=0.00..255230.12 rows=8000812 width=18)
                     ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                           ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                 ->  Bitmap Heap Scan on supplier  (cost=39.29..2250.00 rows=4000 width=8)
                                       Recheck Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
(31 rows)

query 11 run 4
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=608260.61..608260.62 rows=1 width=36)
   InitPlan 1
     ->  Aggregate  (cost=293175.04..293175.05 rows=1 width=32)
           ->  Hash Join  (cost=2341.31..290774.80 rows=320032 width=10)
                 Hash Cond: (partsupp_1.ps_suppkey = supplier_1.s_suppkey)
                 ->  Seq Scan on partsupp partsupp_1  (cost=0.00..255230.12 rows=8000812 width=14)
                 ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                       ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                             ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Bitmap Heap Scan on supplier supplier_1  (cost=39.29..2250.00 rows=4000 width=8)
                                   Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                         Index Cond: (s_nationkey = nation_1.n_nationkey)
   ->  Sort  (cost=315085.56..315352.25 rows=106677 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=306626.38..314552.18 rows=106677 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               Planned Partitions: 4
               ->  Hash Join  (cost=2341.31..290774.80 rows=320032 width=14)
                     Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                     ->  Seq Scan on partsupp  (cost=0.00..255230.12 rows=8000812 width=18)
                     ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                           ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                 ->  Bitmap Heap Scan on supplier  (cost=39.29..2250.00 rows=4000 width=8)
                                       Recheck Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
(31 rows)

query 11 run 5
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=608260.61..608260.62 rows=1 width=36)
   InitPlan 1
     ->  Aggregate  (cost=293175.04..293175.05 rows=1 width=32)
           ->  Hash Join  (cost=2341.31..290774.80 rows=320032 width=10)
                 Hash Cond: (partsupp_1.ps_suppkey = supplier_1.s_suppkey)
                 ->  Seq Scan on partsupp partsupp_1  (cost=0.00..255230.12 rows=8000812 width=14)
                 ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                       ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                             ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                             ->  Bitmap Heap Scan on supplier supplier_1  (cost=39.29..2250.00 rows=4000 width=8)
                                   Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                         Index Cond: (s_nationkey = nation_1.n_nationkey)
   ->  Sort  (cost=315085.56..315352.25 rows=106677 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  HashAggregate  (cost=306626.38..314552.18 rows=106677 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               Planned Partitions: 4
               ->  Hash Join  (cost=2341.31..290774.80 rows=320032 width=14)
                     Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                     ->  Seq Scan on partsupp  (cost=0.00..255230.12 rows=8000812 width=18)
                     ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                           ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                 ->  Bitmap Heap Scan on supplier  (cost=39.29..2250.00 rows=4000 width=8)
                                       Recheck Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                             Index Cond: (s_nationkey = nation.n_nationkey)
(31 rows)

query 12 run 1
SET
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=688196.67..688196.67 rows=1 width=27)
   ->  Sort  (cost=688196.67..688196.68 rows=7 width=27)
         Sort Key: lineitem.l_shipmode
         ->  HashAggregate  (cost=688196.56..688196.63 rows=7 width=27)
               Group Key: lineitem.l_shipmode
               ->  Hash Join  (cost=156657.73..683229.73 rows=283819 width=27)
                     Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Seq Scan on orders  (cost=0.00..411248.46 rows=14998046 width=20)
                     ->  Hash  (cost=153110.00..153110.00 rows=283819 width=15)
                           ->  Index Only Scan using q12_idx_1 on lineitem  (cost=0.43..153110.00 rows=283819 width=15)
                                 Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
(11 rows)

query 12 run 2
SET
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=688196.67..688196.67 rows=1 width=27)
   ->  Sort  (cost=688196.67..688196.68 rows=7 width=27)
         Sort Key: lineitem.l_shipmode
         ->  HashAggregate  (cost=688196.56..688196.63 rows=7 width=27)
               Group Key: lineitem.l_shipmode
               ->  Hash Join  (cost=156657.73..683229.73 rows=283819 width=27)
                     Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Seq Scan on orders  (cost=0.00..411248.46 rows=14998046 width=20)
                     ->  Hash  (cost=153110.00..153110.00 rows=283819 width=15)
                           ->  Index Only Scan using q12_idx_1 on lineitem  (cost=0.43..153110.00 rows=283819 width=15)
                                 Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
(11 rows)

query 12 run 3
SET
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=688196.67..688196.67 rows=1 width=27)
   ->  Sort  (cost=688196.67..688196.68 rows=7 width=27)
         Sort Key: lineitem.l_shipmode
         ->  HashAggregate  (cost=688196.56..688196.63 rows=7 width=27)
               Group Key: lineitem.l_shipmode
               ->  Hash Join  (cost=156657.73..683229.73 rows=283819 width=27)
                     Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Seq Scan on orders  (cost=0.00..411248.46 rows=14998046 width=20)
                     ->  Hash  (cost=153110.00..153110.00 rows=283819 width=15)
                           ->  Index Only Scan using q12_idx_1 on lineitem  (cost=0.43..153110.00 rows=283819 width=15)
                                 Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
(11 rows)

query 12 run 4
SET
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=688196.67..688196.67 rows=1 width=27)
   ->  Sort  (cost=688196.67..688196.68 rows=7 width=27)
         Sort Key: lineitem.l_shipmode
         ->  HashAggregate  (cost=688196.56..688196.63 rows=7 width=27)
               Group Key: lineitem.l_shipmode
               ->  Hash Join  (cost=156657.73..683229.73 rows=283819 width=27)
                     Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Seq Scan on orders  (cost=0.00..411248.46 rows=14998046 width=20)
                     ->  Hash  (cost=153110.00..153110.00 rows=283819 width=15)
                           ->  Index Only Scan using q12_idx_1 on lineitem  (cost=0.43..153110.00 rows=283819 width=15)
                                 Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
(11 rows)

query 12 run 5
SET
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=688196.67..688196.67 rows=1 width=27)
   ->  Sort  (cost=688196.67..688196.68 rows=7 width=27)
         Sort Key: lineitem.l_shipmode
         ->  HashAggregate  (cost=688196.56..688196.63 rows=7 width=27)
               Group Key: lineitem.l_shipmode
               ->  Hash Join  (cost=156657.73..683229.73 rows=283819 width=27)
                     Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Seq Scan on orders  (cost=0.00..411248.46 rows=14998046 width=20)
                     ->  Hash  (cost=153110.00..153110.00 rows=283819 width=15)
                           ->  Index Only Scan using q12_idx_1 on lineitem  (cost=0.43..153110.00 rows=283819 width=15)
                                 Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
(11 rows)

query 13 run 1
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1430375.71..1430375.71 rows=1 width=16)
   ->  Sort  (cost=1430375.71..1430376.21 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1430372.71..1430374.71 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=1275710.54..1407871.72 rows=1500066 width=12)
                     Group Key: customer.c_custkey
                     Planned Partitions: 4
                     ->  Hash Right Join  (cost=55344.24..666475.86 rows=14996546 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..448743.58 rows=14996546 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=30733.42..30733.42 rows=1500066 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.43..30733.42 rows=1500066 width=4)
(14 rows)

query 13 run 2
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1430375.71..1430375.71 rows=1 width=16)
   ->  Sort  (cost=1430375.71..1430376.21 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1430372.71..1430374.71 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=1275710.54..1407871.72 rows=1500066 width=12)
                     Group Key: customer.c_custkey
                     Planned Partitions: 4
                     ->  Hash Right Join  (cost=55344.24..666475.86 rows=14996546 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..448743.58 rows=14996546 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=30733.42..30733.42 rows=1500066 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.43..30733.42 rows=1500066 width=4)
(14 rows)

query 13 run 3
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1430375.71..1430375.71 rows=1 width=16)
   ->  Sort  (cost=1430375.71..1430376.21 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1430372.71..1430374.71 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=1275710.54..1407871.72 rows=1500066 width=12)
                     Group Key: customer.c_custkey
                     Planned Partitions: 4
                     ->  Hash Right Join  (cost=55344.24..666475.86 rows=14996546 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..448743.58 rows=14996546 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=30733.42..30733.42 rows=1500066 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.43..30733.42 rows=1500066 width=4)
(14 rows)

query 13 run 4
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1430375.71..1430375.71 rows=1 width=16)
   ->  Sort  (cost=1430375.71..1430376.21 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1430372.71..1430374.71 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=1275710.54..1407871.72 rows=1500066 width=12)
                     Group Key: customer.c_custkey
                     Planned Partitions: 4
                     ->  Hash Right Join  (cost=55344.24..666475.86 rows=14996546 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..448743.58 rows=14996546 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=30733.42..30733.42 rows=1500066 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.43..30733.42 rows=1500066 width=4)
(14 rows)

query 13 run 5
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1430375.71..1430375.71 rows=1 width=16)
   ->  Sort  (cost=1430375.71..1430376.21 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1430372.71..1430374.71 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=1275710.54..1407871.72 rows=1500066 width=12)
                     Group Key: customer.c_custkey
                     Planned Partitions: 4
                     ->  Hash Right Join  (cost=55344.24..666475.86 rows=14996546 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..448743.58 rows=14996546 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=30733.42..30733.42 rows=1500066 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.43..30733.42 rows=1500066 width=4)
(14 rows)

query 14 run 1
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1296340.05..1296340.06 rows=1 width=32)
   ->  Aggregate  (cost=1296340.05..1296340.06 rows=1 width=32)
         ->  Merge Join  (cost=13.65..1283575.11 rows=729425 width=33)
               Merge Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Index Only Scan using q14_idx_1 on lineitem  (cost=0.56..1200551.04 rows=760176 width=16)
                     Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..68832.88 rows=2000030 width=25)
(7 rows)

query 14 run 2
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1296340.05..1296340.06 rows=1 width=32)
   ->  Aggregate  (cost=1296340.05..1296340.06 rows=1 width=32)
         ->  Merge Join  (cost=13.65..1283575.11 rows=729425 width=33)
               Merge Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Index Only Scan using q14_idx_1 on lineitem  (cost=0.56..1200551.04 rows=760176 width=16)
                     Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..68832.88 rows=2000030 width=25)
(7 rows)

query 14 run 3
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1296340.05..1296340.06 rows=1 width=32)
   ->  Aggregate  (cost=1296340.05..1296340.06 rows=1 width=32)
         ->  Merge Join  (cost=13.65..1283575.11 rows=729425 width=33)
               Merge Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Index Only Scan using q14_idx_1 on lineitem  (cost=0.56..1200551.04 rows=760176 width=16)
                     Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..68832.88 rows=2000030 width=25)
(7 rows)

query 14 run 4
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1296340.05..1296340.06 rows=1 width=32)
   ->  Aggregate  (cost=1296340.05..1296340.06 rows=1 width=32)
         ->  Merge Join  (cost=13.65..1283575.11 rows=729425 width=33)
               Merge Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Index Only Scan using q14_idx_1 on lineitem  (cost=0.56..1200551.04 rows=760176 width=16)
                     Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..68832.88 rows=2000030 width=25)
(7 rows)

query 14 run 5
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1296340.05..1296340.06 rows=1 width=32)
   ->  Aggregate  (cost=1296340.05..1296340.06 rows=1 width=32)
         ->  Merge Join  (cost=13.65..1283575.11 rows=729425 width=33)
               Merge Cond: (lineitem.l_partkey = part.p_partkey)
               ->  Index Only Scan using q14_idx_1 on lineitem  (cost=0.56..1200551.04 rows=760176 width=16)
                     Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
               ->  Index Only Scan using q2_idx_1 on part  (cost=0.43..68832.88 rows=2000030 width=25)
(7 rows)

query 15 run 1
SET
SET
SET
CREATE VIEW
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3778551.19..3778560.24 rows=1 width=104)
   InitPlan 1
     ->  Aggregate  (cost=1889762.52..1889762.53 rows=1 width=32)
           ->  HashAggregate  (cost=1887258.45..1888510.48 rows=100163 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=41085.68..1864385.17 rows=2287328 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..40513.85 rows=2287328 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=1888788.66..1893320.18 rows=501 width=104)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..4274.29 rows=100000 width=72)
         ->  Sort  (cost=1888788.37..1888789.62 rows=501 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=1887258.45..1888765.90 rows=501 width=36)
                     ->  HashAggregate  (cost=1887258.45..1888760.89 rows=501 width=36)
                           Group Key: lineitem.l_suppkey
                           Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
                           ->  Bitmap Heap Scan on lineitem  (cost=41085.68..1864385.17 rows=2287328 width=16)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..40513.85 rows=2287328 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(22 rows)

DROP VIEW
query 15 run 2
SET
SET
SET
CREATE VIEW
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3778551.19..3778560.24 rows=1 width=104)
   InitPlan 1
     ->  Aggregate  (cost=1889762.52..1889762.53 rows=1 width=32)
           ->  HashAggregate  (cost=1887258.45..1888510.48 rows=100163 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=41085.68..1864385.17 rows=2287328 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..40513.85 rows=2287328 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=1888788.66..1893320.18 rows=501 width=104)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..4274.29 rows=100000 width=72)
         ->  Sort  (cost=1888788.37..1888789.62 rows=501 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=1887258.45..1888765.90 rows=501 width=36)
                     ->  HashAggregate  (cost=1887258.45..1888760.89 rows=501 width=36)
                           Group Key: lineitem.l_suppkey
                           Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
                           ->  Bitmap Heap Scan on lineitem  (cost=41085.68..1864385.17 rows=2287328 width=16)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..40513.85 rows=2287328 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(22 rows)

DROP VIEW
query 15 run 3
SET
SET
SET
CREATE VIEW
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3778551.19..3778560.24 rows=1 width=104)
   InitPlan 1
     ->  Aggregate  (cost=1889762.52..1889762.53 rows=1 width=32)
           ->  HashAggregate  (cost=1887258.45..1888510.48 rows=100163 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=41085.68..1864385.17 rows=2287328 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..40513.85 rows=2287328 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=1888788.66..1893320.18 rows=501 width=104)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..4274.29 rows=100000 width=72)
         ->  Sort  (cost=1888788.37..1888789.62 rows=501 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=1887258.45..1888765.90 rows=501 width=36)
                     ->  HashAggregate  (cost=1887258.45..1888760.89 rows=501 width=36)
                           Group Key: lineitem.l_suppkey
                           Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
                           ->  Bitmap Heap Scan on lineitem  (cost=41085.68..1864385.17 rows=2287328 width=16)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..40513.85 rows=2287328 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(22 rows)

DROP VIEW
query 15 run 4
SET
SET
SET
CREATE VIEW
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3778551.19..3778560.24 rows=1 width=104)
   InitPlan 1
     ->  Aggregate  (cost=1889762.52..1889762.53 rows=1 width=32)
           ->  HashAggregate  (cost=1887258.45..1888510.48 rows=100163 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=41085.68..1864385.17 rows=2287328 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..40513.85 rows=2287328 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=1888788.66..1893320.18 rows=501 width=104)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..4274.29 rows=100000 width=72)
         ->  Sort  (cost=1888788.37..1888789.62 rows=501 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=1887258.45..1888765.90 rows=501 width=36)
                     ->  HashAggregate  (cost=1887258.45..1888760.89 rows=501 width=36)
                           Group Key: lineitem.l_suppkey
                           Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
                           ->  Bitmap Heap Scan on lineitem  (cost=41085.68..1864385.17 rows=2287328 width=16)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..40513.85 rows=2287328 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(22 rows)

DROP VIEW
query 15 run 5
SET
SET
SET
CREATE VIEW
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=3778551.19..3778560.24 rows=1 width=104)
   InitPlan 1
     ->  Aggregate  (cost=1889762.52..1889762.53 rows=1 width=32)
           ->  HashAggregate  (cost=1887258.45..1888510.48 rows=100163 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Bitmap Heap Scan on lineitem lineitem_1  (cost=41085.68..1864385.17 rows=2287328 width=16)
                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..40513.85 rows=2287328 width=0)
                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Merge Join  (cost=1888788.66..1893320.18 rows=501 width=104)
         Merge Cond: (supplier.s_suppkey = revenue0.supplier_no)
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..4274.29 rows=100000 width=72)
         ->  Sort  (cost=1888788.37..1888789.62 rows=501 width=36)
               Sort Key: revenue0.supplier_no
               ->  Subquery Scan on revenue0  (cost=1887258.45..1888765.90 rows=501 width=36)
                     ->  HashAggregate  (cost=1887258.45..1888760.89 rows=501 width=36)
                           Group Key: lineitem.l_suppkey
                           Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
                           ->  Bitmap Heap Scan on lineitem  (cost=41085.68..1864385.17 rows=2287328 width=16)
                                 Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..40513.85 rows=2287328 width=0)
                                       Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
(22 rows)

DROP VIEW
query 16 run 1
SET
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=370759.87..370759.87 rows=1 width=44)
   ->  Sort  (cost=370759.87..371144.05 rows=153673 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=361037.96..369991.51 rows=153673 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=361037.96..362521.33 rows=593345 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                     ->  Hash Join  (cost=98161.29..292550.59 rows=593345 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..187359.67 rows=4000406 width=8)
                                 Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=90981.75..90981.75 rows=296647 width=40)
                                 ->  Seq Scan on part  (cost=0.00..90981.75 rows=296647 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(17 rows)

query 16 run 2
SET
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=370759.87..370759.87 rows=1 width=44)
   ->  Sort  (cost=370759.87..371144.05 rows=153673 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=361037.96..369991.51 rows=153673 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=361037.96..362521.33 rows=593345 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                     ->  Hash Join  (cost=98161.29..292550.59 rows=593345 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..187359.67 rows=4000406 width=8)
                                 Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=90981.75..90981.75 rows=296647 width=40)
                                 ->  Seq Scan on part  (cost=0.00..90981.75 rows=296647 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(17 rows)

query 16 run 3
SET
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=370759.87..370759.87 rows=1 width=44)
   ->  Sort  (cost=370759.87..371144.05 rows=153673 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=361037.96..369991.51 rows=153673 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=361037.96..362521.33 rows=593345 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                     ->  Hash Join  (cost=98161.29..292550.59 rows=593345 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..187359.67 rows=4000406 width=8)
                                 Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=90981.75..90981.75 rows=296647 width=40)
                                 ->  Seq Scan on part  (cost=0.00..90981.75 rows=296647 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(17 rows)

query 16 run 4
SET
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=370759.87..370759.87 rows=1 width=44)
   ->  Sort  (cost=370759.87..371144.05 rows=153673 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=361037.96..369991.51 rows=153673 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=361037.96..362521.33 rows=593345 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                     ->  Hash Join  (cost=98161.29..292550.59 rows=593345 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..187359.67 rows=4000406 width=8)
                                 Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=90981.75..90981.75 rows=296647 width=40)
                                 ->  Seq Scan on part  (cost=0.00..90981.75 rows=296647 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(17 rows)

query 16 run 5
SET
SET
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=370759.87..370759.87 rows=1 width=44)
   ->  Sort  (cost=370759.87..371144.05 rows=153673 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=361037.96..369991.51 rows=153673 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Sort  (cost=361037.96..362521.33 rows=593345 width=40)
                     Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                     ->  Hash Join  (cost=98161.29..292550.59 rows=593345 width=40)
                           Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                           ->  Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..187359.67 rows=4000406 width=8)
                                 Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                 SubPlan 1
                                   ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                         Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                           ->  Hash  (cost=90981.75..90981.75 rows=296647 width=40)
                                 ->  Seq Scan on part  (cost=0.00..90981.75 rows=296647 width=40)
                                       Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
(17 rows)

query 17 run 1
SET
SET
SET
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1776063.09..1776063.10 rows=1 width=32)
   ->  Aggregate  (cost=1776063.09..1776063.10 rows=1 width=32)
         ->  Nested Loop  (cost=71096.40..1776011.42 rows=20665 width=8)
               Join Filter: (part.p_partkey = lineitem.l_partkey)
               ->  Merge Join  (cost=71095.84..1769423.23 rows=2154 width=40)
                     Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                     ->  Sort  (cost=71095.27..71100.44 rows=2067 width=4)
                           Sort Key: part.p_partkey
                           ->  Seq Scan on part  (cost=0.00..70981.45 rows=2067 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                     ->  GroupAggregate  (cost=0.56..1693085.21 rows=2084347 width=36)
                           Group Key: lineitem_1.l_partkey
                           ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.56..1361884.65 rows=59987072 width=9)
               ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..2.93 rows=10 width=17)
                     Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
(15 rows)

query 17 run 2
SET
SET
SET
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1776063.09..1776063.10 rows=1 width=32)
   ->  Aggregate  (cost=1776063.09..1776063.10 rows=1 width=32)
         ->  Nested Loop  (cost=71096.40..1776011.42 rows=20665 width=8)
               Join Filter: (part.p_partkey = lineitem.l_partkey)
               ->  Merge Join  (cost=71095.84..1769423.23 rows=2154 width=40)
                     Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                     ->  Sort  (cost=71095.27..71100.44 rows=2067 width=4)
                           Sort Key: part.p_partkey
                           ->  Seq Scan on part  (cost=0.00..70981.45 rows=2067 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                     ->  GroupAggregate  (cost=0.56..1693085.21 rows=2084347 width=36)
                           Group Key: lineitem_1.l_partkey
                           ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.56..1361884.65 rows=59987072 width=9)
               ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..2.93 rows=10 width=17)
                     Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
(15 rows)

query 17 run 3
SET
SET
SET
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1776063.09..1776063.10 rows=1 width=32)
   ->  Aggregate  (cost=1776063.09..1776063.10 rows=1 width=32)
         ->  Nested Loop  (cost=71096.40..1776011.42 rows=20665 width=8)
               Join Filter: (part.p_partkey = lineitem.l_partkey)
               ->  Merge Join  (cost=71095.84..1769423.23 rows=2154 width=40)
                     Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                     ->  Sort  (cost=71095.27..71100.44 rows=2067 width=4)
                           Sort Key: part.p_partkey
                           ->  Seq Scan on part  (cost=0.00..70981.45 rows=2067 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                     ->  GroupAggregate  (cost=0.56..1693085.21 rows=2084347 width=36)
                           Group Key: lineitem_1.l_partkey
                           ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.56..1361884.65 rows=59987072 width=9)
               ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..2.93 rows=10 width=17)
                     Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
(15 rows)

query 17 run 4
SET
SET
SET
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1776063.09..1776063.10 rows=1 width=32)
   ->  Aggregate  (cost=1776063.09..1776063.10 rows=1 width=32)
         ->  Nested Loop  (cost=71096.40..1776011.42 rows=20665 width=8)
               Join Filter: (part.p_partkey = lineitem.l_partkey)
               ->  Merge Join  (cost=71095.84..1769423.23 rows=2154 width=40)
                     Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                     ->  Sort  (cost=71095.27..71100.44 rows=2067 width=4)
                           Sort Key: part.p_partkey
                           ->  Seq Scan on part  (cost=0.00..70981.45 rows=2067 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                     ->  GroupAggregate  (cost=0.56..1693085.21 rows=2084347 width=36)
                           Group Key: lineitem_1.l_partkey
                           ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.56..1361884.65 rows=59987072 width=9)
               ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..2.93 rows=10 width=17)
                     Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
(15 rows)

query 17 run 5
SET
SET
SET
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1776063.09..1776063.10 rows=1 width=32)
   ->  Aggregate  (cost=1776063.09..1776063.10 rows=1 width=32)
         ->  Nested Loop  (cost=71096.40..1776011.42 rows=20665 width=8)
               Join Filter: (part.p_partkey = lineitem.l_partkey)
               ->  Merge Join  (cost=71095.84..1769423.23 rows=2154 width=40)
                     Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                     ->  Sort  (cost=71095.27..71100.44 rows=2067 width=4)
                           Sort Key: part.p_partkey
                           ->  Seq Scan on part  (cost=0.00..70981.45 rows=2067 width=4)
                                 Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                     ->  GroupAggregate  (cost=0.56..1693085.21 rows=2084347 width=36)
                           Group Key: lineitem_1.l_partkey
                           ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.56..1361884.65 rows=59987072 width=9)
               ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..2.93 rows=10 width=17)
                     Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
(15 rows)

query 18 run 1
SET
SET
SET
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=7005390.64..7005390.89 rows=100 width=71)
   ->  Sort  (cost=7005390.64..7055375.61 rows=19993988 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=3380019.72..6241234.80 rows=19993988 width=71)
               Group Key: orders.o_orderkey, customer.c_custkey
               ->  Incremental Sort  (cost=3380019.72..5841355.04 rows=19993988 width=44)
                     Sort Key: orders.o_orderkey, customer.c_custkey
                     Presorted Key: orders.o_orderkey
                     ->  Merge Join  (cost=3380019.59..5116483.55 rows=19993988 width=44)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Sort  (cost=3380017.81..3392515.11 rows=4998923 width=43)
                                 Sort Key: orders.o_orderkey
                                 ->  Hash Join  (cost=78489.49..2713967.99 rows=4998923 width=43)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Merge Join  (cost=1.00..2554985.30 rows=4998923 width=24)
                                             Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                             ->  Index Scan using orders_pkey on orders  (cost=0.43..568502.12 rows=14998046 width=20)
                                             ->  GroupAggregate  (cost=0.56..1886501.52 rows=4998923 width=4)
                                                   Group Key: lineitem_1.l_orderkey
                                                   Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                   ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.56..1361614.65 rows=59987072 width=9)
                                       ->  Hash  (cost=50947.66..50947.66 rows=1500066 width=23)
                                             ->  Seq Scan on customer  (cost=0.00..50947.66 rows=1500066 width=23)
                           ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.56..1361614.65 rows=59987072 width=9)
(24 rows)

query 18 run 2
SET
SET
SET
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=7005390.64..7005390.89 rows=100 width=71)
   ->  Sort  (cost=7005390.64..7055375.61 rows=19993988 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=3380019.72..6241234.80 rows=19993988 width=71)
               Group Key: orders.o_orderkey, customer.c_custkey
               ->  Incremental Sort  (cost=3380019.72..5841355.04 rows=19993988 width=44)
                     Sort Key: orders.o_orderkey, customer.c_custkey
                     Presorted Key: orders.o_orderkey
                     ->  Merge Join  (cost=3380019.59..5116483.55 rows=19993988 width=44)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Sort  (cost=3380017.81..3392515.11 rows=4998923 width=43)
                                 Sort Key: orders.o_orderkey
                                 ->  Hash Join  (cost=78489.49..2713967.99 rows=4998923 width=43)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Merge Join  (cost=1.00..2554985.30 rows=4998923 width=24)
                                             Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                             ->  Index Scan using orders_pkey on orders  (cost=0.43..568502.12 rows=14998046 width=20)
                                             ->  GroupAggregate  (cost=0.56..1886501.52 rows=4998923 width=4)
                                                   Group Key: lineitem_1.l_orderkey
                                                   Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                   ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.56..1361614.65 rows=59987072 width=9)
                                       ->  Hash  (cost=50947.66..50947.66 rows=1500066 width=23)
                                             ->  Seq Scan on customer  (cost=0.00..50947.66 rows=1500066 width=23)
                           ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.56..1361614.65 rows=59987072 width=9)
(24 rows)

query 18 run 3
SET
SET
SET
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=7005390.64..7005390.89 rows=100 width=71)
   ->  Sort  (cost=7005390.64..7055375.61 rows=19993988 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=3380019.72..6241234.80 rows=19993988 width=71)
               Group Key: orders.o_orderkey, customer.c_custkey
               ->  Incremental Sort  (cost=3380019.72..5841355.04 rows=19993988 width=44)
                     Sort Key: orders.o_orderkey, customer.c_custkey
                     Presorted Key: orders.o_orderkey
                     ->  Merge Join  (cost=3380019.59..5116483.55 rows=19993988 width=44)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Sort  (cost=3380017.81..3392515.11 rows=4998923 width=43)
                                 Sort Key: orders.o_orderkey
                                 ->  Hash Join  (cost=78489.49..2713967.99 rows=4998923 width=43)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Merge Join  (cost=1.00..2554985.30 rows=4998923 width=24)
                                             Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                             ->  Index Scan using orders_pkey on orders  (cost=0.43..568502.12 rows=14998046 width=20)
                                             ->  GroupAggregate  (cost=0.56..1886501.52 rows=4998923 width=4)
                                                   Group Key: lineitem_1.l_orderkey
                                                   Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                   ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.56..1361614.65 rows=59987072 width=9)
                                       ->  Hash  (cost=50947.66..50947.66 rows=1500066 width=23)
                                             ->  Seq Scan on customer  (cost=0.00..50947.66 rows=1500066 width=23)
                           ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.56..1361614.65 rows=59987072 width=9)
(24 rows)

query 18 run 4
SET
SET
SET
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=7005390.64..7005390.89 rows=100 width=71)
   ->  Sort  (cost=7005390.64..7055375.61 rows=19993988 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=3380019.72..6241234.80 rows=19993988 width=71)
               Group Key: orders.o_orderkey, customer.c_custkey
               ->  Incremental Sort  (cost=3380019.72..5841355.04 rows=19993988 width=44)
                     Sort Key: orders.o_orderkey, customer.c_custkey
                     Presorted Key: orders.o_orderkey
                     ->  Merge Join  (cost=3380019.59..5116483.55 rows=19993988 width=44)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Sort  (cost=3380017.81..3392515.11 rows=4998923 width=43)
                                 Sort Key: orders.o_orderkey
                                 ->  Hash Join  (cost=78489.49..2713967.99 rows=4998923 width=43)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Merge Join  (cost=1.00..2554985.30 rows=4998923 width=24)
                                             Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                             ->  Index Scan using orders_pkey on orders  (cost=0.43..568502.12 rows=14998046 width=20)
                                             ->  GroupAggregate  (cost=0.56..1886501.52 rows=4998923 width=4)
                                                   Group Key: lineitem_1.l_orderkey
                                                   Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                   ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.56..1361614.65 rows=59987072 width=9)
                                       ->  Hash  (cost=50947.66..50947.66 rows=1500066 width=23)
                                             ->  Seq Scan on customer  (cost=0.00..50947.66 rows=1500066 width=23)
                           ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.56..1361614.65 rows=59987072 width=9)
(24 rows)

query 18 run 5
SET
SET
SET
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=7005390.64..7005390.89 rows=100 width=71)
   ->  Sort  (cost=7005390.64..7055375.61 rows=19993988 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=3380019.72..6241234.80 rows=19993988 width=71)
               Group Key: orders.o_orderkey, customer.c_custkey
               ->  Incremental Sort  (cost=3380019.72..5841355.04 rows=19993988 width=44)
                     Sort Key: orders.o_orderkey, customer.c_custkey
                     Presorted Key: orders.o_orderkey
                     ->  Merge Join  (cost=3380019.59..5116483.55 rows=19993988 width=44)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Sort  (cost=3380017.81..3392515.11 rows=4998923 width=43)
                                 Sort Key: orders.o_orderkey
                                 ->  Hash Join  (cost=78489.49..2713967.99 rows=4998923 width=43)
                                       Hash Cond: (orders.o_custkey = customer.c_custkey)
                                       ->  Merge Join  (cost=1.00..2554985.30 rows=4998923 width=24)
                                             Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                             ->  Index Scan using orders_pkey on orders  (cost=0.43..568502.12 rows=14998046 width=20)
                                             ->  GroupAggregate  (cost=0.56..1886501.52 rows=4998923 width=4)
                                                   Group Key: lineitem_1.l_orderkey
                                                   Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                                   ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.56..1361614.65 rows=59987072 width=9)
                                       ->  Hash  (cost=50947.66..50947.66 rows=1500066 width=23)
                                             ->  Seq Scan on customer  (cost=0.00..50947.66 rows=1500066 width=23)
                           ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.56..1361614.65 rows=59987072 width=9)
(24 rows)

query 19 run 1
SET
SET
SET


 Limit  (cost=150476.74..150476.75 rows=1 width=32)
   ->  Aggregate  (cost=150476.74..150476.75 rows=1 width=32)
         ->  Nested Loop  (cost=0.56..150468.78 rows=1062 width=12)
               ->  Seq Scan on part  (cost=0.00..125982.28 rows=4700 width=30)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
               ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..5.20 rows=1 width=21)
                     Index Cond: ((l_partkey = part.p_partkey) AND (l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                     Filter: ((((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(8 rows)

query 19 run 2
SET
SET
SET


 Limit  (cost=150476.74..150476.75 rows=1 width=32)
   ->  Aggregate  (cost=150476.74..150476.75 rows=1 width=32)
         ->  Nested Loop  (cost=0.56..150468.78 rows=1062 width=12)
               ->  Seq Scan on part  (cost=0.00..125982.28 rows=4700 width=30)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
               ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..5.20 rows=1 width=21)
                     Index Cond: ((l_partkey = part.p_partkey) AND (l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                     Filter: ((((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(8 rows)

query 19 run 3
SET
SET
SET


 Limit  (cost=150476.74..150476.75 rows=1 width=32)
   ->  Aggregate  (cost=150476.74..150476.75 rows=1 width=32)
         ->  Nested Loop  (cost=0.56..150468.78 rows=1062 width=12)
               ->  Seq Scan on part  (cost=0.00..125982.28 rows=4700 width=30)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
               ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..5.20 rows=1 width=21)
                     Index Cond: ((l_partkey = part.p_partkey) AND (l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                     Filter: ((((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(8 rows)

query 19 run 4
SET
SET
SET

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=150476.74..150476.75 rows=1 width=32)
   ->  Aggregate  (cost=150476.74..150476.75 rows=1 width=32)
         ->  Nested Loop  (cost=0.56..150468.78 rows=1062 width=12)
               ->  Seq Scan on part  (cost=0.00..125982.28 rows=4700 width=30)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
               ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..5.20 rows=1 width=21)
                     Index Cond: ((l_partkey = part.p_partkey) AND (l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                     Filter: ((((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(8 rows)

query 19 run 5
SET
SET
SET
                                                                                                                                                                                                                                                                                                                                                                                                                                                        QUERY PLAN                                                                                                                                                                                                                                                                                                                                                                                                                                                        

 Limit  (cost=150476.74..150476.75 rows=1 width=32)
   ->  Aggregate  (cost=150476.74..150476.75 rows=1 width=32)
         ->  Nested Loop  (cost=0.56..150468.78 rows=1062 width=12)
               ->  Seq Scan on part  (cost=0.00..125982.28 rows=4700 width=30)
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
               ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..5.20 rows=1 width=21)
                     Index Cond: ((l_partkey = part.p_partkey) AND (l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                     Filter: ((((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(8 rows)

query 20 run 1
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2789352.17..2789352.18 rows=1 width=52)
   ->  Sort  (cost=2789352.17..2789352.18 rows=1 width=52)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=2584075.70..2789352.16 rows=1 width=52)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..4472.31 rows=4000 width=56)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=60)
               ->  Materialize  (cost=2584075.70..2784699.86 rows=3 width=8)
                     ->  Hash Join  (cost=2584075.70..2784699.84 rows=3 width=8)
                           Hash Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                           Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                           ->  HashAggregate  (cost=2461933.17..2625927.81 rows=4883916 width=40)
                                 Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                 Planned Partitions: 32
                                 ->  Seq Scan on lineitem  (cost=0.00..2024949.08 rows=9291356 width=13)
                                       Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Hash  (cost=120930.31..120930.31 rows=80815 width=16)
                                 ->  Nested Loop  (cost=0.86..120930.31 rows=80815 width=16)
                                       ->  Index Only Scan using q20_idx_2 on part  (cost=0.43..64306.95 rows=20202 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.43..2.62 rows=18 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
(25 rows)

query 20 run 2
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2789352.17..2789352.18 rows=1 width=52)
   ->  Sort  (cost=2789352.17..2789352.18 rows=1 width=52)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=2584075.70..2789352.16 rows=1 width=52)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..4472.31 rows=4000 width=56)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=60)
               ->  Materialize  (cost=2584075.70..2784699.86 rows=3 width=8)
                     ->  Hash Join  (cost=2584075.70..2784699.84 rows=3 width=8)
                           Hash Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                           Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                           ->  HashAggregate  (cost=2461933.17..2625927.81 rows=4883916 width=40)
                                 Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                 Planned Partitions: 32
                                 ->  Seq Scan on lineitem  (cost=0.00..2024949.08 rows=9291356 width=13)
                                       Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Hash  (cost=120930.31..120930.31 rows=80815 width=16)
                                 ->  Nested Loop  (cost=0.86..120930.31 rows=80815 width=16)
                                       ->  Index Only Scan using q20_idx_2 on part  (cost=0.43..64306.95 rows=20202 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.43..2.62 rows=18 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
(25 rows)

query 20 run 3
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2789352.17..2789352.18 rows=1 width=52)
   ->  Sort  (cost=2789352.17..2789352.18 rows=1 width=52)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=2584075.70..2789352.16 rows=1 width=52)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..4472.31 rows=4000 width=56)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=60)
               ->  Materialize  (cost=2584075.70..2784699.86 rows=3 width=8)
                     ->  Hash Join  (cost=2584075.70..2784699.84 rows=3 width=8)
                           Hash Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                           Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                           ->  HashAggregate  (cost=2461933.17..2625927.81 rows=4883916 width=40)
                                 Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                 Planned Partitions: 32
                                 ->  Seq Scan on lineitem  (cost=0.00..2024949.08 rows=9291356 width=13)
                                       Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Hash  (cost=120930.31..120930.31 rows=80815 width=16)
                                 ->  Nested Loop  (cost=0.86..120930.31 rows=80815 width=16)
                                       ->  Index Only Scan using q20_idx_2 on part  (cost=0.43..64306.95 rows=20202 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.43..2.62 rows=18 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
(25 rows)

query 20 run 4
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2789352.17..2789352.18 rows=1 width=52)
   ->  Sort  (cost=2789352.17..2789352.18 rows=1 width=52)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=2584075.70..2789352.16 rows=1 width=52)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..4472.31 rows=4000 width=56)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=60)
               ->  Materialize  (cost=2584075.70..2784699.86 rows=3 width=8)
                     ->  Hash Join  (cost=2584075.70..2784699.84 rows=3 width=8)
                           Hash Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                           Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                           ->  HashAggregate  (cost=2461933.17..2625927.81 rows=4883916 width=40)
                                 Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                 Planned Partitions: 32
                                 ->  Seq Scan on lineitem  (cost=0.00..2024949.08 rows=9291356 width=13)
                                       Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Hash  (cost=120930.31..120930.31 rows=80815 width=16)
                                 ->  Nested Loop  (cost=0.86..120930.31 rows=80815 width=16)
                                       ->  Index Only Scan using q20_idx_2 on part  (cost=0.43..64306.95 rows=20202 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.43..2.62 rows=18 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
(25 rows)

query 20 run 5
SET
SET
SET
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2789352.17..2789352.18 rows=1 width=52)
   ->  Sort  (cost=2789352.17..2789352.18 rows=1 width=52)
         Sort Key: supplier.s_name
         ->  Nested Loop Semi Join  (cost=2584075.70..2789352.16 rows=1 width=52)
               Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
               ->  Nested Loop  (cost=0.00..4472.31 rows=4000 width=56)
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                           Filter: (n_name = 'IRAQ'::bpchar)
                     ->  Seq Scan on supplier  (cost=0.00..3221.00 rows=100000 width=60)
               ->  Materialize  (cost=2584075.70..2784699.86 rows=3 width=8)
                     ->  Hash Join  (cost=2584075.70..2784699.84 rows=3 width=8)
                           Hash Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                           Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                           ->  HashAggregate  (cost=2461933.17..2625927.81 rows=4883916 width=40)
                                 Group Key: lineitem.l_partkey, lineitem.l_suppkey
                                 Planned Partitions: 32
                                 ->  Seq Scan on lineitem  (cost=0.00..2024949.08 rows=9291356 width=13)
                                       Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                           ->  Hash  (cost=120930.31..120930.31 rows=80815 width=16)
                                 ->  Nested Loop  (cost=0.86..120930.31 rows=80815 width=16)
                                       ->  Index Only Scan using q20_idx_2 on part  (cost=0.43..64306.95 rows=20202 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.43..2.62 rows=18 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
(25 rows)

query 21 run 1
SET
SET
SET
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1066938.94..1066938.95 rows=1 width=34)
   ->  Sort  (cost=1066938.94..1066938.95 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=1066938.91..1066938.93 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=1066938.91..1066938.92 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=589418.83..1066938.90 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=589418.26..1066936.26 rows=1 width=38)
                                 ->  Merge Anti Join  (cost=589417.83..1066933.81 rows=1 width=34)
                                       Merge Cond: (l1.l_orderkey = l3.l_orderkey)
                                       Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                       ->  Sort  (cost=589417.26..591413.58 rows=798526 width=34)
                                             Sort Key: l1.l_orderkey
                                             ->  Hash Join  (cost=2341.88..495536.34 rows=798526 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.56..410225.93 rows=19995691 width=8)
                                                   ->  Hash  (cost=2291.31..2291.31 rows=4000 width=30)
                                                         ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=39.29..2250.00 rows=4000 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.56..410225.93 rows=19995691 width=8)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.45 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.56..2.63 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(31 rows)

query 21 run 2
SET
SET
SET
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1066938.94..1066938.95 rows=1 width=34)
   ->  Sort  (cost=1066938.94..1066938.95 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=1066938.91..1066938.93 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=1066938.91..1066938.92 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=589418.83..1066938.90 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=589418.26..1066936.26 rows=1 width=38)
                                 ->  Merge Anti Join  (cost=589417.83..1066933.81 rows=1 width=34)
                                       Merge Cond: (l1.l_orderkey = l3.l_orderkey)
                                       Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                       ->  Sort  (cost=589417.26..591413.58 rows=798526 width=34)
                                             Sort Key: l1.l_orderkey
                                             ->  Hash Join  (cost=2341.88..495536.34 rows=798526 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.56..410225.93 rows=19995691 width=8)
                                                   ->  Hash  (cost=2291.31..2291.31 rows=4000 width=30)
                                                         ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=39.29..2250.00 rows=4000 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.56..410225.93 rows=19995691 width=8)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.45 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.56..2.63 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(31 rows)

query 21 run 3
SET
SET
SET
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1066938.94..1066938.95 rows=1 width=34)
   ->  Sort  (cost=1066938.94..1066938.95 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=1066938.91..1066938.93 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=1066938.91..1066938.92 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=589418.83..1066938.90 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=589418.26..1066936.26 rows=1 width=38)
                                 ->  Merge Anti Join  (cost=589417.83..1066933.81 rows=1 width=34)
                                       Merge Cond: (l1.l_orderkey = l3.l_orderkey)
                                       Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                       ->  Sort  (cost=589417.26..591413.58 rows=798526 width=34)
                                             Sort Key: l1.l_orderkey
                                             ->  Hash Join  (cost=2341.88..495536.34 rows=798526 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.56..410225.93 rows=19995691 width=8)
                                                   ->  Hash  (cost=2291.31..2291.31 rows=4000 width=30)
                                                         ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=39.29..2250.00 rows=4000 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.56..410225.93 rows=19995691 width=8)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.45 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.56..2.63 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(31 rows)

query 21 run 4
SET
SET
SET
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1066938.94..1066938.95 rows=1 width=34)
   ->  Sort  (cost=1066938.94..1066938.95 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=1066938.91..1066938.93 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=1066938.91..1066938.92 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=589418.83..1066938.90 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=589418.26..1066936.26 rows=1 width=38)
                                 ->  Merge Anti Join  (cost=589417.83..1066933.81 rows=1 width=34)
                                       Merge Cond: (l1.l_orderkey = l3.l_orderkey)
                                       Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                       ->  Sort  (cost=589417.26..591413.58 rows=798526 width=34)
                                             Sort Key: l1.l_orderkey
                                             ->  Hash Join  (cost=2341.88..495536.34 rows=798526 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.56..410225.93 rows=19995691 width=8)
                                                   ->  Hash  (cost=2291.31..2291.31 rows=4000 width=30)
                                                         ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=39.29..2250.00 rows=4000 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.56..410225.93 rows=19995691 width=8)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.45 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.56..2.63 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(31 rows)

query 21 run 5
SET
SET
SET
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1066938.94..1066938.95 rows=1 width=34)
   ->  Sort  (cost=1066938.94..1066938.95 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=1066938.91..1066938.93 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=1066938.91..1066938.92 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=589418.83..1066938.90 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=589418.26..1066936.26 rows=1 width=38)
                                 ->  Merge Anti Join  (cost=589417.83..1066933.81 rows=1 width=34)
                                       Merge Cond: (l1.l_orderkey = l3.l_orderkey)
                                       Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                       ->  Sort  (cost=589417.26..591413.58 rows=798526 width=34)
                                             Sort Key: l1.l_orderkey
                                             ->  Hash Join  (cost=2341.88..495536.34 rows=798526 width=34)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.56..410225.93 rows=19995691 width=8)
                                                   ->  Hash  (cost=2291.31..2291.31 rows=4000 width=30)
                                                         ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=30)
                                                               ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                     Filter: (n_name = 'PERU'::bpchar)
                                                               ->  Bitmap Heap Scan on supplier  (cost=39.29..2250.00 rows=4000 width=34)
                                                                     Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                                     ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                                           Index Cond: (s_nationkey = nation.n_nationkey)
                                       ->  Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.56..410225.93 rows=19995691 width=8)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.45 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.56..2.63 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
(31 rows)

query 22 run 1
SET
SET
SET
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=162191.67..162191.69 rows=1 width=72)
   InitPlan 1
     ->  Aggregate  (cost=75443.51..75443.52 rows=1 width=32)
           ->  Seq Scan on customer customer_1  (cost=0.00..75323.73 rows=47908 width=6)
                 Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=86748.15..86973.40 rows=8191 width=72)
         Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
         ->  Sort  (cost=86748.15..86768.63 rows=8191 width=38)
               Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
               ->  Nested Loop Anti Join  (cost=0.43..86215.74 rows=8191 width=38)
                     ->  Seq Scan on customer  (cost=0.00..75323.73 rows=17501 width=26)
                           Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.67 rows=19 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
(14 rows)

query 22 run 2
SET
SET
SET
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=162191.67..162191.69 rows=1 width=72)
   InitPlan 1
     ->  Aggregate  (cost=75443.51..75443.52 rows=1 width=32)
           ->  Seq Scan on customer customer_1  (cost=0.00..75323.73 rows=47908 width=6)
                 Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=86748.15..86973.40 rows=8191 width=72)
         Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
         ->  Sort  (cost=86748.15..86768.63 rows=8191 width=38)
               Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
               ->  Nested Loop Anti Join  (cost=0.43..86215.74 rows=8191 width=38)
                     ->  Seq Scan on customer  (cost=0.00..75323.73 rows=17501 width=26)
                           Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.67 rows=19 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
(14 rows)

query 22 run 3
SET
SET
SET
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=162191.67..162191.69 rows=1 width=72)
   InitPlan 1
     ->  Aggregate  (cost=75443.51..75443.52 rows=1 width=32)
           ->  Seq Scan on customer customer_1  (cost=0.00..75323.73 rows=47908 width=6)
                 Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=86748.15..86973.40 rows=8191 width=72)
         Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
         ->  Sort  (cost=86748.15..86768.63 rows=8191 width=38)
               Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
               ->  Nested Loop Anti Join  (cost=0.43..86215.74 rows=8191 width=38)
                     ->  Seq Scan on customer  (cost=0.00..75323.73 rows=17501 width=26)
                           Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.67 rows=19 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
(14 rows)

query 22 run 4
SET
SET
SET
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=162191.67..162191.69 rows=1 width=72)
   InitPlan 1
     ->  Aggregate  (cost=75443.51..75443.52 rows=1 width=32)
           ->  Seq Scan on customer customer_1  (cost=0.00..75323.73 rows=47908 width=6)
                 Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=86748.15..86973.40 rows=8191 width=72)
         Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
         ->  Sort  (cost=86748.15..86768.63 rows=8191 width=38)
               Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
               ->  Nested Loop Anti Join  (cost=0.43..86215.74 rows=8191 width=38)
                     ->  Seq Scan on customer  (cost=0.00..75323.73 rows=17501 width=26)
                           Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.67 rows=19 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
(14 rows)

query 22 run 5
SET
SET
SET
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=162191.67..162191.69 rows=1 width=72)
   InitPlan 1
     ->  Aggregate  (cost=75443.51..75443.52 rows=1 width=32)
           ->  Seq Scan on customer customer_1  (cost=0.00..75323.73 rows=47908 width=6)
                 Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=86748.15..86973.40 rows=8191 width=72)
         Group Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
         ->  Sort  (cost=86748.15..86768.63 rows=8191 width=38)
               Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
               ->  Nested Loop Anti Join  (cost=0.43..86215.74 rows=8191 width=38)
                     ->  Seq Scan on customer  (cost=0.00..75323.73 rows=17501 width=26)
                           Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
                     ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.67 rows=19 width=4)
                           Index Cond: (o_custkey = customer.c_custkey)
(14 rows)

