query 1 run 1
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1832272.03..1832272.67 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=1832272.03..1832275.85 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=1832272.03..1832274.90 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=1831271.97..1831271.99 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=1831271.76..1831271.89 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1312624.40 rows=14818496 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
 JIT:
   Functions: 10
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(14 rows)

query 1 run 2
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1832272.03..1832272.67 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=1832272.03..1832275.85 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=1832272.03..1832274.90 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=1831271.97..1831271.99 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=1831271.76..1831271.89 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1312624.40 rows=14818496 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
 JIT:
   Functions: 10
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(14 rows)

query 1 run 3
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1832272.03..1832272.67 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=1832272.03..1832275.85 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=1832272.03..1832274.90 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=1831271.97..1831271.99 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=1831271.76..1831271.89 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1312624.40 rows=14818496 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
 JIT:
   Functions: 10
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(14 rows)

query 1 run 4
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1832272.03..1832272.67 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=1832272.03..1832275.85 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=1832272.03..1832274.90 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=1831271.97..1831271.99 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=1831271.76..1831271.89 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1312624.40 rows=14818496 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
 JIT:
   Functions: 10
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(14 rows)

query 1 run 5
SET
SET
SET
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=1832272.03..1832272.67 rows=1 width=236)
   ->  Finalize GroupAggregate  (cost=1832272.03..1832275.85 rows=6 width=236)
         Group Key: l_returnflag, l_linestatus
         ->  Gather Merge  (cost=1832272.03..1832274.90 rows=24 width=236)
               Workers Planned: 4
               ->  Sort  (cost=1831271.97..1831271.99 rows=6 width=236)
                     Sort Key: l_returnflag, l_linestatus
                     ->  Partial HashAggregate  (cost=1831271.76..1831271.89 rows=6 width=236)
                           Group Key: l_returnflag, l_linestatus
                           ->  Parallel Seq Scan on lineitem  (cost=0.00..1312624.40 rows=14818496 width=25)
                                 Filter: (l_shipdate <= '1998-09-10 00:00:00'::timestamp without time zone)
 JIT:
   Functions: 10
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(14 rows)

query 2 run 1
SET
SET
SET
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=397492.99..397493.00 rows=1 width=192)
   ->  Sort  (cost=397492.99..397493.00 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=1052.70..397492.98 rows=1 width=192)
               Join Filter: (supplier.s_nationkey = nation.n_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=1052.70..397490.29 rows=1 width=170)
                     ->  Nested Loop  (cost=1052.70..397490.28 rows=1 width=170)
                           ->  Nested Loop  (cost=1052.41..397486.27 rows=1 width=34)
                                 ->  Gather  (cost=1000.00..50118.25 rows=6373 width=30)
                                       Workers Planned: 4
                                       ->  Parallel Seq Scan on part  (cost=0.00..48480.95 rows=1593 width=30)
                                             Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=52.41..54.50 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=51.96..51.97 rows=1 width=32)
                                               ->  Nested Loop  (cost=2.41..51.95 rows=4 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Hash Join  (cost=2.41..50.65 rows=19 width=10)
                                                           Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                                           ->  Nested Loop  (cost=0.85..49.03 rows=19 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.43..2.77 rows=19 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.42..2.43 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                                                 ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
                           ->  Index Scan using supplier_pkey on supplier  (cost=0.29..4.01 rows=1 width=144)
                                 Index Cond: (s_suppkey = partsupp.ps_suppkey)
 JIT:
   Functions: 40
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(39 rows)

query 2 run 2
SET
SET
SET
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=397492.99..397493.00 rows=1 width=192)
   ->  Sort  (cost=397492.99..397493.00 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=1052.70..397492.98 rows=1 width=192)
               Join Filter: (supplier.s_nationkey = nation.n_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=1052.70..397490.29 rows=1 width=170)
                     ->  Nested Loop  (cost=1052.70..397490.28 rows=1 width=170)
                           ->  Nested Loop  (cost=1052.41..397486.27 rows=1 width=34)
                                 ->  Gather  (cost=1000.00..50118.25 rows=6373 width=30)
                                       Workers Planned: 4
                                       ->  Parallel Seq Scan on part  (cost=0.00..48480.95 rows=1593 width=30)
                                             Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=52.41..54.50 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=51.96..51.97 rows=1 width=32)
                                               ->  Nested Loop  (cost=2.41..51.95 rows=4 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Hash Join  (cost=2.41..50.65 rows=19 width=10)
                                                           Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                                           ->  Nested Loop  (cost=0.85..49.03 rows=19 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.43..2.77 rows=19 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.42..2.43 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                                                 ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
                           ->  Index Scan using supplier_pkey on supplier  (cost=0.29..4.01 rows=1 width=144)
                                 Index Cond: (s_suppkey = partsupp.ps_suppkey)
 JIT:
   Functions: 40
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(39 rows)

query 2 run 3
SET
SET
SET
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=397492.99..397493.00 rows=1 width=192)
   ->  Sort  (cost=397492.99..397493.00 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=1052.70..397492.98 rows=1 width=192)
               Join Filter: (supplier.s_nationkey = nation.n_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=1052.70..397490.29 rows=1 width=170)
                     ->  Nested Loop  (cost=1052.70..397490.28 rows=1 width=170)
                           ->  Nested Loop  (cost=1052.41..397486.27 rows=1 width=34)
                                 ->  Gather  (cost=1000.00..50118.25 rows=6373 width=30)
                                       Workers Planned: 4
                                       ->  Parallel Seq Scan on part  (cost=0.00..48480.95 rows=1593 width=30)
                                             Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=52.41..54.50 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=51.96..51.97 rows=1 width=32)
                                               ->  Nested Loop  (cost=2.41..51.95 rows=4 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Hash Join  (cost=2.41..50.65 rows=19 width=10)
                                                           Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                                           ->  Nested Loop  (cost=0.85..49.03 rows=19 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.43..2.77 rows=19 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.42..2.43 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                                                 ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
                           ->  Index Scan using supplier_pkey on supplier  (cost=0.29..4.01 rows=1 width=144)
                                 Index Cond: (s_suppkey = partsupp.ps_suppkey)
 JIT:
   Functions: 40
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(39 rows)

query 2 run 4
SET
SET
SET
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=397492.99..397493.00 rows=1 width=192)
   ->  Sort  (cost=397492.99..397493.00 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=1052.70..397492.98 rows=1 width=192)
               Join Filter: (supplier.s_nationkey = nation.n_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=1052.70..397490.29 rows=1 width=170)
                     ->  Nested Loop  (cost=1052.70..397490.28 rows=1 width=170)
                           ->  Nested Loop  (cost=1052.41..397486.27 rows=1 width=34)
                                 ->  Gather  (cost=1000.00..50118.25 rows=6373 width=30)
                                       Workers Planned: 4
                                       ->  Parallel Seq Scan on part  (cost=0.00..48480.95 rows=1593 width=30)
                                             Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=52.41..54.50 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=51.96..51.97 rows=1 width=32)
                                               ->  Nested Loop  (cost=2.41..51.95 rows=4 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Hash Join  (cost=2.41..50.65 rows=19 width=10)
                                                           Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                                           ->  Nested Loop  (cost=0.85..49.03 rows=19 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.43..2.77 rows=19 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.42..2.43 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                                                 ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
                           ->  Index Scan using supplier_pkey on supplier  (cost=0.29..4.01 rows=1 width=144)
                                 Index Cond: (s_suppkey = partsupp.ps_suppkey)
 JIT:
   Functions: 40
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(39 rows)

query 2 run 5
SET
SET
SET
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=397492.99..397493.00 rows=1 width=192)
   ->  Sort  (cost=397492.99..397493.00 rows=1 width=192)
         Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
         ->  Nested Loop  (cost=1052.70..397492.98 rows=1 width=192)
               Join Filter: (supplier.s_nationkey = nation.n_nationkey)
               ->  Nested Loop  (cost=0.00..2.62 rows=5 width=30)
                     Join Filter: (nation.n_regionkey = region.r_regionkey)
                     ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                           Filter: (r_name = 'AMERICA'::bpchar)
                     ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
               ->  Materialize  (cost=1052.70..397490.29 rows=1 width=170)
                     ->  Nested Loop  (cost=1052.70..397490.28 rows=1 width=170)
                           ->  Nested Loop  (cost=1052.41..397486.27 rows=1 width=34)
                                 ->  Gather  (cost=1000.00..50118.25 rows=6373 width=30)
                                       Workers Planned: 4
                                       ->  Parallel Seq Scan on part  (cost=0.00..48480.95 rows=1593 width=30)
                                             Filter: (((p_type)::text ~~ '%NICKEL'::text) AND (p_size = 16))
                                 ->  Index Only Scan using q2_idx_2 on partsupp  (cost=52.41..54.50 rows=1 width=14)
                                       Index Cond: ((ps_partkey = part.p_partkey) AND (ps_supplycost = (SubPlan 1)))
                                       SubPlan 1
                                         ->  Aggregate  (cost=51.96..51.97 rows=1 width=32)
                                               ->  Nested Loop  (cost=2.41..51.95 rows=4 width=6)
                                                     Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                     ->  Seq Scan on region region_1  (cost=0.00..1.06 rows=1 width=4)
                                                           Filter: (r_name = 'AMERICA'::bpchar)
                                                     ->  Hash Join  (cost=2.41..50.65 rows=19 width=10)
                                                           Hash Cond: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                                           ->  Nested Loop  (cost=0.85..49.03 rows=19 width=10)
                                                                 ->  Index Only Scan using q2_idx_2 on partsupp partsupp_1  (cost=0.43..2.77 rows=19 width=10)
                                                                       Index Cond: (ps_partkey = part.p_partkey)
                                                                 ->  Index Only Scan using q2_idx_3 on supplier supplier_1  (cost=0.42..2.43 rows=1 width=8)
                                                                       Index Cond: (s_suppkey = partsupp_1.ps_suppkey)
                                                           ->  Hash  (cost=1.25..1.25 rows=25 width=8)
                                                                 ->  Seq Scan on nation nation_1  (cost=0.00..1.25 rows=25 width=8)
                           ->  Index Scan using supplier_pkey on supplier  (cost=0.29..4.01 rows=1 width=144)
                                 Index Cond: (s_suppkey = partsupp.ps_suppkey)
 JIT:
   Functions: 40
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(39 rows)

query 3 run 1
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2323381.10..2323381.12 rows=10 width=44)
   ->  Sort  (cost=2323381.10..2331228.97 rows=3139150 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=1793353.57..2255545.20 rows=3139150 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=1793353.57..2169218.57 rows=3139150 width=24)
                     Workers Planned: 4
                     ->  Sort  (cost=1792353.51..1794315.48 rows=784788 width=24)
                           Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Parallel Hash Join  (cost=359002.62..1704017.64 rows=784788 width=24)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Parallel Seq Scan on lineitem  (cost=0.00..1312624.40 rows=8114307 width=16)
                                       Filter: (l_shipdate > '1995-03-07'::date)
                                 ->  Parallel Hash  (cost=354469.01..354469.01 rows=362689 width=12)
                                       ->  Parallel Hash Join  (cost=41574.15..354469.01 rows=362689 width=12)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..308143.26 rows=1810128 width=16)
                                                   Filter: (o_orderdate < '1995-03-07'::date)
                                             ->  Parallel Hash  (cost=40634.86..40634.86 rows=75143 width=4)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..40634.86 rows=75143 width=4)
                                                         Filter: (c_mktsegment = 'BUILDING'::bpchar)
 JIT:
   Functions: 29
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(24 rows)

query 3 run 2
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2323381.10..2323381.12 rows=10 width=44)
   ->  Sort  (cost=2323381.10..2331228.97 rows=3139150 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=1793353.57..2255545.20 rows=3139150 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=1793353.57..2169218.57 rows=3139150 width=24)
                     Workers Planned: 4
                     ->  Sort  (cost=1792353.51..1794315.48 rows=784788 width=24)
                           Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Parallel Hash Join  (cost=359002.62..1704017.64 rows=784788 width=24)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Parallel Seq Scan on lineitem  (cost=0.00..1312624.40 rows=8114307 width=16)
                                       Filter: (l_shipdate > '1995-03-07'::date)
                                 ->  Parallel Hash  (cost=354469.01..354469.01 rows=362689 width=12)
                                       ->  Parallel Hash Join  (cost=41574.15..354469.01 rows=362689 width=12)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..308143.26 rows=1810128 width=16)
                                                   Filter: (o_orderdate < '1995-03-07'::date)
                                             ->  Parallel Hash  (cost=40634.86..40634.86 rows=75143 width=4)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..40634.86 rows=75143 width=4)
                                                         Filter: (c_mktsegment = 'BUILDING'::bpchar)
 JIT:
   Functions: 29
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(24 rows)

query 3 run 3
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2323381.10..2323381.12 rows=10 width=44)
   ->  Sort  (cost=2323381.10..2331228.97 rows=3139150 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=1793353.57..2255545.20 rows=3139150 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=1793353.57..2169218.57 rows=3139150 width=24)
                     Workers Planned: 4
                     ->  Sort  (cost=1792353.51..1794315.48 rows=784788 width=24)
                           Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Parallel Hash Join  (cost=359002.62..1704017.64 rows=784788 width=24)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Parallel Seq Scan on lineitem  (cost=0.00..1312624.40 rows=8114307 width=16)
                                       Filter: (l_shipdate > '1995-03-07'::date)
                                 ->  Parallel Hash  (cost=354469.01..354469.01 rows=362689 width=12)
                                       ->  Parallel Hash Join  (cost=41574.15..354469.01 rows=362689 width=12)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..308143.26 rows=1810128 width=16)
                                                   Filter: (o_orderdate < '1995-03-07'::date)
                                             ->  Parallel Hash  (cost=40634.86..40634.86 rows=75143 width=4)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..40634.86 rows=75143 width=4)
                                                         Filter: (c_mktsegment = 'BUILDING'::bpchar)
 JIT:
   Functions: 29
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(24 rows)

query 3 run 4
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2323381.10..2323381.12 rows=10 width=44)
   ->  Sort  (cost=2323381.10..2331228.97 rows=3139150 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=1793353.57..2255545.20 rows=3139150 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=1793353.57..2169218.57 rows=3139150 width=24)
                     Workers Planned: 4
                     ->  Sort  (cost=1792353.51..1794315.48 rows=784788 width=24)
                           Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Parallel Hash Join  (cost=359002.62..1704017.64 rows=784788 width=24)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Parallel Seq Scan on lineitem  (cost=0.00..1312624.40 rows=8114307 width=16)
                                       Filter: (l_shipdate > '1995-03-07'::date)
                                 ->  Parallel Hash  (cost=354469.01..354469.01 rows=362689 width=12)
                                       ->  Parallel Hash Join  (cost=41574.15..354469.01 rows=362689 width=12)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..308143.26 rows=1810128 width=16)
                                                   Filter: (o_orderdate < '1995-03-07'::date)
                                             ->  Parallel Hash  (cost=40634.86..40634.86 rows=75143 width=4)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..40634.86 rows=75143 width=4)
                                                         Filter: (c_mktsegment = 'BUILDING'::bpchar)
 JIT:
   Functions: 29
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(24 rows)

query 3 run 5
SET
SET
SET
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2323381.10..2323381.12 rows=10 width=44)
   ->  Sort  (cost=2323381.10..2331228.97 rows=3139150 width=44)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=1793353.57..2255545.20 rows=3139150 width=44)
               Group Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
               ->  Gather Merge  (cost=1793353.57..2169218.57 rows=3139150 width=24)
                     Workers Planned: 4
                     ->  Sort  (cost=1792353.51..1794315.48 rows=784788 width=24)
                           Sort Key: lineitem.l_orderkey, orders.o_orderdate, orders.o_shippriority
                           ->  Parallel Hash Join  (cost=359002.62..1704017.64 rows=784788 width=24)
                                 Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Parallel Seq Scan on lineitem  (cost=0.00..1312624.40 rows=8114307 width=16)
                                       Filter: (l_shipdate > '1995-03-07'::date)
                                 ->  Parallel Hash  (cost=354469.01..354469.01 rows=362689 width=12)
                                       ->  Parallel Hash Join  (cost=41574.15..354469.01 rows=362689 width=12)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Seq Scan on orders  (cost=0.00..308143.26 rows=1810128 width=16)
                                                   Filter: (o_orderdate < '1995-03-07'::date)
                                             ->  Parallel Hash  (cost=40634.86..40634.86 rows=75143 width=4)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..40634.86 rows=75143 width=4)
                                                         Filter: (c_mktsegment = 'BUILDING'::bpchar)
 JIT:
   Functions: 29
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(24 rows)

query 4 run 1
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=282927.92..537414.33 rows=1 width=24)
   ->  GroupAggregate  (cost=282927.92..1555359.98 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop Semi Join  (cost=282927.92..1552573.88 rows=557209 width=16)
               ->  Gather Merge  (cost=282927.48..349651.65 rows=557267 width=20)
                     Workers Planned: 4
                     ->  Sort  (cost=281927.43..282275.72 rows=139317 width=20)
                           Sort Key: orders.o_orderpriority
                           ->  Parallel Bitmap Heap Scan on orders  (cost=6666.42..270024.17 rows=139317 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6527.11 rows=557267 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
               ->  Index Only Scan using q4_idx_1 on lineitem  (cost=0.44..2.44 rows=1 width=4)
                     Index Cond: (l_orderkey = orders.o_orderkey)
 JIT:
   Functions: 10
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(17 rows)

query 4 run 2
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=282927.92..537414.33 rows=1 width=24)
   ->  GroupAggregate  (cost=282927.92..1555359.98 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop Semi Join  (cost=282927.92..1552573.88 rows=557209 width=16)
               ->  Gather Merge  (cost=282927.48..349651.65 rows=557267 width=20)
                     Workers Planned: 4
                     ->  Sort  (cost=281927.43..282275.72 rows=139317 width=20)
                           Sort Key: orders.o_orderpriority
                           ->  Parallel Bitmap Heap Scan on orders  (cost=6666.42..270024.17 rows=139317 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6527.11 rows=557267 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
               ->  Index Only Scan using q4_idx_1 on lineitem  (cost=0.44..2.44 rows=1 width=4)
                     Index Cond: (l_orderkey = orders.o_orderkey)
 JIT:
   Functions: 10
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(17 rows)

query 4 run 3
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=282927.92..537414.33 rows=1 width=24)
   ->  GroupAggregate  (cost=282927.92..1555359.98 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop Semi Join  (cost=282927.92..1552573.88 rows=557209 width=16)
               ->  Gather Merge  (cost=282927.48..349651.65 rows=557267 width=20)
                     Workers Planned: 4
                     ->  Sort  (cost=281927.43..282275.72 rows=139317 width=20)
                           Sort Key: orders.o_orderpriority
                           ->  Parallel Bitmap Heap Scan on orders  (cost=6666.42..270024.17 rows=139317 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6527.11 rows=557267 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
               ->  Index Only Scan using q4_idx_1 on lineitem  (cost=0.44..2.44 rows=1 width=4)
                     Index Cond: (l_orderkey = orders.o_orderkey)
 JIT:
   Functions: 10
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(17 rows)

query 4 run 4
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=282927.92..537414.33 rows=1 width=24)
   ->  GroupAggregate  (cost=282927.92..1555359.98 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop Semi Join  (cost=282927.92..1552573.88 rows=557209 width=16)
               ->  Gather Merge  (cost=282927.48..349651.65 rows=557267 width=20)
                     Workers Planned: 4
                     ->  Sort  (cost=281927.43..282275.72 rows=139317 width=20)
                           Sort Key: orders.o_orderpriority
                           ->  Parallel Bitmap Heap Scan on orders  (cost=6666.42..270024.17 rows=139317 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6527.11 rows=557267 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
               ->  Index Only Scan using q4_idx_1 on lineitem  (cost=0.44..2.44 rows=1 width=4)
                     Index Cond: (l_orderkey = orders.o_orderkey)
 JIT:
   Functions: 10
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(17 rows)

query 4 run 5
SET
SET
SET
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=282927.92..537414.33 rows=1 width=24)
   ->  GroupAggregate  (cost=282927.92..1555359.98 rows=5 width=24)
         Group Key: orders.o_orderpriority
         ->  Nested Loop Semi Join  (cost=282927.92..1552573.88 rows=557209 width=16)
               ->  Gather Merge  (cost=282927.48..349651.65 rows=557267 width=20)
                     Workers Planned: 4
                     ->  Sort  (cost=281927.43..282275.72 rows=139317 width=20)
                           Sort Key: orders.o_orderpriority
                           ->  Parallel Bitmap Heap Scan on orders  (cost=6666.42..270024.17 rows=139317 width=20)
                                 Recheck Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
                                 ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6527.11 rows=557267 width=0)
                                       Index Cond: ((o_orderdate >= '1993-12-01'::date) AND (o_orderdate < '1994-03-01'::date))
               ->  Index Only Scan using q4_idx_1 on lineitem  (cost=0.44..2.44 rows=1 width=4)
                     Index Cond: (l_orderkey = orders.o_orderkey)
 JIT:
   Functions: 10
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(17 rows)

query 5 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=651609.76..651609.76 rows=1 width=58)
   ->  Sort  (cost=651609.76..651609.82 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=651369.95..651609.64 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=651369.95..651608.57 rows=100 width=58)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=650369.89..650596.60 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=650369.89..650415.17 rows=18112 width=38)
                                 Sort Key: nation.n_name
                                 ->  Parallel Hash Join  (cost=73590.66..649088.95 rows=18112 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=69899.07..643018.12 rows=453187 width=50)
                                             ->  Parallel Hash Join  (cost=69898.50..342072.46 rows=113309 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=27104.71..296870.86 rows=566543 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..26538.17 rows=2266173 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Parallel Hash  (cost=41856.22..41856.22 rows=75006 width=38)
                                                         ->  Hash Join  (cost=2.51..41856.22 rows=75006 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39697.29 rows=375029 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.56..2.62 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
 JIT:
   Functions: 50
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(38 rows)

query 5 run 2
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=651609.76..651609.76 rows=1 width=58)
   ->  Sort  (cost=651609.76..651609.82 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=651369.95..651609.64 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=651369.95..651608.57 rows=100 width=58)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=650369.89..650596.60 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=650369.89..650415.17 rows=18112 width=38)
                                 Sort Key: nation.n_name
                                 ->  Parallel Hash Join  (cost=73590.66..649088.95 rows=18112 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=69899.07..643018.12 rows=453187 width=50)
                                             ->  Parallel Hash Join  (cost=69898.50..342072.46 rows=113309 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=27104.71..296870.86 rows=566543 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..26538.17 rows=2266173 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Parallel Hash  (cost=41856.22..41856.22 rows=75006 width=38)
                                                         ->  Hash Join  (cost=2.51..41856.22 rows=75006 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39697.29 rows=375029 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.56..2.62 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
 JIT:
   Functions: 50
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(38 rows)

query 5 run 3
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=651609.76..651609.76 rows=1 width=58)
   ->  Sort  (cost=651609.76..651609.82 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=651369.95..651609.64 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=651369.95..651608.57 rows=100 width=58)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=650369.89..650596.60 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=650369.89..650415.17 rows=18112 width=38)
                                 Sort Key: nation.n_name
                                 ->  Parallel Hash Join  (cost=73590.66..649088.95 rows=18112 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=69899.07..643018.12 rows=453187 width=50)
                                             ->  Parallel Hash Join  (cost=69898.50..342072.46 rows=113309 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=27104.71..296870.86 rows=566543 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..26538.17 rows=2266173 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Parallel Hash  (cost=41856.22..41856.22 rows=75006 width=38)
                                                         ->  Hash Join  (cost=2.51..41856.22 rows=75006 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39697.29 rows=375029 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.56..2.62 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
 JIT:
   Functions: 50
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(38 rows)

query 5 run 4
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=651609.76..651609.76 rows=1 width=58)
   ->  Sort  (cost=651609.76..651609.82 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=651369.95..651609.64 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=651369.95..651608.57 rows=100 width=58)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=650369.89..650596.60 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=650369.89..650415.17 rows=18112 width=38)
                                 Sort Key: nation.n_name
                                 ->  Parallel Hash Join  (cost=73590.66..649088.95 rows=18112 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=69899.07..643018.12 rows=453187 width=50)
                                             ->  Parallel Hash Join  (cost=69898.50..342072.46 rows=113309 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=27104.71..296870.86 rows=566543 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..26538.17 rows=2266173 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Parallel Hash  (cost=41856.22..41856.22 rows=75006 width=38)
                                                         ->  Hash Join  (cost=2.51..41856.22 rows=75006 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39697.29 rows=375029 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.56..2.62 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
 JIT:
   Functions: 50
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(38 rows)

query 5 run 5
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=651609.76..651609.76 rows=1 width=58)
   ->  Sort  (cost=651609.76..651609.82 rows=25 width=58)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=651369.95..651609.64 rows=25 width=58)
               Group Key: nation.n_name
               ->  Gather Merge  (cost=651369.95..651608.57 rows=100 width=58)
                     Workers Planned: 4
                     ->  Partial GroupAggregate  (cost=650369.89..650596.60 rows=25 width=58)
                           Group Key: nation.n_name
                           ->  Sort  (cost=650369.89..650415.17 rows=18112 width=38)
                                 Sort Key: nation.n_name
                                 ->  Parallel Hash Join  (cost=73590.66..649088.95 rows=18112 width=38)
                                       Hash Cond: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                       ->  Nested Loop  (cost=69899.07..643018.12 rows=453187 width=50)
                                             ->  Parallel Hash Join  (cost=69898.50..342072.46 rows=113309 width=38)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=27104.71..296870.86 rows=566543 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..26538.17 rows=2266173 width=0)
                                                               Index Cond: ((o_orderdate >= '1993-01-01'::date) AND (o_orderdate < '1994-01-01'::date))
                                                   ->  Parallel Hash  (cost=41856.22..41856.22 rows=75006 width=38)
                                                         ->  Hash Join  (cost=2.51..41856.22 rows=75006 width=38)
                                                               Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on customer  (cost=0.00..39697.29 rows=375029 width=8)
                                                               ->  Hash  (cost=2.45..2.45 rows=5 width=30)
                                                                     ->  Hash Join  (cost=1.07..2.45 rows=5 width=30)
                                                                           Hash Cond: (nation.n_regionkey = region.r_regionkey)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=34)
                                                                           ->  Hash  (cost=1.06..1.06 rows=1 width=4)
                                                                                 ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                                                                       Filter: (r_name = 'AMERICA'::bpchar)
                                             ->  Index Only Scan using q5_idx_1 on lineitem  (cost=0.56..2.62 rows=4 width=20)
                                                   Index Cond: (l_orderkey = orders.o_orderkey)
                                       ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                             ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
 JIT:
   Functions: 50
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(38 rows)

query 6 run 1
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1369603.58..1369603.59 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1369603.58..1369603.59 rows=1 width=32)
         ->  Gather  (cost=1369603.14..1369603.55 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1368603.14..1368603.15 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=230034.56..1367110.22 rows=298584 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..229735.98 rows=1194336 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
 JIT:
   Functions: 8
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(12 rows)

query 6 run 2
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1369603.58..1369603.59 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1369603.58..1369603.59 rows=1 width=32)
         ->  Gather  (cost=1369603.14..1369603.55 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1368603.14..1368603.15 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=230034.56..1367110.22 rows=298584 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..229735.98 rows=1194336 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
 JIT:
   Functions: 8
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(12 rows)

query 6 run 3
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1369603.58..1369603.59 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1369603.58..1369603.59 rows=1 width=32)
         ->  Gather  (cost=1369603.14..1369603.55 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1368603.14..1368603.15 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=230034.56..1367110.22 rows=298584 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..229735.98 rows=1194336 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
 JIT:
   Functions: 8
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(12 rows)

query 6 run 4
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1369603.58..1369603.59 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1369603.58..1369603.59 rows=1 width=32)
         ->  Gather  (cost=1369603.14..1369603.55 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1368603.14..1368603.15 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=230034.56..1367110.22 rows=298584 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..229735.98 rows=1194336 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
 JIT:
   Functions: 8
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(12 rows)

query 6 run 5
SET
SET
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1369603.58..1369603.59 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1369603.58..1369603.59 rows=1 width=32)
         ->  Gather  (cost=1369603.14..1369603.55 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1368603.14..1368603.15 rows=1 width=32)
                     ->  Parallel Bitmap Heap Scan on lineitem  (cost=230034.56..1367110.22 rows=298584 width=12)
                           Recheck Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
                           ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..229735.98 rows=1194336 width=0)
                                 Index Cond: ((l_shipdate >= '1993-01-01'::date) AND (l_shipdate < '1994-01-01 00:00:00'::timestamp without time zone) AND (l_discount >= 0.06) AND (l_discount <= 0.08) AND (l_quantity < '25'::numeric))
 JIT:
   Functions: 8
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(12 rows)

query 7 run 1
SET
SET
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1420602.20..1421651.71 rows=1 width=116)
   ->  GroupAggregate  (cost=1420602.20..11957624.56 rows=10040 width=116)
         Group Key: n1.n_name, n2.n_name, EXTRACT(year FROM lineitem.l_shipdate)
         ->  Nested Loop  (cost=1420602.20..11956566.03 rows=60529 width=96)
               Join Filter: (customer.c_nationkey = n2.n_nationkey)
               ->  Nested Loop  (cost=1420601.78..8271732.25 rows=1513223 width=76)
                     ->  Gather Merge  (cost=1420601.34..1601786.55 rows=1513223 width=76)
                           Workers Planned: 4
                           ->  Sort  (cost=1419601.28..1420547.05 rows=378306 width=76)
                                 Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                                 ->  Parallel Hash Join  (cost=3140.96..1372545.26 rows=378306 width=76)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..1350120.68 rows=4548878 width=24)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                       ->  Parallel Hash  (cost=3079.76..3079.76 rows=4896 width=60)
                                             ->  Hash Join  (cost=2.87..3079.76 rows=4896 width=60)
                                                   Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                                   ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                                   ->  Hash  (cost=2.84..2.84 rows=2 width=60)
                                                         ->  Nested Loop  (cost=0.00..2.84 rows=2 width=60)
                                                               Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                                               ->  Materialize  (cost=0.00..1.39 rows=2 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                           Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                     ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.41 rows=1 width=8)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
               ->  Index Only Scan using q10_idx_1 on customer  (cost=0.43..2.42 rows=1 width=8)
                     Index Cond: (c_custkey = orders.o_custkey)
 JIT:
   Functions: 44
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(33 rows)

query 7 run 2
SET
SET
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1420602.20..1421651.71 rows=1 width=116)
   ->  GroupAggregate  (cost=1420602.20..11957624.56 rows=10040 width=116)
         Group Key: n1.n_name, n2.n_name, EXTRACT(year FROM lineitem.l_shipdate)
         ->  Nested Loop  (cost=1420602.20..11956566.03 rows=60529 width=96)
               Join Filter: (customer.c_nationkey = n2.n_nationkey)
               ->  Nested Loop  (cost=1420601.78..8271732.25 rows=1513223 width=76)
                     ->  Gather Merge  (cost=1420601.34..1601786.55 rows=1513223 width=76)
                           Workers Planned: 4
                           ->  Sort  (cost=1419601.28..1420547.05 rows=378306 width=76)
                                 Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                                 ->  Parallel Hash Join  (cost=3140.96..1372545.26 rows=378306 width=76)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..1350120.68 rows=4548878 width=24)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                       ->  Parallel Hash  (cost=3079.76..3079.76 rows=4896 width=60)
                                             ->  Hash Join  (cost=2.87..3079.76 rows=4896 width=60)
                                                   Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                                   ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                                   ->  Hash  (cost=2.84..2.84 rows=2 width=60)
                                                         ->  Nested Loop  (cost=0.00..2.84 rows=2 width=60)
                                                               Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                                               ->  Materialize  (cost=0.00..1.39 rows=2 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                           Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                     ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.41 rows=1 width=8)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
               ->  Index Only Scan using q10_idx_1 on customer  (cost=0.43..2.42 rows=1 width=8)
                     Index Cond: (c_custkey = orders.o_custkey)
 JIT:
   Functions: 44
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(33 rows)

query 7 run 3
SET
SET
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1420602.20..1421651.71 rows=1 width=116)
   ->  GroupAggregate  (cost=1420602.20..11957624.56 rows=10040 width=116)
         Group Key: n1.n_name, n2.n_name, EXTRACT(year FROM lineitem.l_shipdate)
         ->  Nested Loop  (cost=1420602.20..11956566.03 rows=60529 width=96)
               Join Filter: (customer.c_nationkey = n2.n_nationkey)
               ->  Nested Loop  (cost=1420601.78..8271732.25 rows=1513223 width=76)
                     ->  Gather Merge  (cost=1420601.34..1601786.55 rows=1513223 width=76)
                           Workers Planned: 4
                           ->  Sort  (cost=1419601.28..1420547.05 rows=378306 width=76)
                                 Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                                 ->  Parallel Hash Join  (cost=3140.96..1372545.26 rows=378306 width=76)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..1350120.68 rows=4548878 width=24)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                       ->  Parallel Hash  (cost=3079.76..3079.76 rows=4896 width=60)
                                             ->  Hash Join  (cost=2.87..3079.76 rows=4896 width=60)
                                                   Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                                   ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                                   ->  Hash  (cost=2.84..2.84 rows=2 width=60)
                                                         ->  Nested Loop  (cost=0.00..2.84 rows=2 width=60)
                                                               Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                                               ->  Materialize  (cost=0.00..1.39 rows=2 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                           Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                     ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.41 rows=1 width=8)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
               ->  Index Only Scan using q10_idx_1 on customer  (cost=0.43..2.42 rows=1 width=8)
                     Index Cond: (c_custkey = orders.o_custkey)
 JIT:
   Functions: 44
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(33 rows)

query 7 run 4
SET
SET
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1420602.20..1421651.71 rows=1 width=116)
   ->  GroupAggregate  (cost=1420602.20..11957624.56 rows=10040 width=116)
         Group Key: n1.n_name, n2.n_name, EXTRACT(year FROM lineitem.l_shipdate)
         ->  Nested Loop  (cost=1420602.20..11956566.03 rows=60529 width=96)
               Join Filter: (customer.c_nationkey = n2.n_nationkey)
               ->  Nested Loop  (cost=1420601.78..8271732.25 rows=1513223 width=76)
                     ->  Gather Merge  (cost=1420601.34..1601786.55 rows=1513223 width=76)
                           Workers Planned: 4
                           ->  Sort  (cost=1419601.28..1420547.05 rows=378306 width=76)
                                 Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                                 ->  Parallel Hash Join  (cost=3140.96..1372545.26 rows=378306 width=76)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..1350120.68 rows=4548878 width=24)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                       ->  Parallel Hash  (cost=3079.76..3079.76 rows=4896 width=60)
                                             ->  Hash Join  (cost=2.87..3079.76 rows=4896 width=60)
                                                   Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                                   ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                                   ->  Hash  (cost=2.84..2.84 rows=2 width=60)
                                                         ->  Nested Loop  (cost=0.00..2.84 rows=2 width=60)
                                                               Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                                               ->  Materialize  (cost=0.00..1.39 rows=2 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                           Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                     ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.41 rows=1 width=8)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
               ->  Index Only Scan using q10_idx_1 on customer  (cost=0.43..2.42 rows=1 width=8)
                     Index Cond: (c_custkey = orders.o_custkey)
 JIT:
   Functions: 44
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(33 rows)

query 7 run 5
SET
SET
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1420602.20..1421651.71 rows=1 width=116)
   ->  GroupAggregate  (cost=1420602.20..11957624.56 rows=10040 width=116)
         Group Key: n1.n_name, n2.n_name, EXTRACT(year FROM lineitem.l_shipdate)
         ->  Nested Loop  (cost=1420602.20..11956566.03 rows=60529 width=96)
               Join Filter: (customer.c_nationkey = n2.n_nationkey)
               ->  Nested Loop  (cost=1420601.78..8271732.25 rows=1513223 width=76)
                     ->  Gather Merge  (cost=1420601.34..1601786.55 rows=1513223 width=76)
                           Workers Planned: 4
                           ->  Sort  (cost=1419601.28..1420547.05 rows=378306 width=76)
                                 Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
                                 ->  Parallel Hash Join  (cost=3140.96..1372545.26 rows=378306 width=76)
                                       Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                       ->  Parallel Seq Scan on lineitem  (cost=0.00..1350120.68 rows=4548878 width=24)
                                             Filter: ((l_shipdate >= '1995-01-01'::date) AND (l_shipdate <= '1996-12-31'::date))
                                       ->  Parallel Hash  (cost=3079.76..3079.76 rows=4896 width=60)
                                             ->  Hash Join  (cost=2.87..3079.76 rows=4896 width=60)
                                                   Hash Cond: (supplier.s_nationkey = n1.n_nationkey)
                                                   ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                                   ->  Hash  (cost=2.84..2.84 rows=2 width=60)
                                                         ->  Nested Loop  (cost=0.00..2.84 rows=2 width=60)
                                                               Join Filter: (((n1.n_name = 'PERU'::bpchar) AND (n2.n_name = 'MOROCCO'::bpchar)) OR ((n1.n_name = 'MOROCCO'::bpchar) AND (n2.n_name = 'PERU'::bpchar)))
                                                               ->  Seq Scan on nation n1  (cost=0.00..1.38 rows=2 width=30)
                                                                     Filter: ((n_name = 'PERU'::bpchar) OR (n_name = 'MOROCCO'::bpchar))
                                                               ->  Materialize  (cost=0.00..1.39 rows=2 width=30)
                                                                     ->  Seq Scan on nation n2  (cost=0.00..1.38 rows=2 width=30)
                                                                           Filter: ((n_name = 'MOROCCO'::bpchar) OR (n_name = 'PERU'::bpchar))
                     ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.41 rows=1 width=8)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
               ->  Index Only Scan using q10_idx_1 on customer  (cost=0.43..2.42 rows=1 width=8)
                     Index Cond: (c_custkey = orders.o_custkey)
 JIT:
   Functions: 44
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(33 rows)

query 8 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=388440.12..388570.36 rows=1 width=64)
   ->  GroupAggregate  (cost=388440.12..701800.62 rows=2406 width=64)
         Group Key: EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=388440.12..701269.02 rows=24174 width=70)
               ->  Nested Loop  (cost=388439.97..700588.54 rows=24174 width=20)
                     Join Filter: (n1.n_regionkey = region.r_regionkey)
                     ->  Nested Loop  (cost=388439.97..698774.45 rows=120868 width=24)
                           ->  Nested Loop  (cost=388439.82..695790.61 rows=120868 width=24)
                                 ->  Gather Merge  (cost=388439.39..402911.48 rows=120868 width=24)
                                       Workers Planned: 4
                                       ->  Sort  (cost=387439.34..387514.88 rows=30217 width=24)
                                             Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                                             ->  Parallel Hash Join  (cost=63259.73..385190.73 rows=30217 width=24)
                                                   Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Hash Join  (cost=59715.19..381566.81 rows=30242 width=24)
                                                         Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                                         ->  Parallel Seq Scan on orders  (cost=0.00..317518.32 rows=1135387 width=12)
                                                               Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                         ->  Parallel Hash  (cost=58466.65..58466.65 rows=99883 width=20)
                                                               ->  Nested Loop  (cost=0.56..58466.65 rows=99883 width=20)
                                                                     ->  Parallel Seq Scan on part  (cost=0.00..47230.96 rows=3330 width=4)
                                                                           Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                                     ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.56..3.07 rows=30 width=24)
                                                                           Index Cond: (l_partkey = part.p_partkey)
                                                   ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                                         ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                 ->  Index Only Scan using q10_idx_1 on customer  (cost=0.43..2.42 rows=1 width=8)
                                       Index Cond: (c_custkey = orders.o_custkey)
                           ->  Memoize  (cost=0.15..1.17 rows=1 width=8)
                                 Cache Key: customer.c_nationkey
                                 Cache Mode: logical
                                 ->  Index Scan using nation_pkey on nation n1  (cost=0.14..1.16 rows=1 width=8)
                                       Index Cond: (n_nationkey = customer.c_nationkey)
                     ->  Materialize  (cost=0.00..1.07 rows=1 width=4)
                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                 Filter: (r_name = 'AMERICA'::bpchar)
               ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                     Cache Key: supplier.s_nationkey
                     Cache Mode: logical
                     ->  Index Scan using nation_pkey on nation n2  (cost=0.14..1.16 rows=1 width=30)
                           Index Cond: (n_nationkey = supplier.s_nationkey)
 JIT:
   Functions: 55
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(44 rows)

query 8 run 2
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=388440.12..388570.36 rows=1 width=64)
   ->  GroupAggregate  (cost=388440.12..701800.62 rows=2406 width=64)
         Group Key: EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=388440.12..701269.02 rows=24174 width=70)
               ->  Nested Loop  (cost=388439.97..700588.54 rows=24174 width=20)
                     Join Filter: (n1.n_regionkey = region.r_regionkey)
                     ->  Nested Loop  (cost=388439.97..698774.45 rows=120868 width=24)
                           ->  Nested Loop  (cost=388439.82..695790.61 rows=120868 width=24)
                                 ->  Gather Merge  (cost=388439.39..402911.48 rows=120868 width=24)
                                       Workers Planned: 4
                                       ->  Sort  (cost=387439.34..387514.88 rows=30217 width=24)
                                             Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                                             ->  Parallel Hash Join  (cost=63259.73..385190.73 rows=30217 width=24)
                                                   Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Hash Join  (cost=59715.19..381566.81 rows=30242 width=24)
                                                         Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                                         ->  Parallel Seq Scan on orders  (cost=0.00..317518.32 rows=1135387 width=12)
                                                               Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                         ->  Parallel Hash  (cost=58466.65..58466.65 rows=99883 width=20)
                                                               ->  Nested Loop  (cost=0.56..58466.65 rows=99883 width=20)
                                                                     ->  Parallel Seq Scan on part  (cost=0.00..47230.96 rows=3330 width=4)
                                                                           Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                                     ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.56..3.07 rows=30 width=24)
                                                                           Index Cond: (l_partkey = part.p_partkey)
                                                   ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                                         ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                 ->  Index Only Scan using q10_idx_1 on customer  (cost=0.43..2.42 rows=1 width=8)
                                       Index Cond: (c_custkey = orders.o_custkey)
                           ->  Memoize  (cost=0.15..1.17 rows=1 width=8)
                                 Cache Key: customer.c_nationkey
                                 Cache Mode: logical
                                 ->  Index Scan using nation_pkey on nation n1  (cost=0.14..1.16 rows=1 width=8)
                                       Index Cond: (n_nationkey = customer.c_nationkey)
                     ->  Materialize  (cost=0.00..1.07 rows=1 width=4)
                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                 Filter: (r_name = 'AMERICA'::bpchar)
               ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                     Cache Key: supplier.s_nationkey
                     Cache Mode: logical
                     ->  Index Scan using nation_pkey on nation n2  (cost=0.14..1.16 rows=1 width=30)
                           Index Cond: (n_nationkey = supplier.s_nationkey)
 JIT:
   Functions: 55
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(44 rows)

query 8 run 3
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=388440.12..388570.36 rows=1 width=64)
   ->  GroupAggregate  (cost=388440.12..701800.62 rows=2406 width=64)
         Group Key: EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=388440.12..701269.02 rows=24174 width=70)
               ->  Nested Loop  (cost=388439.97..700588.54 rows=24174 width=20)
                     Join Filter: (n1.n_regionkey = region.r_regionkey)
                     ->  Nested Loop  (cost=388439.97..698774.45 rows=120868 width=24)
                           ->  Nested Loop  (cost=388439.82..695790.61 rows=120868 width=24)
                                 ->  Gather Merge  (cost=388439.39..402911.48 rows=120868 width=24)
                                       Workers Planned: 4
                                       ->  Sort  (cost=387439.34..387514.88 rows=30217 width=24)
                                             Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                                             ->  Parallel Hash Join  (cost=63259.73..385190.73 rows=30217 width=24)
                                                   Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Hash Join  (cost=59715.19..381566.81 rows=30242 width=24)
                                                         Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                                         ->  Parallel Seq Scan on orders  (cost=0.00..317518.32 rows=1135387 width=12)
                                                               Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                         ->  Parallel Hash  (cost=58466.65..58466.65 rows=99883 width=20)
                                                               ->  Nested Loop  (cost=0.56..58466.65 rows=99883 width=20)
                                                                     ->  Parallel Seq Scan on part  (cost=0.00..47230.96 rows=3330 width=4)
                                                                           Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                                     ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.56..3.07 rows=30 width=24)
                                                                           Index Cond: (l_partkey = part.p_partkey)
                                                   ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                                         ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                 ->  Index Only Scan using q10_idx_1 on customer  (cost=0.43..2.42 rows=1 width=8)
                                       Index Cond: (c_custkey = orders.o_custkey)
                           ->  Memoize  (cost=0.15..1.17 rows=1 width=8)
                                 Cache Key: customer.c_nationkey
                                 Cache Mode: logical
                                 ->  Index Scan using nation_pkey on nation n1  (cost=0.14..1.16 rows=1 width=8)
                                       Index Cond: (n_nationkey = customer.c_nationkey)
                     ->  Materialize  (cost=0.00..1.07 rows=1 width=4)
                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                 Filter: (r_name = 'AMERICA'::bpchar)
               ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                     Cache Key: supplier.s_nationkey
                     Cache Mode: logical
                     ->  Index Scan using nation_pkey on nation n2  (cost=0.14..1.16 rows=1 width=30)
                           Index Cond: (n_nationkey = supplier.s_nationkey)
 JIT:
   Functions: 55
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(44 rows)

query 8 run 4
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=388440.12..388570.36 rows=1 width=64)
   ->  GroupAggregate  (cost=388440.12..701800.62 rows=2406 width=64)
         Group Key: EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=388440.12..701269.02 rows=24174 width=70)
               ->  Nested Loop  (cost=388439.97..700588.54 rows=24174 width=20)
                     Join Filter: (n1.n_regionkey = region.r_regionkey)
                     ->  Nested Loop  (cost=388439.97..698774.45 rows=120868 width=24)
                           ->  Nested Loop  (cost=388439.82..695790.61 rows=120868 width=24)
                                 ->  Gather Merge  (cost=388439.39..402911.48 rows=120868 width=24)
                                       Workers Planned: 4
                                       ->  Sort  (cost=387439.34..387514.88 rows=30217 width=24)
                                             Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                                             ->  Parallel Hash Join  (cost=63259.73..385190.73 rows=30217 width=24)
                                                   Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Hash Join  (cost=59715.19..381566.81 rows=30242 width=24)
                                                         Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                                         ->  Parallel Seq Scan on orders  (cost=0.00..317518.32 rows=1135387 width=12)
                                                               Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                         ->  Parallel Hash  (cost=58466.65..58466.65 rows=99883 width=20)
                                                               ->  Nested Loop  (cost=0.56..58466.65 rows=99883 width=20)
                                                                     ->  Parallel Seq Scan on part  (cost=0.00..47230.96 rows=3330 width=4)
                                                                           Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                                     ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.56..3.07 rows=30 width=24)
                                                                           Index Cond: (l_partkey = part.p_partkey)
                                                   ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                                         ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                 ->  Index Only Scan using q10_idx_1 on customer  (cost=0.43..2.42 rows=1 width=8)
                                       Index Cond: (c_custkey = orders.o_custkey)
                           ->  Memoize  (cost=0.15..1.17 rows=1 width=8)
                                 Cache Key: customer.c_nationkey
                                 Cache Mode: logical
                                 ->  Index Scan using nation_pkey on nation n1  (cost=0.14..1.16 rows=1 width=8)
                                       Index Cond: (n_nationkey = customer.c_nationkey)
                     ->  Materialize  (cost=0.00..1.07 rows=1 width=4)
                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                 Filter: (r_name = 'AMERICA'::bpchar)
               ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                     Cache Key: supplier.s_nationkey
                     Cache Mode: logical
                     ->  Index Scan using nation_pkey on nation n2  (cost=0.14..1.16 rows=1 width=30)
                           Index Cond: (n_nationkey = supplier.s_nationkey)
 JIT:
   Functions: 55
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(44 rows)

query 8 run 5
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=388440.12..388570.36 rows=1 width=64)
   ->  GroupAggregate  (cost=388440.12..701800.62 rows=2406 width=64)
         Group Key: EXTRACT(year FROM orders.o_orderdate)
         ->  Nested Loop  (cost=388440.12..701269.02 rows=24174 width=70)
               ->  Nested Loop  (cost=388439.97..700588.54 rows=24174 width=20)
                     Join Filter: (n1.n_regionkey = region.r_regionkey)
                     ->  Nested Loop  (cost=388439.97..698774.45 rows=120868 width=24)
                           ->  Nested Loop  (cost=388439.82..695790.61 rows=120868 width=24)
                                 ->  Gather Merge  (cost=388439.39..402911.48 rows=120868 width=24)
                                       Workers Planned: 4
                                       ->  Sort  (cost=387439.34..387514.88 rows=30217 width=24)
                                             Sort Key: (EXTRACT(year FROM orders.o_orderdate))
                                             ->  Parallel Hash Join  (cost=63259.73..385190.73 rows=30217 width=24)
                                                   Hash Cond: (lineitem.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Hash Join  (cost=59715.19..381566.81 rows=30242 width=24)
                                                         Hash Cond: (orders.o_orderkey = lineitem.l_orderkey)
                                                         ->  Parallel Seq Scan on orders  (cost=0.00..317518.32 rows=1135387 width=12)
                                                               Filter: ((o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                                         ->  Parallel Hash  (cost=58466.65..58466.65 rows=99883 width=20)
                                                               ->  Nested Loop  (cost=0.56..58466.65 rows=99883 width=20)
                                                                     ->  Parallel Seq Scan on part  (cost=0.00..47230.96 rows=3330 width=4)
                                                                           Filter: ((p_type)::text = 'LARGE POLISHED BRASS'::text)
                                                                     ->  Index Only Scan using q8_idx_1 on lineitem  (cost=0.56..3.07 rows=30 width=24)
                                                                           Index Cond: (l_partkey = part.p_partkey)
                                                   ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                                         ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                 ->  Index Only Scan using q10_idx_1 on customer  (cost=0.43..2.42 rows=1 width=8)
                                       Index Cond: (c_custkey = orders.o_custkey)
                           ->  Memoize  (cost=0.15..1.17 rows=1 width=8)
                                 Cache Key: customer.c_nationkey
                                 Cache Mode: logical
                                 ->  Index Scan using nation_pkey on nation n1  (cost=0.14..1.16 rows=1 width=8)
                                       Index Cond: (n_nationkey = customer.c_nationkey)
                     ->  Materialize  (cost=0.00..1.07 rows=1 width=4)
                           ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4)
                                 Filter: (r_name = 'AMERICA'::bpchar)
               ->  Memoize  (cost=0.15..1.17 rows=1 width=30)
                     Cache Key: supplier.s_nationkey
                     Cache Mode: logical
                     ->  Index Scan using nation_pkey on nation n2  (cost=0.14..1.16 rows=1 width=30)
                           Index Cond: (n_nationkey = supplier.s_nationkey)
 JIT:
   Functions: 55
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(44 rows)

query 9 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=451485.74..451627.02 rows=1 width=90)
   ->  GroupAggregate  (cost=451485.74..8948943.31 rows=60150 width=90)
         Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
         ->  Incremental Sort  (cost=451485.74..8916251.60 rows=1816541 width=81)
               Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
               Presorted Key: nation.n_name
               ->  Nested Loop  (cost=99733.30..8746868.58 rows=1816541 width=81)
                     ->  Nested Loop  (cost=99732.87..726560.96 rows=1816541 width=53)
                           Join Filter: ((supplier.s_suppkey = lineitem.l_suppkey) AND (partsupp.ps_partkey = lineitem.l_partkey))
                           ->  Gather Merge  (cost=99732.29..128757.53 rows=242413 width=48)
                                 Workers Planned: 4
                                 ->  Sort  (cost=98732.24..98883.74 rows=60603 width=48)
                                       Sort Key: nation.n_name
                                       ->  Hash Join  (cost=3546.96..93918.21 rows=60603 width=48)
                                             Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                             ->  Parallel Hash Join  (cost=3545.40..93730.59 rows=60603 width=26)
                                                   Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                                   ->  Nested Loop  (cost=0.86..90026.96 rows=60603 width=18)
                                                         ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.43..45556.31 rows=15152 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.43..2.74 rows=19 width=14)
                                                               Index Cond: (ps_partkey = part.p_partkey)
                                                   ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                                         ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                             ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                                   ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
                           ->  Memoize  (cost=0.57..3.08 rows=30 width=29)
                                 Cache Key: part.p_partkey
                                 Cache Mode: logical
                                 ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..3.07 rows=30 width=29)
                                       Index Cond: (l_partkey = part.p_partkey)
                     ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.41 rows=1 width=8)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
 JIT:
   Functions: 38
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(36 rows)

query 9 run 2
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=451485.74..451627.02 rows=1 width=90)
   ->  GroupAggregate  (cost=451485.74..8948943.31 rows=60150 width=90)
         Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
         ->  Incremental Sort  (cost=451485.74..8916251.60 rows=1816541 width=81)
               Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
               Presorted Key: nation.n_name
               ->  Nested Loop  (cost=99733.30..8746868.58 rows=1816541 width=81)
                     ->  Nested Loop  (cost=99732.87..726560.96 rows=1816541 width=53)
                           Join Filter: ((supplier.s_suppkey = lineitem.l_suppkey) AND (partsupp.ps_partkey = lineitem.l_partkey))
                           ->  Gather Merge  (cost=99732.29..128757.53 rows=242413 width=48)
                                 Workers Planned: 4
                                 ->  Sort  (cost=98732.24..98883.74 rows=60603 width=48)
                                       Sort Key: nation.n_name
                                       ->  Hash Join  (cost=3546.96..93918.21 rows=60603 width=48)
                                             Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                             ->  Parallel Hash Join  (cost=3545.40..93730.59 rows=60603 width=26)
                                                   Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                                   ->  Nested Loop  (cost=0.86..90026.96 rows=60603 width=18)
                                                         ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.43..45556.31 rows=15152 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.43..2.74 rows=19 width=14)
                                                               Index Cond: (ps_partkey = part.p_partkey)
                                                   ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                                         ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                             ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                                   ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
                           ->  Memoize  (cost=0.57..3.08 rows=30 width=29)
                                 Cache Key: part.p_partkey
                                 Cache Mode: logical
                                 ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..3.07 rows=30 width=29)
                                       Index Cond: (l_partkey = part.p_partkey)
                     ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.41 rows=1 width=8)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
 JIT:
   Functions: 38
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(36 rows)

query 9 run 3
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=451485.74..451627.02 rows=1 width=90)
   ->  GroupAggregate  (cost=451485.74..8948943.31 rows=60150 width=90)
         Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
         ->  Incremental Sort  (cost=451485.74..8916251.60 rows=1816541 width=81)
               Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
               Presorted Key: nation.n_name
               ->  Nested Loop  (cost=99733.30..8746868.58 rows=1816541 width=81)
                     ->  Nested Loop  (cost=99732.87..726560.96 rows=1816541 width=53)
                           Join Filter: ((supplier.s_suppkey = lineitem.l_suppkey) AND (partsupp.ps_partkey = lineitem.l_partkey))
                           ->  Gather Merge  (cost=99732.29..128757.53 rows=242413 width=48)
                                 Workers Planned: 4
                                 ->  Sort  (cost=98732.24..98883.74 rows=60603 width=48)
                                       Sort Key: nation.n_name
                                       ->  Hash Join  (cost=3546.96..93918.21 rows=60603 width=48)
                                             Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                             ->  Parallel Hash Join  (cost=3545.40..93730.59 rows=60603 width=26)
                                                   Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                                   ->  Nested Loop  (cost=0.86..90026.96 rows=60603 width=18)
                                                         ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.43..45556.31 rows=15152 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.43..2.74 rows=19 width=14)
                                                               Index Cond: (ps_partkey = part.p_partkey)
                                                   ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                                         ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                             ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                                   ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
                           ->  Memoize  (cost=0.57..3.08 rows=30 width=29)
                                 Cache Key: part.p_partkey
                                 Cache Mode: logical
                                 ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..3.07 rows=30 width=29)
                                       Index Cond: (l_partkey = part.p_partkey)
                     ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.41 rows=1 width=8)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
 JIT:
   Functions: 38
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(36 rows)

query 9 run 4
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=451485.74..451627.02 rows=1 width=90)
   ->  GroupAggregate  (cost=451485.74..8948943.31 rows=60150 width=90)
         Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
         ->  Incremental Sort  (cost=451485.74..8916251.60 rows=1816541 width=81)
               Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
               Presorted Key: nation.n_name
               ->  Nested Loop  (cost=99733.30..8746868.58 rows=1816541 width=81)
                     ->  Nested Loop  (cost=99732.87..726560.96 rows=1816541 width=53)
                           Join Filter: ((supplier.s_suppkey = lineitem.l_suppkey) AND (partsupp.ps_partkey = lineitem.l_partkey))
                           ->  Gather Merge  (cost=99732.29..128757.53 rows=242413 width=48)
                                 Workers Planned: 4
                                 ->  Sort  (cost=98732.24..98883.74 rows=60603 width=48)
                                       Sort Key: nation.n_name
                                       ->  Hash Join  (cost=3546.96..93918.21 rows=60603 width=48)
                                             Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                             ->  Parallel Hash Join  (cost=3545.40..93730.59 rows=60603 width=26)
                                                   Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                                   ->  Nested Loop  (cost=0.86..90026.96 rows=60603 width=18)
                                                         ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.43..45556.31 rows=15152 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.43..2.74 rows=19 width=14)
                                                               Index Cond: (ps_partkey = part.p_partkey)
                                                   ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                                         ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                             ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                                   ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
                           ->  Memoize  (cost=0.57..3.08 rows=30 width=29)
                                 Cache Key: part.p_partkey
                                 Cache Mode: logical
                                 ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..3.07 rows=30 width=29)
                                       Index Cond: (l_partkey = part.p_partkey)
                     ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.41 rows=1 width=8)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
 JIT:
   Functions: 38
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(36 rows)

query 9 run 5
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=451485.74..451627.02 rows=1 width=90)
   ->  GroupAggregate  (cost=451485.74..8948943.31 rows=60150 width=90)
         Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
         ->  Incremental Sort  (cost=451485.74..8916251.60 rows=1816541 width=81)
               Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
               Presorted Key: nation.n_name
               ->  Nested Loop  (cost=99733.30..8746868.58 rows=1816541 width=81)
                     ->  Nested Loop  (cost=99732.87..726560.96 rows=1816541 width=53)
                           Join Filter: ((supplier.s_suppkey = lineitem.l_suppkey) AND (partsupp.ps_partkey = lineitem.l_partkey))
                           ->  Gather Merge  (cost=99732.29..128757.53 rows=242413 width=48)
                                 Workers Planned: 4
                                 ->  Sort  (cost=98732.24..98883.74 rows=60603 width=48)
                                       Sort Key: nation.n_name
                                       ->  Hash Join  (cost=3546.96..93918.21 rows=60603 width=48)
                                             Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                             ->  Parallel Hash Join  (cost=3545.40..93730.59 rows=60603 width=26)
                                                   Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                                   ->  Nested Loop  (cost=0.86..90026.96 rows=60603 width=18)
                                                         ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.43..45556.31 rows=15152 width=4)
                                                               Filter: ((p_name)::text ~~ '%navy%'::text)
                                                         ->  Index Only Scan using q2_idx_2 on partsupp  (cost=0.43..2.74 rows=19 width=14)
                                                               Index Cond: (ps_partkey = part.p_partkey)
                                                   ->  Parallel Hash  (cost=2809.24..2809.24 rows=58824 width=8)
                                                         ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=8)
                                             ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                                   ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
                           ->  Memoize  (cost=0.57..3.08 rows=30 width=29)
                                 Cache Key: part.p_partkey
                                 Cache Mode: logical
                                 ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..3.07 rows=30 width=29)
                                       Index Cond: (l_partkey = part.p_partkey)
                     ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.41 rows=1 width=8)
                           Index Cond: (o_orderkey = lineitem.l_orderkey)
 JIT:
   Functions: 38
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(36 rows)

query 10 run 1
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=791669.71..791669.76 rows=20 width=201)
   ->  Sort  (cost=791669.71..793072.76 rows=561221 width=201)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=695507.70..776735.82 rows=561221 width=201)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=695507.70..762705.30 rows=561221 width=181)
                     Workers Planned: 4
                     ->  Sort  (cost=694507.64..694858.41 rows=140305 width=181)
                           Sort Key: customer.c_custkey, nation.n_name
                           ->  Hash Join  (cost=639221.32..682512.82 rows=140305 width=181)
                                 Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                 ->  Parallel Hash Join  (cost=639219.76..682080.53 rows=140305 width=159)
                                       Hash Cond: (customer.c_custkey = orders.o_custkey)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..39697.29 rows=375029 width=147)
                                       ->  Parallel Hash  (cost=637465.95..637465.95 rows=140305 width=16)
                                             ->  Nested Loop  (cost=6822.08..637465.95 rows=140305 width=16)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=6821.52..270227.96 rows=142563 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6678.96 rows=570252 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                   ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.56..2.57 rows=1 width=16)
                                                         Index Cond: ((l_orderkey = orders.o_orderkey) AND (l_returnflag = 'R'::bpchar))
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
 JIT:
   Functions: 26
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(27 rows)

query 10 run 2
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=791669.71..791669.76 rows=20 width=201)
   ->  Sort  (cost=791669.71..793072.76 rows=561221 width=201)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=695507.70..776735.82 rows=561221 width=201)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=695507.70..762705.30 rows=561221 width=181)
                     Workers Planned: 4
                     ->  Sort  (cost=694507.64..694858.41 rows=140305 width=181)
                           Sort Key: customer.c_custkey, nation.n_name
                           ->  Hash Join  (cost=639221.32..682512.82 rows=140305 width=181)
                                 Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                 ->  Parallel Hash Join  (cost=639219.76..682080.53 rows=140305 width=159)
                                       Hash Cond: (customer.c_custkey = orders.o_custkey)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..39697.29 rows=375029 width=147)
                                       ->  Parallel Hash  (cost=637465.95..637465.95 rows=140305 width=16)
                                             ->  Nested Loop  (cost=6822.08..637465.95 rows=140305 width=16)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=6821.52..270227.96 rows=142563 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6678.96 rows=570252 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                   ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.56..2.57 rows=1 width=16)
                                                         Index Cond: ((l_orderkey = orders.o_orderkey) AND (l_returnflag = 'R'::bpchar))
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
 JIT:
   Functions: 26
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(27 rows)

query 10 run 3
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=791669.71..791669.76 rows=20 width=201)
   ->  Sort  (cost=791669.71..793072.76 rows=561221 width=201)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=695507.70..776735.82 rows=561221 width=201)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=695507.70..762705.30 rows=561221 width=181)
                     Workers Planned: 4
                     ->  Sort  (cost=694507.64..694858.41 rows=140305 width=181)
                           Sort Key: customer.c_custkey, nation.n_name
                           ->  Hash Join  (cost=639221.32..682512.82 rows=140305 width=181)
                                 Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                 ->  Parallel Hash Join  (cost=639219.76..682080.53 rows=140305 width=159)
                                       Hash Cond: (customer.c_custkey = orders.o_custkey)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..39697.29 rows=375029 width=147)
                                       ->  Parallel Hash  (cost=637465.95..637465.95 rows=140305 width=16)
                                             ->  Nested Loop  (cost=6822.08..637465.95 rows=140305 width=16)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=6821.52..270227.96 rows=142563 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6678.96 rows=570252 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                   ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.56..2.57 rows=1 width=16)
                                                         Index Cond: ((l_orderkey = orders.o_orderkey) AND (l_returnflag = 'R'::bpchar))
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
 JIT:
   Functions: 26
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(27 rows)

query 10 run 4
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=791669.71..791669.76 rows=20 width=201)
   ->  Sort  (cost=791669.71..793072.76 rows=561221 width=201)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=695507.70..776735.82 rows=561221 width=201)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=695507.70..762705.30 rows=561221 width=181)
                     Workers Planned: 4
                     ->  Sort  (cost=694507.64..694858.41 rows=140305 width=181)
                           Sort Key: customer.c_custkey, nation.n_name
                           ->  Hash Join  (cost=639221.32..682512.82 rows=140305 width=181)
                                 Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                 ->  Parallel Hash Join  (cost=639219.76..682080.53 rows=140305 width=159)
                                       Hash Cond: (customer.c_custkey = orders.o_custkey)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..39697.29 rows=375029 width=147)
                                       ->  Parallel Hash  (cost=637465.95..637465.95 rows=140305 width=16)
                                             ->  Nested Loop  (cost=6822.08..637465.95 rows=140305 width=16)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=6821.52..270227.96 rows=142563 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6678.96 rows=570252 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                   ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.56..2.57 rows=1 width=16)
                                                         Index Cond: ((l_orderkey = orders.o_orderkey) AND (l_returnflag = 'R'::bpchar))
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
 JIT:
   Functions: 26
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(27 rows)

query 10 run 5
SET
SET
SET
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=791669.71..791669.76 rows=20 width=201)
   ->  Sort  (cost=791669.71..793072.76 rows=561221 width=201)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate  (cost=695507.70..776735.82 rows=561221 width=201)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=695507.70..762705.30 rows=561221 width=181)
                     Workers Planned: 4
                     ->  Sort  (cost=694507.64..694858.41 rows=140305 width=181)
                           Sort Key: customer.c_custkey, nation.n_name
                           ->  Hash Join  (cost=639221.32..682512.82 rows=140305 width=181)
                                 Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                 ->  Parallel Hash Join  (cost=639219.76..682080.53 rows=140305 width=159)
                                       Hash Cond: (customer.c_custkey = orders.o_custkey)
                                       ->  Parallel Seq Scan on customer  (cost=0.00..39697.29 rows=375029 width=147)
                                       ->  Parallel Hash  (cost=637465.95..637465.95 rows=140305 width=16)
                                             ->  Nested Loop  (cost=6822.08..637465.95 rows=140305 width=16)
                                                   ->  Parallel Bitmap Heap Scan on orders  (cost=6821.52..270227.96 rows=142563 width=8)
                                                         Recheck Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                         ->  Bitmap Index Scan on idx_orders_orderdate  (cost=0.00..6678.96 rows=570252 width=0)
                                                               Index Cond: ((o_orderdate >= '1994-08-01'::date) AND (o_orderdate < '1994-11-01'::date))
                                                   ->  Index Only Scan using q10_idx_2 on lineitem  (cost=0.56..2.57 rows=1 width=16)
                                                         Index Cond: ((l_orderkey = orders.o_orderkey) AND (l_returnflag = 'R'::bpchar))
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                       ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
 JIT:
   Functions: 26
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(27 rows)

query 11 run 1
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=467672.18..467672.18 rows=1 width=36)
   InitPlan 1
     ->  Finalize Aggregate  (cost=207455.85..207455.87 rows=1 width=32)
           ->  Gather  (cost=207455.42..207455.83 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=206455.42..206455.43 rows=1 width=32)
                       ->  Hash Join  (cost=2341.31..205855.45 rows=79996 width=10)
                             Hash Cond: (partsupp_1.ps_suppkey = supplier_1.s_suppkey)
                             ->  Parallel Seq Scan on partsupp partsupp_1  (cost=0.00..195220.98 rows=1999898 width=14)
                             ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                                   ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                         ->  Bitmap Heap Scan on supplier supplier_1  (cost=39.29..2250.00 rows=4000 width=8)
                                               Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                                               ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                     Index Cond: (s_nationkey = nation_1.n_nationkey)
   ->  Sort  (cost=260216.31..260482.96 rows=106661 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  GroupAggregate  (cost=213370.24..259683.01 rows=106661 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               ->  Gather Merge  (cost=213370.24..251683.41 rows=319984 width=14)
                     Workers Planned: 4
                     ->  Sort  (cost=212370.18..212570.17 rows=79996 width=14)
                           Sort Key: partsupp.ps_partkey
                           ->  Hash Join  (cost=2341.31..205855.45 rows=79996 width=14)
                                 Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                 ->  Parallel Seq Scan on partsupp  (cost=0.00..195220.98 rows=1999898 width=18)
                                 ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                                       ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                             ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                             ->  Bitmap Heap Scan on supplier  (cost=39.29..2250.00 rows=4000 width=8)
                                                   Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                         Index Cond: (s_nationkey = nation.n_nationkey)
 JIT:
   Functions: 37
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(40 rows)

query 11 run 2
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=467672.18..467672.18 rows=1 width=36)
   InitPlan 1
     ->  Finalize Aggregate  (cost=207455.85..207455.87 rows=1 width=32)
           ->  Gather  (cost=207455.42..207455.83 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=206455.42..206455.43 rows=1 width=32)
                       ->  Hash Join  (cost=2341.31..205855.45 rows=79996 width=10)
                             Hash Cond: (partsupp_1.ps_suppkey = supplier_1.s_suppkey)
                             ->  Parallel Seq Scan on partsupp partsupp_1  (cost=0.00..195220.98 rows=1999898 width=14)
                             ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                                   ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                         ->  Bitmap Heap Scan on supplier supplier_1  (cost=39.29..2250.00 rows=4000 width=8)
                                               Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                                               ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                     Index Cond: (s_nationkey = nation_1.n_nationkey)
   ->  Sort  (cost=260216.31..260482.96 rows=106661 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  GroupAggregate  (cost=213370.24..259683.01 rows=106661 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               ->  Gather Merge  (cost=213370.24..251683.41 rows=319984 width=14)
                     Workers Planned: 4
                     ->  Sort  (cost=212370.18..212570.17 rows=79996 width=14)
                           Sort Key: partsupp.ps_partkey
                           ->  Hash Join  (cost=2341.31..205855.45 rows=79996 width=14)
                                 Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                 ->  Parallel Seq Scan on partsupp  (cost=0.00..195220.98 rows=1999898 width=18)
                                 ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                                       ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                             ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                             ->  Bitmap Heap Scan on supplier  (cost=39.29..2250.00 rows=4000 width=8)
                                                   Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                         Index Cond: (s_nationkey = nation.n_nationkey)
 JIT:
   Functions: 37
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(40 rows)

query 11 run 3
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=467672.18..467672.18 rows=1 width=36)
   InitPlan 1
     ->  Finalize Aggregate  (cost=207455.85..207455.87 rows=1 width=32)
           ->  Gather  (cost=207455.42..207455.83 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=206455.42..206455.43 rows=1 width=32)
                       ->  Hash Join  (cost=2341.31..205855.45 rows=79996 width=10)
                             Hash Cond: (partsupp_1.ps_suppkey = supplier_1.s_suppkey)
                             ->  Parallel Seq Scan on partsupp partsupp_1  (cost=0.00..195220.98 rows=1999898 width=14)
                             ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                                   ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                         ->  Bitmap Heap Scan on supplier supplier_1  (cost=39.29..2250.00 rows=4000 width=8)
                                               Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                                               ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                     Index Cond: (s_nationkey = nation_1.n_nationkey)
   ->  Sort  (cost=260216.31..260482.96 rows=106661 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  GroupAggregate  (cost=213370.24..259683.01 rows=106661 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               ->  Gather Merge  (cost=213370.24..251683.41 rows=319984 width=14)
                     Workers Planned: 4
                     ->  Sort  (cost=212370.18..212570.17 rows=79996 width=14)
                           Sort Key: partsupp.ps_partkey
                           ->  Hash Join  (cost=2341.31..205855.45 rows=79996 width=14)
                                 Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                 ->  Parallel Seq Scan on partsupp  (cost=0.00..195220.98 rows=1999898 width=18)
                                 ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                                       ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                             ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                             ->  Bitmap Heap Scan on supplier  (cost=39.29..2250.00 rows=4000 width=8)
                                                   Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                         Index Cond: (s_nationkey = nation.n_nationkey)
 JIT:
   Functions: 37
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(40 rows)

query 11 run 4
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=467672.18..467672.18 rows=1 width=36)
   InitPlan 1
     ->  Finalize Aggregate  (cost=207455.85..207455.87 rows=1 width=32)
           ->  Gather  (cost=207455.42..207455.83 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=206455.42..206455.43 rows=1 width=32)
                       ->  Hash Join  (cost=2341.31..205855.45 rows=79996 width=10)
                             Hash Cond: (partsupp_1.ps_suppkey = supplier_1.s_suppkey)
                             ->  Parallel Seq Scan on partsupp partsupp_1  (cost=0.00..195220.98 rows=1999898 width=14)
                             ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                                   ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                         ->  Bitmap Heap Scan on supplier supplier_1  (cost=39.29..2250.00 rows=4000 width=8)
                                               Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                                               ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                     Index Cond: (s_nationkey = nation_1.n_nationkey)
   ->  Sort  (cost=260216.31..260482.96 rows=106661 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  GroupAggregate  (cost=213370.24..259683.01 rows=106661 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               ->  Gather Merge  (cost=213370.24..251683.41 rows=319984 width=14)
                     Workers Planned: 4
                     ->  Sort  (cost=212370.18..212570.17 rows=79996 width=14)
                           Sort Key: partsupp.ps_partkey
                           ->  Hash Join  (cost=2341.31..205855.45 rows=79996 width=14)
                                 Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                 ->  Parallel Seq Scan on partsupp  (cost=0.00..195220.98 rows=1999898 width=18)
                                 ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                                       ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                             ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                             ->  Bitmap Heap Scan on supplier  (cost=39.29..2250.00 rows=4000 width=8)
                                                   Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                         Index Cond: (s_nationkey = nation.n_nationkey)
 JIT:
   Functions: 37
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(40 rows)

query 11 run 5
SET
SET
SET
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=467672.18..467672.18 rows=1 width=36)
   InitPlan 1
     ->  Finalize Aggregate  (cost=207455.85..207455.87 rows=1 width=32)
           ->  Gather  (cost=207455.42..207455.83 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=206455.42..206455.43 rows=1 width=32)
                       ->  Hash Join  (cost=2341.31..205855.45 rows=79996 width=10)
                             Hash Cond: (partsupp_1.ps_suppkey = supplier_1.s_suppkey)
                             ->  Parallel Seq Scan on partsupp partsupp_1  (cost=0.00..195220.98 rows=1999898 width=14)
                             ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                                   ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                         ->  Seq Scan on nation nation_1  (cost=0.00..1.31 rows=1 width=4)
                                               Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                         ->  Bitmap Heap Scan on supplier supplier_1  (cost=39.29..2250.00 rows=4000 width=8)
                                               Recheck Cond: (s_nationkey = nation_1.n_nationkey)
                                               ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                     Index Cond: (s_nationkey = nation_1.n_nationkey)
   ->  Sort  (cost=260216.31..260482.96 rows=106661 width=36)
         Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
         ->  GroupAggregate  (cost=213370.24..259683.01 rows=106661 width=36)
               Group Key: partsupp.ps_partkey
               Filter: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric)) > (InitPlan 1).col1)
               ->  Gather Merge  (cost=213370.24..251683.41 rows=319984 width=14)
                     Workers Planned: 4
                     ->  Sort  (cost=212370.18..212570.17 rows=79996 width=14)
                           Sort Key: partsupp.ps_partkey
                           ->  Hash Join  (cost=2341.31..205855.45 rows=79996 width=14)
                                 Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                 ->  Parallel Seq Scan on partsupp  (cost=0.00..195220.98 rows=1999898 width=18)
                                 ->  Hash  (cost=2291.31..2291.31 rows=4000 width=4)
                                       ->  Nested Loop  (cost=39.29..2291.31 rows=4000 width=4)
                                             ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                   Filter: (n_name = 'SAUDI ARABIA'::bpchar)
                                             ->  Bitmap Heap Scan on supplier  (cost=39.29..2250.00 rows=4000 width=8)
                                                   Recheck Cond: (s_nationkey = nation.n_nationkey)
                                                   ->  Bitmap Index Scan on idx_supplier_nation_key  (cost=0.00..38.29 rows=4000 width=0)
                                                         Index Cond: (s_nationkey = nation.n_nationkey)
 JIT:
   Functions: 37
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(40 rows)

query 12 run 1
SET
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=154874.18..341646.13 rows=1 width=27)
   ->  GroupAggregate  (cost=154874.18..1462277.81 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Nested Loop  (cost=154874.18..1457242.53 rows=287726 width=27)
               ->  Gather Merge  (cost=154873.75..189324.52 rows=287726 width=15)
                     Workers Planned: 4
                     ->  Sort  (cost=153873.69..154053.52 rows=71932 width=15)
                           Sort Key: lineitem.l_shipmode
                           ->  Parallel Index Only Scan using q12_idx_1 on lineitem  (cost=0.43..148070.81 rows=71932 width=15)
                                 Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
               ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.41 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
 JIT:
   Functions: 10
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(15 rows)

query 12 run 2
SET
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=154874.18..341646.13 rows=1 width=27)
   ->  GroupAggregate  (cost=154874.18..1462277.81 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Nested Loop  (cost=154874.18..1457242.53 rows=287726 width=27)
               ->  Gather Merge  (cost=154873.75..189324.52 rows=287726 width=15)
                     Workers Planned: 4
                     ->  Sort  (cost=153873.69..154053.52 rows=71932 width=15)
                           Sort Key: lineitem.l_shipmode
                           ->  Parallel Index Only Scan using q12_idx_1 on lineitem  (cost=0.43..148070.81 rows=71932 width=15)
                                 Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
               ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.41 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
 JIT:
   Functions: 10
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(15 rows)

query 12 run 3
SET
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=154874.18..341646.13 rows=1 width=27)
   ->  GroupAggregate  (cost=154874.18..1462277.81 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Nested Loop  (cost=154874.18..1457242.53 rows=287726 width=27)
               ->  Gather Merge  (cost=154873.75..189324.52 rows=287726 width=15)
                     Workers Planned: 4
                     ->  Sort  (cost=153873.69..154053.52 rows=71932 width=15)
                           Sort Key: lineitem.l_shipmode
                           ->  Parallel Index Only Scan using q12_idx_1 on lineitem  (cost=0.43..148070.81 rows=71932 width=15)
                                 Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
               ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.41 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
 JIT:
   Functions: 10
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(15 rows)

query 12 run 4
SET
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=154874.18..341646.13 rows=1 width=27)
   ->  GroupAggregate  (cost=154874.18..1462277.81 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Nested Loop  (cost=154874.18..1457242.53 rows=287726 width=27)
               ->  Gather Merge  (cost=154873.75..189324.52 rows=287726 width=15)
                     Workers Planned: 4
                     ->  Sort  (cost=153873.69..154053.52 rows=71932 width=15)
                           Sort Key: lineitem.l_shipmode
                           ->  Parallel Index Only Scan using q12_idx_1 on lineitem  (cost=0.43..148070.81 rows=71932 width=15)
                                 Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
               ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.41 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
 JIT:
   Functions: 10
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(15 rows)

query 12 run 5
SET
SET
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=154874.18..341646.13 rows=1 width=27)
   ->  GroupAggregate  (cost=154874.18..1462277.81 rows=7 width=27)
         Group Key: lineitem.l_shipmode
         ->  Nested Loop  (cost=154874.18..1457242.53 rows=287726 width=27)
               ->  Gather Merge  (cost=154873.75..189324.52 rows=287726 width=15)
                     Workers Planned: 4
                     ->  Sort  (cost=153873.69..154053.52 rows=71932 width=15)
                           Sort Key: lineitem.l_shipmode
                           ->  Parallel Index Only Scan using q12_idx_1 on lineitem  (cost=0.43..148070.81 rows=71932 width=15)
                                 Index Cond: ((l_shipmode = ANY ('{SHIP,"REG AIR"}'::bpchar[])) AND (l_receiptdate >= '1994-01-01'::date) AND (l_receiptdate < '1995-01-01'::date))
               ->  Index Scan using q21_idx_3 on orders  (cost=0.43..4.41 rows=1 width=20)
                     Index Cond: (o_orderkey = lineitem.l_orderkey)
 JIT:
   Functions: 10
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(15 rows)

query 13 run 1
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1421691.68..1421691.68 rows=1 width=16)
   ->  Sort  (cost=1421691.68..1421692.18 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1421688.68..1421690.68 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=1268181.34..1399186.94 rows=1500116 width=12)
                     Group Key: customer.c_custkey
                     Planned Partitions: 4
                     ->  Hash Right Join  (cost=55345.62..664958.27 rows=14848568 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..448769.05 rows=14848568 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=30734.17..30734.17 rows=1500116 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.43..30734.17 rows=1500116 width=4)
 JIT:
   Functions: 15
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(17 rows)

query 13 run 2
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1421691.68..1421691.68 rows=1 width=16)
   ->  Sort  (cost=1421691.68..1421692.18 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1421688.68..1421690.68 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=1268181.34..1399186.94 rows=1500116 width=12)
                     Group Key: customer.c_custkey
                     Planned Partitions: 4
                     ->  Hash Right Join  (cost=55345.62..664958.27 rows=14848568 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..448769.05 rows=14848568 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=30734.17..30734.17 rows=1500116 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.43..30734.17 rows=1500116 width=4)
 JIT:
   Functions: 15
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(17 rows)

query 13 run 3
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1421691.68..1421691.68 rows=1 width=16)
   ->  Sort  (cost=1421691.68..1421692.18 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1421688.68..1421690.68 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=1268181.34..1399186.94 rows=1500116 width=12)
                     Group Key: customer.c_custkey
                     Planned Partitions: 4
                     ->  Hash Right Join  (cost=55345.62..664958.27 rows=14848568 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..448769.05 rows=14848568 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=30734.17..30734.17 rows=1500116 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.43..30734.17 rows=1500116 width=4)
 JIT:
   Functions: 15
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(17 rows)

query 13 run 4
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1421691.68..1421691.68 rows=1 width=16)
   ->  Sort  (cost=1421691.68..1421692.18 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1421688.68..1421690.68 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=1268181.34..1399186.94 rows=1500116 width=12)
                     Group Key: customer.c_custkey
                     Planned Partitions: 4
                     ->  Hash Right Join  (cost=55345.62..664958.27 rows=14848568 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..448769.05 rows=14848568 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=30734.17..30734.17 rows=1500116 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.43..30734.17 rows=1500116 width=4)
 JIT:
   Functions: 15
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(17 rows)

query 13 run 5
SET
SET
SET
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1421691.68..1421691.68 rows=1 width=16)
   ->  Sort  (cost=1421691.68..1421692.18 rows=200 width=16)
         Sort Key: (count(*)) DESC, (count(orders.o_orderkey)) DESC
         ->  HashAggregate  (cost=1421688.68..1421690.68 rows=200 width=16)
               Group Key: count(orders.o_orderkey)
               ->  HashAggregate  (cost=1268181.34..1399186.94 rows=1500116 width=12)
                     Group Key: customer.c_custkey
                     Planned Partitions: 4
                     ->  Hash Right Join  (cost=55345.62..664958.27 rows=14848568 width=8)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           ->  Seq Scan on orders  (cost=0.00..448769.05 rows=14848568 width=8)
                                 Filter: ((o_comment)::text !~~ '%special%requests%'::text)
                           ->  Hash  (cost=30734.17..30734.17 rows=1500116 width=4)
                                 ->  Index Only Scan using customer_pkey on customer  (cost=0.43..30734.17 rows=1500116 width=4)
 JIT:
   Functions: 15
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(17 rows)

query 14 run 1
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=907659.53..907659.55 rows=1 width=32)
   ->  Finalize Aggregate  (cost=907659.53..907659.55 rows=1 width=32)
         ->  Gather  (cost=907659.08..907659.49 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=906659.08..906659.09 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=65390.82..903453.86 rows=183155 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=13159.91..850742.16 rows=183155 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..12976.76 rows=732619 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=45980.96..45980.96 rows=499996 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..45980.96 rows=499996 width=25)
 JIT:
   Functions: 18
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(16 rows)

query 14 run 2
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=907659.53..907659.55 rows=1 width=32)
   ->  Finalize Aggregate  (cost=907659.53..907659.55 rows=1 width=32)
         ->  Gather  (cost=907659.08..907659.49 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=906659.08..906659.09 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=65390.82..903453.86 rows=183155 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=13159.91..850742.16 rows=183155 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..12976.76 rows=732619 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=45980.96..45980.96 rows=499996 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..45980.96 rows=499996 width=25)
 JIT:
   Functions: 18
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(16 rows)

query 14 run 3
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=907659.53..907659.55 rows=1 width=32)
   ->  Finalize Aggregate  (cost=907659.53..907659.55 rows=1 width=32)
         ->  Gather  (cost=907659.08..907659.49 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=906659.08..906659.09 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=65390.82..903453.86 rows=183155 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=13159.91..850742.16 rows=183155 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..12976.76 rows=732619 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=45980.96..45980.96 rows=499996 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..45980.96 rows=499996 width=25)
 JIT:
   Functions: 18
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(16 rows)

query 14 run 4
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=907659.53..907659.55 rows=1 width=32)
   ->  Finalize Aggregate  (cost=907659.53..907659.55 rows=1 width=32)
         ->  Gather  (cost=907659.08..907659.49 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=906659.08..906659.09 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=65390.82..903453.86 rows=183155 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=13159.91..850742.16 rows=183155 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..12976.76 rows=732619 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=45980.96..45980.96 rows=499996 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..45980.96 rows=499996 width=25)
 JIT:
   Functions: 18
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(16 rows)

query 14 run 5
SET
SET
SET
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=907659.53..907659.55 rows=1 width=32)
   ->  Finalize Aggregate  (cost=907659.53..907659.55 rows=1 width=32)
         ->  Gather  (cost=907659.08..907659.49 rows=4 width=64)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=906659.08..906659.09 rows=1 width=64)
                     ->  Parallel Hash Join  (cost=65390.82..903453.86 rows=183155 width=33)
                           Hash Cond: (lineitem.l_partkey = part.p_partkey)
                           ->  Parallel Bitmap Heap Scan on lineitem  (cost=13159.91..850742.16 rows=183155 width=16)
                                 Recheck Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                                 ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..12976.76 rows=732619 width=0)
                                       Index Cond: ((l_shipdate >= '1994-05-01'::date) AND (l_shipdate < '1994-06-01'::date))
                           ->  Parallel Hash  (cost=45980.96..45980.96 rows=499996 width=25)
                                 ->  Parallel Seq Scan on part  (cost=0.00..45980.96 rows=499996 width=25)
 JIT:
   Functions: 18
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(16 rows)

query 15 run 1
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2754374.63..2754482.68 rows=1 width=103)
   InitPlan 1
     ->  Aggregate  (cost=1395799.50..1395799.51 rows=1 width=32)
           ->  Finalize HashAggregate  (cost=1393297.47..1394548.49 rows=100081 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather  (cost=1349011.63..1390295.04 rows=400324 width=36)
                       Workers Planned: 4
                       ->  Partial HashAggregate  (cost=1348011.63..1349262.64 rows=100081 width=36)
                             Group Key: lineitem_1.l_suppkey
                             ->  Parallel Bitmap Heap Scan on lineitem lineitem_1  (cost=42352.54..1342116.51 rows=589512 width=16)
                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..41763.03 rows=2358046 width=0)
                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=1358575.12..1412597.13 rows=500 width=103)
         ->  Finalize GroupAggregate  (cost=1358574.83..1411011.13 rows=500 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
               ->  Gather Merge  (cost=1358574.83..1406507.48 rows=400324 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=1357574.77..1357824.98 rows=100081 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=1348011.63..1349262.64 rows=100081 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=42352.54..1342116.51 rows=589512 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..41763.03 rows=2358046 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..3.16 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
 JIT:
   Functions: 25
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(32 rows)

DROP VIEW
query 15 run 2
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2754374.63..2754482.68 rows=1 width=103)
   InitPlan 1
     ->  Aggregate  (cost=1395799.50..1395799.51 rows=1 width=32)
           ->  Finalize HashAggregate  (cost=1393297.47..1394548.49 rows=100081 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather  (cost=1349011.63..1390295.04 rows=400324 width=36)
                       Workers Planned: 4
                       ->  Partial HashAggregate  (cost=1348011.63..1349262.64 rows=100081 width=36)
                             Group Key: lineitem_1.l_suppkey
                             ->  Parallel Bitmap Heap Scan on lineitem lineitem_1  (cost=42352.54..1342116.51 rows=589512 width=16)
                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..41763.03 rows=2358046 width=0)
                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=1358575.12..1412597.13 rows=500 width=103)
         ->  Finalize GroupAggregate  (cost=1358574.83..1411011.13 rows=500 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
               ->  Gather Merge  (cost=1358574.83..1406507.48 rows=400324 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=1357574.77..1357824.98 rows=100081 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=1348011.63..1349262.64 rows=100081 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=42352.54..1342116.51 rows=589512 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..41763.03 rows=2358046 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..3.16 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
 JIT:
   Functions: 25
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(32 rows)

DROP VIEW
query 15 run 3
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2754374.63..2754482.68 rows=1 width=103)
   InitPlan 1
     ->  Aggregate  (cost=1395799.50..1395799.51 rows=1 width=32)
           ->  Finalize HashAggregate  (cost=1393297.47..1394548.49 rows=100081 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather  (cost=1349011.63..1390295.04 rows=400324 width=36)
                       Workers Planned: 4
                       ->  Partial HashAggregate  (cost=1348011.63..1349262.64 rows=100081 width=36)
                             Group Key: lineitem_1.l_suppkey
                             ->  Parallel Bitmap Heap Scan on lineitem lineitem_1  (cost=42352.54..1342116.51 rows=589512 width=16)
                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..41763.03 rows=2358046 width=0)
                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=1358575.12..1412597.13 rows=500 width=103)
         ->  Finalize GroupAggregate  (cost=1358574.83..1411011.13 rows=500 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
               ->  Gather Merge  (cost=1358574.83..1406507.48 rows=400324 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=1357574.77..1357824.98 rows=100081 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=1348011.63..1349262.64 rows=100081 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=42352.54..1342116.51 rows=589512 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..41763.03 rows=2358046 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..3.16 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
 JIT:
   Functions: 25
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(32 rows)

DROP VIEW
query 15 run 4
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2754374.63..2754482.68 rows=1 width=103)
   InitPlan 1
     ->  Aggregate  (cost=1395799.50..1395799.51 rows=1 width=32)
           ->  Finalize HashAggregate  (cost=1393297.47..1394548.49 rows=100081 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather  (cost=1349011.63..1390295.04 rows=400324 width=36)
                       Workers Planned: 4
                       ->  Partial HashAggregate  (cost=1348011.63..1349262.64 rows=100081 width=36)
                             Group Key: lineitem_1.l_suppkey
                             ->  Parallel Bitmap Heap Scan on lineitem lineitem_1  (cost=42352.54..1342116.51 rows=589512 width=16)
                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..41763.03 rows=2358046 width=0)
                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=1358575.12..1412597.13 rows=500 width=103)
         ->  Finalize GroupAggregate  (cost=1358574.83..1411011.13 rows=500 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
               ->  Gather Merge  (cost=1358574.83..1406507.48 rows=400324 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=1357574.77..1357824.98 rows=100081 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=1348011.63..1349262.64 rows=100081 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=42352.54..1342116.51 rows=589512 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..41763.03 rows=2358046 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..3.16 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
 JIT:
   Functions: 25
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(32 rows)

DROP VIEW
query 15 run 5
SET
SET
SET
CREATE VIEW
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2754374.63..2754482.68 rows=1 width=103)
   InitPlan 1
     ->  Aggregate  (cost=1395799.50..1395799.51 rows=1 width=32)
           ->  Finalize HashAggregate  (cost=1393297.47..1394548.49 rows=100081 width=36)
                 Group Key: lineitem_1.l_suppkey
                 ->  Gather  (cost=1349011.63..1390295.04 rows=400324 width=36)
                       Workers Planned: 4
                       ->  Partial HashAggregate  (cost=1348011.63..1349262.64 rows=100081 width=36)
                             Group Key: lineitem_1.l_suppkey
                             ->  Parallel Bitmap Heap Scan on lineitem lineitem_1  (cost=42352.54..1342116.51 rows=589512 width=16)
                                   Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                   ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..41763.03 rows=2358046 width=0)
                                         Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
   ->  Nested Loop  (cost=1358575.12..1412597.13 rows=500 width=103)
         ->  Finalize GroupAggregate  (cost=1358574.83..1411011.13 rows=500 width=36)
               Group Key: lineitem.l_suppkey
               Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
               ->  Gather Merge  (cost=1358574.83..1406507.48 rows=400324 width=36)
                     Workers Planned: 4
                     ->  Sort  (cost=1357574.77..1357824.98 rows=100081 width=36)
                           Sort Key: lineitem.l_suppkey
                           ->  Partial HashAggregate  (cost=1348011.63..1349262.64 rows=100081 width=36)
                                 Group Key: lineitem.l_suppkey
                                 ->  Parallel Bitmap Heap Scan on lineitem  (cost=42352.54..1342116.51 rows=589512 width=16)
                                       Recheck Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
                                       ->  Bitmap Index Scan on idx_lineitem_shipdate  (cost=0.00..41763.03 rows=2358046 width=0)
                                             Index Cond: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1996-04-01'::date))
         ->  Index Scan using supplier_pkey on supplier  (cost=0.29..3.16 rows=1 width=71)
               Index Cond: (s_suppkey = lineitem.l_suppkey)
 JIT:
   Functions: 25
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(32 rows)

DROP VIEW
query 16 run 1
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=260355.82..260355.83 rows=1 width=44)
   ->  Sort  (cost=260355.82..260736.50 rows=152270 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=182791.43..259594.47 rows=152270 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Gather Merge  (cost=182791.43..252269.13 rows=580264 width=40)
                     Workers Planned: 4
                     ->  Sort  (cost=181791.37..182154.04 rows=145066 width=40)
                           Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                           ->  Parallel Hash Join  (cost=57859.07..169354.61 rows=145066 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..112342.13 rows=999949 width=8)
                                       Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=53480.91..53480.91 rows=72536 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..53480.91 rows=72536 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
 JIT:
   Functions: 24
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(22 rows)

query 16 run 2
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=260355.82..260355.83 rows=1 width=44)
   ->  Sort  (cost=260355.82..260736.50 rows=152270 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=182791.43..259594.47 rows=152270 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Gather Merge  (cost=182791.43..252269.13 rows=580264 width=40)
                     Workers Planned: 4
                     ->  Sort  (cost=181791.37..182154.04 rows=145066 width=40)
                           Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                           ->  Parallel Hash Join  (cost=57859.07..169354.61 rows=145066 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..112342.13 rows=999949 width=8)
                                       Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=53480.91..53480.91 rows=72536 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..53480.91 rows=72536 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
 JIT:
   Functions: 24
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(22 rows)

query 16 run 3
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=260355.82..260355.83 rows=1 width=44)
   ->  Sort  (cost=260355.82..260736.50 rows=152270 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=182791.43..259594.47 rows=152270 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Gather Merge  (cost=182791.43..252269.13 rows=580264 width=40)
                     Workers Planned: 4
                     ->  Sort  (cost=181791.37..182154.04 rows=145066 width=40)
                           Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                           ->  Parallel Hash Join  (cost=57859.07..169354.61 rows=145066 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..112342.13 rows=999949 width=8)
                                       Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=53480.91..53480.91 rows=72536 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..53480.91 rows=72536 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
 JIT:
   Functions: 24
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(22 rows)

query 16 run 4
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=260355.82..260355.83 rows=1 width=44)
   ->  Sort  (cost=260355.82..260736.50 rows=152270 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=182791.43..259594.47 rows=152270 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Gather Merge  (cost=182791.43..252269.13 rows=580264 width=40)
                     Workers Planned: 4
                     ->  Sort  (cost=181791.37..182154.04 rows=145066 width=40)
                           Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                           ->  Parallel Hash Join  (cost=57859.07..169354.61 rows=145066 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..112342.13 rows=999949 width=8)
                                       Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=53480.91..53480.91 rows=72536 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..53480.91 rows=72536 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
 JIT:
   Functions: 24
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(22 rows)

query 16 run 5
SET
SET
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=260355.82..260355.83 rows=1 width=44)
   ->  Sort  (cost=260355.82..260736.50 rows=152270 width=44)
         Sort Key: (count(DISTINCT partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
         ->  GroupAggregate  (cost=182791.43..259594.47 rows=152270 width=44)
               Group Key: part.p_brand, part.p_type, part.p_size
               ->  Gather Merge  (cost=182791.43..252269.13 rows=580264 width=40)
                     Workers Planned: 4
                     ->  Sort  (cost=181791.37..182154.04 rows=145066 width=40)
                           Sort Key: part.p_brand, part.p_type, part.p_size, partsupp.ps_suppkey
                           ->  Parallel Hash Join  (cost=57859.07..169354.61 rows=145066 width=40)
                                 Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                 ->  Parallel Index Only Scan using partsupp_pkey on partsupp  (cost=3471.46..112342.13 rows=999949 width=8)
                                       Filter: (NOT (ANY (ps_suppkey = (hashed SubPlan 1).col1)))
                                       SubPlan 1
                                         ->  Seq Scan on supplier  (cost=0.00..3471.00 rows=10 width=4)
                                               Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                                 ->  Parallel Hash  (cost=53480.91..53480.91 rows=72536 width=40)
                                       ->  Parallel Seq Scan on part  (cost=0.00..53480.91 rows=72536 width=40)
                                             Filter: ((p_brand <> 'Brand#12'::bpchar) AND ((p_type)::text !~~ 'SMALL BRUSHED%'::text) AND (p_size = ANY ('{12,32,36,26,40,34,49,9}'::integer[])))
 JIT:
   Functions: 24
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(22 rows)

query 17 run 1
SET
SET
SET
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1747875.02..1747875.04 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1747875.02..1747875.04 rows=1 width=32)
         ->  Gather  (cost=1747874.59..1747875.00 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1746874.59..1746874.60 rows=1 width=32)
                     ->  Nested Loop  (cost=48506.27..1746861.34 rows=5301 width=8)
                           Join Filter: (part.p_partkey = lineitem.l_partkey)
                           ->  Merge Join  (cost=48505.70..1745234.98 rows=530 width=40)
                                 Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                                 ->  Sort  (cost=48505.14..48506.47 rows=534 width=4)
                                       Sort Key: part.p_partkey
                                       ->  Parallel Seq Scan on part  (cost=0.00..48480.95 rows=534 width=4)
                                             Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  GroupAggregate  (cost=0.56..1691755.82 rows=1986420 width=36)
                                       Group Key: lineitem_1.l_partkey
                                       ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.56..1361989.28 rows=59994048 width=9)
                           ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..2.94 rows=10 width=17)
                                 Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
 JIT:
   Functions: 20
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(21 rows)

query 17 run 2
SET
SET
SET
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1747875.02..1747875.04 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1747875.02..1747875.04 rows=1 width=32)
         ->  Gather  (cost=1747874.59..1747875.00 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1746874.59..1746874.60 rows=1 width=32)
                     ->  Nested Loop  (cost=48506.27..1746861.34 rows=5301 width=8)
                           Join Filter: (part.p_partkey = lineitem.l_partkey)
                           ->  Merge Join  (cost=48505.70..1745234.98 rows=530 width=40)
                                 Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                                 ->  Sort  (cost=48505.14..48506.47 rows=534 width=4)
                                       Sort Key: part.p_partkey
                                       ->  Parallel Seq Scan on part  (cost=0.00..48480.95 rows=534 width=4)
                                             Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  GroupAggregate  (cost=0.56..1691755.82 rows=1986420 width=36)
                                       Group Key: lineitem_1.l_partkey
                                       ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.56..1361989.28 rows=59994048 width=9)
                           ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..2.94 rows=10 width=17)
                                 Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
 JIT:
   Functions: 20
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(21 rows)

query 17 run 3
SET
SET
SET
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1747875.02..1747875.04 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1747875.02..1747875.04 rows=1 width=32)
         ->  Gather  (cost=1747874.59..1747875.00 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1746874.59..1746874.60 rows=1 width=32)
                     ->  Nested Loop  (cost=48506.27..1746861.34 rows=5301 width=8)
                           Join Filter: (part.p_partkey = lineitem.l_partkey)
                           ->  Merge Join  (cost=48505.70..1745234.98 rows=530 width=40)
                                 Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                                 ->  Sort  (cost=48505.14..48506.47 rows=534 width=4)
                                       Sort Key: part.p_partkey
                                       ->  Parallel Seq Scan on part  (cost=0.00..48480.95 rows=534 width=4)
                                             Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  GroupAggregate  (cost=0.56..1691755.82 rows=1986420 width=36)
                                       Group Key: lineitem_1.l_partkey
                                       ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.56..1361989.28 rows=59994048 width=9)
                           ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..2.94 rows=10 width=17)
                                 Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
 JIT:
   Functions: 20
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(21 rows)

query 17 run 4
SET
SET
SET
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1747875.02..1747875.04 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1747875.02..1747875.04 rows=1 width=32)
         ->  Gather  (cost=1747874.59..1747875.00 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1746874.59..1746874.60 rows=1 width=32)
                     ->  Nested Loop  (cost=48506.27..1746861.34 rows=5301 width=8)
                           Join Filter: (part.p_partkey = lineitem.l_partkey)
                           ->  Merge Join  (cost=48505.70..1745234.98 rows=530 width=40)
                                 Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                                 ->  Sort  (cost=48505.14..48506.47 rows=534 width=4)
                                       Sort Key: part.p_partkey
                                       ->  Parallel Seq Scan on part  (cost=0.00..48480.95 rows=534 width=4)
                                             Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  GroupAggregate  (cost=0.56..1691755.82 rows=1986420 width=36)
                                       Group Key: lineitem_1.l_partkey
                                       ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.56..1361989.28 rows=59994048 width=9)
                           ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..2.94 rows=10 width=17)
                                 Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
 JIT:
   Functions: 20
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(21 rows)

query 17 run 5
SET
SET
SET
                                                                   QUERY PLAN                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1747875.02..1747875.04 rows=1 width=32)
   ->  Finalize Aggregate  (cost=1747875.02..1747875.04 rows=1 width=32)
         ->  Gather  (cost=1747874.59..1747875.00 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=1746874.59..1746874.60 rows=1 width=32)
                     ->  Nested Loop  (cost=48506.27..1746861.34 rows=5301 width=8)
                           Join Filter: (part.p_partkey = lineitem.l_partkey)
                           ->  Merge Join  (cost=48505.70..1745234.98 rows=530 width=40)
                                 Merge Cond: (part.p_partkey = lineitem_1.l_partkey)
                                 ->  Sort  (cost=48505.14..48506.47 rows=534 width=4)
                                       Sort Key: part.p_partkey
                                       ->  Parallel Seq Scan on part  (cost=0.00..48480.95 rows=534 width=4)
                                             Filter: ((p_brand = 'Brand#22'::bpchar) AND (p_container = 'LG BOX'::bpchar))
                                 ->  GroupAggregate  (cost=0.56..1691755.82 rows=1986420 width=36)
                                       Group Key: lineitem_1.l_partkey
                                       ->  Index Only Scan using q17_idx_1 on lineitem lineitem_1  (cost=0.56..1361989.28 rows=59994048 width=9)
                           ->  Index Only Scan using q9_idx_1 on lineitem  (cost=0.56..2.94 rows=10 width=17)
                                 Index Cond: ((l_partkey = lineitem_1.l_partkey) AND (l_quantity < ((0.2 * avg(lineitem_1.l_quantity)))))
 JIT:
   Functions: 20
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(21 rows)

query 18 run 1
SET
SET
SET
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=6975720.73..6975720.98 rows=100 width=71)
   ->  Sort  (cost=6975720.73..7025710.53 rows=19995920 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=836844.16..6211491.05 rows=19995920 width=71)
               Group Key: orders.o_orderkey, customer.c_custkey
               ->  Incremental Sort  (cost=836844.16..5811572.65 rows=19995920 width=44)
                     Sort Key: orders.o_orderkey, customer.c_custkey
                     Presorted Key: orders.o_orderkey
                     ->  Merge Join  (cost=836843.86..5086610.51 rows=19995920 width=44)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Gather Merge  (cost=836716.37..3362619.76 rows=4999504 width=43)
                                 Workers Planned: 4
                                 ->  Merge Join  (cost=835716.31..2766130.57 rows=1249876 width=43)
                                       Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Sort  (cost=835715.74..845090.80 rows=3750021 width=39)
                                             Sort Key: orders.o_orderkey
                                             ->  Parallel Hash Join  (cost=44385.15..352997.19 rows=3750021 width=39)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..298768.21 rows=3750021 width=20)
                                                   ->  Parallel Hash  (cost=39697.29..39697.29 rows=375029 width=23)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..39697.29 rows=375029 width=23)
                                       ->  GroupAggregate  (cost=0.56..1886667.20 rows=4999504 width=4)
                                             Group Key: lineitem_1.l_orderkey
                                             Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                             ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.56..1361719.28 rows=59994048 width=9)
                           ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.56..1361719.28 rows=59994048 width=9)
 JIT:
   Functions: 29
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(29 rows)

query 18 run 2
SET
SET
SET
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=6975720.73..6975720.98 rows=100 width=71)
   ->  Sort  (cost=6975720.73..7025710.53 rows=19995920 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=836844.16..6211491.05 rows=19995920 width=71)
               Group Key: orders.o_orderkey, customer.c_custkey
               ->  Incremental Sort  (cost=836844.16..5811572.65 rows=19995920 width=44)
                     Sort Key: orders.o_orderkey, customer.c_custkey
                     Presorted Key: orders.o_orderkey
                     ->  Merge Join  (cost=836843.86..5086610.51 rows=19995920 width=44)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Gather Merge  (cost=836716.37..3362619.76 rows=4999504 width=43)
                                 Workers Planned: 4
                                 ->  Merge Join  (cost=835716.31..2766130.57 rows=1249876 width=43)
                                       Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Sort  (cost=835715.74..845090.80 rows=3750021 width=39)
                                             Sort Key: orders.o_orderkey
                                             ->  Parallel Hash Join  (cost=44385.15..352997.19 rows=3750021 width=39)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..298768.21 rows=3750021 width=20)
                                                   ->  Parallel Hash  (cost=39697.29..39697.29 rows=375029 width=23)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..39697.29 rows=375029 width=23)
                                       ->  GroupAggregate  (cost=0.56..1886667.20 rows=4999504 width=4)
                                             Group Key: lineitem_1.l_orderkey
                                             Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                             ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.56..1361719.28 rows=59994048 width=9)
                           ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.56..1361719.28 rows=59994048 width=9)
 JIT:
   Functions: 29
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(29 rows)

query 18 run 3
SET
SET
SET
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=6975720.73..6975720.98 rows=100 width=71)
   ->  Sort  (cost=6975720.73..7025710.53 rows=19995920 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=836844.16..6211491.05 rows=19995920 width=71)
               Group Key: orders.o_orderkey, customer.c_custkey
               ->  Incremental Sort  (cost=836844.16..5811572.65 rows=19995920 width=44)
                     Sort Key: orders.o_orderkey, customer.c_custkey
                     Presorted Key: orders.o_orderkey
                     ->  Merge Join  (cost=836843.86..5086610.51 rows=19995920 width=44)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Gather Merge  (cost=836716.37..3362619.76 rows=4999504 width=43)
                                 Workers Planned: 4
                                 ->  Merge Join  (cost=835716.31..2766130.57 rows=1249876 width=43)
                                       Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Sort  (cost=835715.74..845090.80 rows=3750021 width=39)
                                             Sort Key: orders.o_orderkey
                                             ->  Parallel Hash Join  (cost=44385.15..352997.19 rows=3750021 width=39)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..298768.21 rows=3750021 width=20)
                                                   ->  Parallel Hash  (cost=39697.29..39697.29 rows=375029 width=23)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..39697.29 rows=375029 width=23)
                                       ->  GroupAggregate  (cost=0.56..1886667.20 rows=4999504 width=4)
                                             Group Key: lineitem_1.l_orderkey
                                             Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                             ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.56..1361719.28 rows=59994048 width=9)
                           ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.56..1361719.28 rows=59994048 width=9)
 JIT:
   Functions: 29
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(29 rows)

query 18 run 4
SET
SET
SET
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=6975720.73..6975720.98 rows=100 width=71)
   ->  Sort  (cost=6975720.73..7025710.53 rows=19995920 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=836844.16..6211491.05 rows=19995920 width=71)
               Group Key: orders.o_orderkey, customer.c_custkey
               ->  Incremental Sort  (cost=836844.16..5811572.65 rows=19995920 width=44)
                     Sort Key: orders.o_orderkey, customer.c_custkey
                     Presorted Key: orders.o_orderkey
                     ->  Merge Join  (cost=836843.86..5086610.51 rows=19995920 width=44)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Gather Merge  (cost=836716.37..3362619.76 rows=4999504 width=43)
                                 Workers Planned: 4
                                 ->  Merge Join  (cost=835716.31..2766130.57 rows=1249876 width=43)
                                       Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Sort  (cost=835715.74..845090.80 rows=3750021 width=39)
                                             Sort Key: orders.o_orderkey
                                             ->  Parallel Hash Join  (cost=44385.15..352997.19 rows=3750021 width=39)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..298768.21 rows=3750021 width=20)
                                                   ->  Parallel Hash  (cost=39697.29..39697.29 rows=375029 width=23)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..39697.29 rows=375029 width=23)
                                       ->  GroupAggregate  (cost=0.56..1886667.20 rows=4999504 width=4)
                                             Group Key: lineitem_1.l_orderkey
                                             Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                             ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.56..1361719.28 rows=59994048 width=9)
                           ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.56..1361719.28 rows=59994048 width=9)
 JIT:
   Functions: 29
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(29 rows)

query 18 run 5
SET
SET
SET
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=6975720.73..6975720.98 rows=100 width=71)
   ->  Sort  (cost=6975720.73..7025710.53 rows=19995920 width=71)
         Sort Key: orders.o_totalprice DESC, orders.o_orderdate
         ->  GroupAggregate  (cost=836844.16..6211491.05 rows=19995920 width=71)
               Group Key: orders.o_orderkey, customer.c_custkey
               ->  Incremental Sort  (cost=836844.16..5811572.65 rows=19995920 width=44)
                     Sort Key: orders.o_orderkey, customer.c_custkey
                     Presorted Key: orders.o_orderkey
                     ->  Merge Join  (cost=836843.86..5086610.51 rows=19995920 width=44)
                           Merge Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Gather Merge  (cost=836716.37..3362619.76 rows=4999504 width=43)
                                 Workers Planned: 4
                                 ->  Merge Join  (cost=835716.31..2766130.57 rows=1249876 width=43)
                                       Merge Cond: (orders.o_orderkey = lineitem_1.l_orderkey)
                                       ->  Sort  (cost=835715.74..845090.80 rows=3750021 width=39)
                                             Sort Key: orders.o_orderkey
                                             ->  Parallel Hash Join  (cost=44385.15..352997.19 rows=3750021 width=39)
                                                   Hash Cond: (orders.o_custkey = customer.c_custkey)
                                                   ->  Parallel Seq Scan on orders  (cost=0.00..298768.21 rows=3750021 width=20)
                                                   ->  Parallel Hash  (cost=39697.29..39697.29 rows=375029 width=23)
                                                         ->  Parallel Seq Scan on customer  (cost=0.00..39697.29 rows=375029 width=23)
                                       ->  GroupAggregate  (cost=0.56..1886667.20 rows=4999504 width=4)
                                             Group Key: lineitem_1.l_orderkey
                                             Filter: (sum(lineitem_1.l_quantity) > '313'::numeric)
                                             ->  Index Only Scan using q18_idx_1 on lineitem lineitem_1  (cost=0.56..1361719.28 rows=59994048 width=9)
                           ->  Index Only Scan using q18_idx_1 on lineitem  (cost=0.56..1361719.28 rows=59994048 width=9)
 JIT:
   Functions: 29
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(29 rows)

query 19 run 1
SET
SET
SET

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=69521.52..69521.53 rows=1 width=32)
   ->  Finalize Aggregate  (cost=69521.52..69521.53 rows=1 width=32)
         ->  Gather  (cost=69521.09..69521.50 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=68521.09..68521.10 rows=1 width=32)
                     ->  Nested Loop  (cost=0.56..68518.99 rows=280 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..62230.85 rows=1207 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..5.20 rows=1 width=21)
                                 Index Cond: ((l_partkey = part.p_partkey) AND (l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                                 Filter: ((((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 19 run 2
SET
SET
SET


 Limit  (cost=69521.52..69521.53 rows=1 width=32)
   ->  Finalize Aggregate  (cost=69521.52..69521.53 rows=1 width=32)
         ->  Gather  (cost=69521.09..69521.50 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=68521.09..68521.10 rows=1 width=32)
                     ->  Nested Loop  (cost=0.56..68518.99 rows=280 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..62230.85 rows=1207 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..5.20 rows=1 width=21)
                                 Index Cond: ((l_partkey = part.p_partkey) AND (l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                                 Filter: ((((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 19 run 3
SET
SET
SET


 Limit  (cost=69521.52..69521.53 rows=1 width=32)
   ->  Finalize Aggregate  (cost=69521.52..69521.53 rows=1 width=32)
         ->  Gather  (cost=69521.09..69521.50 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=68521.09..68521.10 rows=1 width=32)
                     ->  Nested Loop  (cost=0.56..68518.99 rows=280 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..62230.85 rows=1207 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..5.20 rows=1 width=21)
                                 Index Cond: ((l_partkey = part.p_partkey) AND (l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                                 Filter: ((((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 19 run 4
SET
SET
SET

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=69521.52..69521.53 rows=1 width=32)
   ->  Finalize Aggregate  (cost=69521.52..69521.53 rows=1 width=32)
         ->  Gather  (cost=69521.09..69521.50 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=68521.09..68521.10 rows=1 width=32)
                     ->  Nested Loop  (cost=0.56..68518.99 rows=280 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..62230.85 rows=1207 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..5.20 rows=1 width=21)
                                 Index Cond: ((l_partkey = part.p_partkey) AND (l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                                 Filter: ((((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 19 run 5
SET
SET
SET


 Limit  (cost=69521.52..69521.53 rows=1 width=32)
   ->  Finalize Aggregate  (cost=69521.52..69521.53 rows=1 width=32)
         ->  Gather  (cost=69521.09..69521.50 rows=4 width=32)
               Workers Planned: 4
               ->  Partial Aggregate  (cost=68521.09..68521.10 rows=1 width=32)
                     ->  Nested Loop  (cost=0.56..68518.99 rows=280 width=12)
                           ->  Parallel Seq Scan on part  (cost=0.00..62230.85 rows=1207 width=30)
                                 Filter: ((p_size >= 1) AND (((p_brand = 'Brand#24'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#43'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#44'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
                           ->  Index Only Scan using q19_idx_1 on lineitem  (cost=0.56..5.20 rows=1 width=21)
                                 Index Cond: ((l_partkey = part.p_partkey) AND (l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar))
                                 Filter: ((((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric)) OR ((l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric))) AND (((part.p_brand = 'Brand#24'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#43'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (l_quantity >= '10'::numeric) AND (l_quantity <= '20'::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#44'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (l_quantity >= '20'::numeric) AND (l_quantity <= '30'::numeric) AND (part.p_size <= 15))))
(11 rows)

query 20 run 1
SET
SET
SET
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2528132.13..2726829.91 rows=1 width=51)
   ->  Nested Loop Semi Join  (cost=2528132.13..2726829.91 rows=1 width=51)
         Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
         ->  Gather Merge  (cost=4122.93..4578.81 rows=4000 width=55)
               Workers Planned: 1
               ->  Sort  (cost=3122.92..3128.80 rows=2353 width=55)
                     Sort Key: supplier.s_name
                     ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=55)
                           Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=59)
                           ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'IRAQ'::bpchar)
         ->  Materialize  (cost=2524009.20..2722071.10 rows=3 width=8)
               ->  Hash Join  (cost=2524009.20..2722071.08 rows=3 width=8)
                     Hash Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                     Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                     ->  HashAggregate  (cost=2453867.11..2615588.06 rows=4845441 width=40)
                           Group Key: lineitem.l_partkey, lineitem.l_suppkey
                           Planned Partitions: 32
                           ->  Seq Scan on lineitem  (cost=0.00..2025053.72 rows=9117627 width=13)
                                 Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                     ->  Hash  (cost=68930.03..68930.03 rows=80804 width=16)
                           ->  Gather  (cost=1000.86..68930.03 rows=80804 width=16)
                                 Workers Planned: 4
                                 ->  Nested Loop  (cost=0.86..59849.63 rows=20201 width=16)
                                       ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.43..45556.31 rows=5050 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.43..2.64 rows=19 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
 JIT:
   Functions: 33
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(33 rows)

query 20 run 2
SET
SET
SET
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2528132.13..2726829.91 rows=1 width=51)
   ->  Nested Loop Semi Join  (cost=2528132.13..2726829.91 rows=1 width=51)
         Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
         ->  Gather Merge  (cost=4122.93..4578.81 rows=4000 width=55)
               Workers Planned: 1
               ->  Sort  (cost=3122.92..3128.80 rows=2353 width=55)
                     Sort Key: supplier.s_name
                     ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=55)
                           Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=59)
                           ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'IRAQ'::bpchar)
         ->  Materialize  (cost=2524009.20..2722071.10 rows=3 width=8)
               ->  Hash Join  (cost=2524009.20..2722071.08 rows=3 width=8)
                     Hash Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                     Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                     ->  HashAggregate  (cost=2453867.11..2615588.06 rows=4845441 width=40)
                           Group Key: lineitem.l_partkey, lineitem.l_suppkey
                           Planned Partitions: 32
                           ->  Seq Scan on lineitem  (cost=0.00..2025053.72 rows=9117627 width=13)
                                 Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                     ->  Hash  (cost=68930.03..68930.03 rows=80804 width=16)
                           ->  Gather  (cost=1000.86..68930.03 rows=80804 width=16)
                                 Workers Planned: 4
                                 ->  Nested Loop  (cost=0.86..59849.63 rows=20201 width=16)
                                       ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.43..45556.31 rows=5050 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.43..2.64 rows=19 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
 JIT:
   Functions: 33
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(33 rows)

query 20 run 3
SET
SET
SET
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2528132.13..2726829.91 rows=1 width=51)
   ->  Nested Loop Semi Join  (cost=2528132.13..2726829.91 rows=1 width=51)
         Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
         ->  Gather Merge  (cost=4122.93..4578.81 rows=4000 width=55)
               Workers Planned: 1
               ->  Sort  (cost=3122.92..3128.80 rows=2353 width=55)
                     Sort Key: supplier.s_name
                     ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=55)
                           Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=59)
                           ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'IRAQ'::bpchar)
         ->  Materialize  (cost=2524009.20..2722071.10 rows=3 width=8)
               ->  Hash Join  (cost=2524009.20..2722071.08 rows=3 width=8)
                     Hash Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                     Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                     ->  HashAggregate  (cost=2453867.11..2615588.06 rows=4845441 width=40)
                           Group Key: lineitem.l_partkey, lineitem.l_suppkey
                           Planned Partitions: 32
                           ->  Seq Scan on lineitem  (cost=0.00..2025053.72 rows=9117627 width=13)
                                 Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                     ->  Hash  (cost=68930.03..68930.03 rows=80804 width=16)
                           ->  Gather  (cost=1000.86..68930.03 rows=80804 width=16)
                                 Workers Planned: 4
                                 ->  Nested Loop  (cost=0.86..59849.63 rows=20201 width=16)
                                       ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.43..45556.31 rows=5050 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.43..2.64 rows=19 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
 JIT:
   Functions: 33
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(33 rows)

query 20 run 4
SET
SET
SET
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2528132.13..2726829.91 rows=1 width=51)
   ->  Nested Loop Semi Join  (cost=2528132.13..2726829.91 rows=1 width=51)
         Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
         ->  Gather Merge  (cost=4122.93..4578.81 rows=4000 width=55)
               Workers Planned: 1
               ->  Sort  (cost=3122.92..3128.80 rows=2353 width=55)
                     Sort Key: supplier.s_name
                     ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=55)
                           Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=59)
                           ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'IRAQ'::bpchar)
         ->  Materialize  (cost=2524009.20..2722071.10 rows=3 width=8)
               ->  Hash Join  (cost=2524009.20..2722071.08 rows=3 width=8)
                     Hash Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                     Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                     ->  HashAggregate  (cost=2453867.11..2615588.06 rows=4845441 width=40)
                           Group Key: lineitem.l_partkey, lineitem.l_suppkey
                           Planned Partitions: 32
                           ->  Seq Scan on lineitem  (cost=0.00..2025053.72 rows=9117627 width=13)
                                 Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                     ->  Hash  (cost=68930.03..68930.03 rows=80804 width=16)
                           ->  Gather  (cost=1000.86..68930.03 rows=80804 width=16)
                                 Workers Planned: 4
                                 ->  Nested Loop  (cost=0.86..59849.63 rows=20201 width=16)
                                       ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.43..45556.31 rows=5050 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.43..2.64 rows=19 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
 JIT:
   Functions: 33
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(33 rows)

query 20 run 5
SET
SET
SET
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2528132.13..2726829.91 rows=1 width=51)
   ->  Nested Loop Semi Join  (cost=2528132.13..2726829.91 rows=1 width=51)
         Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
         ->  Gather Merge  (cost=4122.93..4578.81 rows=4000 width=55)
               Workers Planned: 1
               ->  Sort  (cost=3122.92..3128.80 rows=2353 width=55)
                     Sort Key: supplier.s_name
                     ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=55)
                           Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=59)
                           ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                 ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                       Filter: (n_name = 'IRAQ'::bpchar)
         ->  Materialize  (cost=2524009.20..2722071.10 rows=3 width=8)
               ->  Hash Join  (cost=2524009.20..2722071.08 rows=3 width=8)
                     Hash Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                     Join Filter: ((partsupp.ps_availqty)::numeric > ((0.5 * sum(lineitem.l_quantity))))
                     ->  HashAggregate  (cost=2453867.11..2615588.06 rows=4845441 width=40)
                           Group Key: lineitem.l_partkey, lineitem.l_suppkey
                           Planned Partitions: 32
                           ->  Seq Scan on lineitem  (cost=0.00..2025053.72 rows=9117627 width=13)
                                 Filter: ((l_shipdate >= '1996-01-01'::date) AND (l_shipdate < '1997-01-01'::date))
                     ->  Hash  (cost=68930.03..68930.03 rows=80804 width=16)
                           ->  Gather  (cost=1000.86..68930.03 rows=80804 width=16)
                                 Workers Planned: 4
                                 ->  Nested Loop  (cost=0.86..59849.63 rows=20201 width=16)
                                       ->  Parallel Index Only Scan using q20_idx_2 on part  (cost=0.43..45556.31 rows=5050 width=4)
                                             Filter: ((p_name)::text ~~ 'olive%'::text)
                                       ->  Index Only Scan using q20_idx_1 on partsupp  (cost=0.43..2.64 rows=19 width=12)
                                             Index Cond: (ps_partkey = part.p_partkey)
 JIT:
   Functions: 33
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(33 rows)

query 21 run 1
SET
SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=564195.18..564195.18 rows=1 width=34)
   ->  Sort  (cost=564195.18..564195.18 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=564195.15..564195.17 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=564195.15..564195.15 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=285527.11..564195.14 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=285526.54..564192.49 rows=1 width=38)
                                 ->  Gather  (cost=285526.11..564190.04 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Parallel Hash Right Anti Join  (cost=284526.11..563189.94 rows=1 width=34)
                                             Hash Cond: (l3.l_orderkey = l1.l_orderkey)
                                             Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                             ->  Parallel Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.56..259083.69 rows=4999504 width=8)
                                             ->  Parallel Hash  (cost=282027.82..282027.82 rows=199818 width=34)
                                                   ->  Parallel Hash Join  (cost=3021.13..282027.82 rows=199818 width=34)
                                                         Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                         ->  Parallel Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.56..259083.69 rows=4999504 width=8)
                                                         ->  Parallel Hash  (cost=2991.15..2991.15 rows=2353 width=30)
                                                               ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=30)
                                                                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                                     ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=34)
                                                                     ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                                 Filter: (n_name = 'PERU'::bpchar)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.45 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.56..2.63 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
 JIT:
   Functions: 36
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(34 rows)

query 21 run 2
SET
SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=564195.18..564195.18 rows=1 width=34)
   ->  Sort  (cost=564195.18..564195.18 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=564195.15..564195.17 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=564195.15..564195.15 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=285527.11..564195.14 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=285526.54..564192.49 rows=1 width=38)
                                 ->  Gather  (cost=285526.11..564190.04 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Parallel Hash Right Anti Join  (cost=284526.11..563189.94 rows=1 width=34)
                                             Hash Cond: (l3.l_orderkey = l1.l_orderkey)
                                             Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                             ->  Parallel Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.56..259083.69 rows=4999504 width=8)
                                             ->  Parallel Hash  (cost=282027.82..282027.82 rows=199818 width=34)
                                                   ->  Parallel Hash Join  (cost=3021.13..282027.82 rows=199818 width=34)
                                                         Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                         ->  Parallel Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.56..259083.69 rows=4999504 width=8)
                                                         ->  Parallel Hash  (cost=2991.15..2991.15 rows=2353 width=30)
                                                               ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=30)
                                                                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                                     ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=34)
                                                                     ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                                 Filter: (n_name = 'PERU'::bpchar)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.45 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.56..2.63 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
 JIT:
   Functions: 36
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(34 rows)

query 21 run 3
SET
SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=564195.18..564195.18 rows=1 width=34)
   ->  Sort  (cost=564195.18..564195.18 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=564195.15..564195.17 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=564195.15..564195.15 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=285527.11..564195.14 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=285526.54..564192.49 rows=1 width=38)
                                 ->  Gather  (cost=285526.11..564190.04 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Parallel Hash Right Anti Join  (cost=284526.11..563189.94 rows=1 width=34)
                                             Hash Cond: (l3.l_orderkey = l1.l_orderkey)
                                             Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                             ->  Parallel Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.56..259083.69 rows=4999504 width=8)
                                             ->  Parallel Hash  (cost=282027.82..282027.82 rows=199818 width=34)
                                                   ->  Parallel Hash Join  (cost=3021.13..282027.82 rows=199818 width=34)
                                                         Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                         ->  Parallel Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.56..259083.69 rows=4999504 width=8)
                                                         ->  Parallel Hash  (cost=2991.15..2991.15 rows=2353 width=30)
                                                               ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=30)
                                                                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                                     ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=34)
                                                                     ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                                 Filter: (n_name = 'PERU'::bpchar)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.45 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.56..2.63 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
 JIT:
   Functions: 36
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(34 rows)

query 21 run 4
SET
SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=564195.18..564195.18 rows=1 width=34)
   ->  Sort  (cost=564195.18..564195.18 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=564195.15..564195.17 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=564195.15..564195.15 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=285527.11..564195.14 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=285526.54..564192.49 rows=1 width=38)
                                 ->  Gather  (cost=285526.11..564190.04 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Parallel Hash Right Anti Join  (cost=284526.11..563189.94 rows=1 width=34)
                                             Hash Cond: (l3.l_orderkey = l1.l_orderkey)
                                             Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                             ->  Parallel Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.56..259083.69 rows=4999504 width=8)
                                             ->  Parallel Hash  (cost=282027.82..282027.82 rows=199818 width=34)
                                                   ->  Parallel Hash Join  (cost=3021.13..282027.82 rows=199818 width=34)
                                                         Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                         ->  Parallel Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.56..259083.69 rows=4999504 width=8)
                                                         ->  Parallel Hash  (cost=2991.15..2991.15 rows=2353 width=30)
                                                               ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=30)
                                                                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                                     ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=34)
                                                                     ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                                 Filter: (n_name = 'PERU'::bpchar)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.45 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.56..2.63 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
 JIT:
   Functions: 36
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(34 rows)

query 21 run 5
SET
SET
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=564195.18..564195.18 rows=1 width=34)
   ->  Sort  (cost=564195.18..564195.18 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=564195.15..564195.17 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=564195.15..564195.15 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop Semi Join  (cost=285527.11..564195.14 rows=1 width=26)
                           Join Filter: (l2.l_suppkey <> l1.l_suppkey)
                           ->  Nested Loop  (cost=285526.54..564192.49 rows=1 width=38)
                                 ->  Gather  (cost=285526.11..564190.04 rows=1 width=34)
                                       Workers Planned: 4
                                       ->  Parallel Hash Right Anti Join  (cost=284526.11..563189.94 rows=1 width=34)
                                             Hash Cond: (l3.l_orderkey = l1.l_orderkey)
                                             Join Filter: (l3.l_suppkey <> l1.l_suppkey)
                                             ->  Parallel Index Only Scan using q21_idx_2 on lineitem l3  (cost=0.56..259083.69 rows=4999504 width=8)
                                             ->  Parallel Hash  (cost=282027.82..282027.82 rows=199818 width=34)
                                                   ->  Parallel Hash Join  (cost=3021.13..282027.82 rows=199818 width=34)
                                                         Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                         ->  Parallel Index Only Scan using q21_idx_2 on lineitem l1  (cost=0.56..259083.69 rows=4999504 width=8)
                                                         ->  Parallel Hash  (cost=2991.15..2991.15 rows=2353 width=30)
                                                               ->  Hash Join  (cost=1.32..2991.15 rows=2353 width=30)
                                                                     Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                                     ->  Parallel Seq Scan on supplier  (cost=0.00..2809.24 rows=58824 width=34)
                                                                     ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                                                           ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                                 Filter: (n_name = 'PERU'::bpchar)
                                 ->  Index Only Scan using q21_idx_3 on orders  (cost=0.43..2.45 rows=1 width=4)
                                       Index Cond: ((o_orderkey = l1.l_orderkey) AND (o_orderstatus = 'F'::bpchar))
                           ->  Index Only Scan using q21_idx_1 on lineitem l2  (cost=0.56..2.63 rows=4 width=8)
                                 Index Cond: (l_orderkey = orders.o_orderkey)
 JIT:
   Functions: 36
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(34 rows)

query 22 run 1
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=93878.33..93880.01 rows=1 width=72)
   InitPlan 1
     ->  Finalize Aggregate  (cost=46821.73..46821.74 rows=1 width=32)
           ->  Gather  (cost=46821.30..46821.71 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=45821.30..45821.31 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..45791.51 rows=11914 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=47056.58..60365.40 rows=7891 width=72)
         Group Key: SUBSTRING(customer.c_phone FROM 1 FOR 2)
         ->  Nested Loop Anti Join  (cost=47056.58..60168.12 rows=7891 width=38)
               ->  Gather Merge  (cost=47056.15..49151.62 rows=17501 width=26)
                     Workers Planned: 4
                     ->  Sort  (cost=46056.09..46067.03 rows=4375 width=26)
                           Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                           ->  Parallel Seq Scan on customer  (cost=0.00..45791.51 rows=4375 width=26)
                                 Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
               ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.65 rows=18 width=4)
                     Index Cond: (o_custkey = customer.c_custkey)
(19 rows)

query 22 run 2
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=93878.33..93880.01 rows=1 width=72)
   InitPlan 1
     ->  Finalize Aggregate  (cost=46821.73..46821.74 rows=1 width=32)
           ->  Gather  (cost=46821.30..46821.71 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=45821.30..45821.31 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..45791.51 rows=11914 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=47056.58..60365.40 rows=7891 width=72)
         Group Key: SUBSTRING(customer.c_phone FROM 1 FOR 2)
         ->  Nested Loop Anti Join  (cost=47056.58..60168.12 rows=7891 width=38)
               ->  Gather Merge  (cost=47056.15..49151.62 rows=17501 width=26)
                     Workers Planned: 4
                     ->  Sort  (cost=46056.09..46067.03 rows=4375 width=26)
                           Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                           ->  Parallel Seq Scan on customer  (cost=0.00..45791.51 rows=4375 width=26)
                                 Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
               ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.65 rows=18 width=4)
                     Index Cond: (o_custkey = customer.c_custkey)
(19 rows)

query 22 run 3
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=93878.33..93880.01 rows=1 width=72)
   InitPlan 1
     ->  Finalize Aggregate  (cost=46821.73..46821.74 rows=1 width=32)
           ->  Gather  (cost=46821.30..46821.71 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=45821.30..45821.31 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..45791.51 rows=11914 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=47056.58..60365.40 rows=7891 width=72)
         Group Key: SUBSTRING(customer.c_phone FROM 1 FOR 2)
         ->  Nested Loop Anti Join  (cost=47056.58..60168.12 rows=7891 width=38)
               ->  Gather Merge  (cost=47056.15..49151.62 rows=17501 width=26)
                     Workers Planned: 4
                     ->  Sort  (cost=46056.09..46067.03 rows=4375 width=26)
                           Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                           ->  Parallel Seq Scan on customer  (cost=0.00..45791.51 rows=4375 width=26)
                                 Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
               ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.65 rows=18 width=4)
                     Index Cond: (o_custkey = customer.c_custkey)
(19 rows)

query 22 run 4
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=93878.33..93880.01 rows=1 width=72)
   InitPlan 1
     ->  Finalize Aggregate  (cost=46821.73..46821.74 rows=1 width=32)
           ->  Gather  (cost=46821.30..46821.71 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=45821.30..45821.31 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..45791.51 rows=11914 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=47056.58..60365.40 rows=7891 width=72)
         Group Key: SUBSTRING(customer.c_phone FROM 1 FOR 2)
         ->  Nested Loop Anti Join  (cost=47056.58..60168.12 rows=7891 width=38)
               ->  Gather Merge  (cost=47056.15..49151.62 rows=17501 width=26)
                     Workers Planned: 4
                     ->  Sort  (cost=46056.09..46067.03 rows=4375 width=26)
                           Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                           ->  Parallel Seq Scan on customer  (cost=0.00..45791.51 rows=4375 width=26)
                                 Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
               ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.65 rows=18 width=4)
                     Index Cond: (o_custkey = customer.c_custkey)
(19 rows)

query 22 run 5
SET
SET
SET
                                                                        QUERY PLAN                                                                        
----------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=93878.33..93880.01 rows=1 width=72)
   InitPlan 1
     ->  Finalize Aggregate  (cost=46821.73..46821.74 rows=1 width=32)
           ->  Gather  (cost=46821.30..46821.71 rows=4 width=32)
                 Workers Planned: 4
                 ->  Partial Aggregate  (cost=45821.30..45821.31 rows=1 width=32)
                       ->  Parallel Seq Scan on customer customer_1  (cost=0.00..45791.51 rows=11914 width=6)
                             Filter: ((c_acctbal > 0.00) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
   ->  GroupAggregate  (cost=47056.58..60365.40 rows=7891 width=72)
         Group Key: SUBSTRING(customer.c_phone FROM 1 FOR 2)
         ->  Nested Loop Anti Join  (cost=47056.58..60168.12 rows=7891 width=38)
               ->  Gather Merge  (cost=47056.15..49151.62 rows=17501 width=26)
                     Workers Planned: 4
                     ->  Sort  (cost=46056.09..46067.03 rows=4375 width=26)
                           Sort Key: (SUBSTRING(customer.c_phone FROM 1 FOR 2))
                           ->  Parallel Seq Scan on customer  (cost=0.00..45791.51 rows=4375 width=26)
                                 Filter: ((c_acctbal > (InitPlan 1).col1) AND (SUBSTRING(c_phone FROM 1 FOR 2) = ANY ('{21,29,26,34,14,15,17}'::text[])))
               ->  Index Only Scan using idx_orders_custkey on orders  (cost=0.43..2.65 rows=18 width=4)
                     Index Cond: (o_custkey = customer.c_custkey)
(19 rows)

